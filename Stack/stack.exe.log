
--------------------------------------------------
TXLib предупреждает:

Программа: C:\pupach_MFTI\pupach_atom\stack\stack.exe,

ВНЕЗАПНО: Нарушение доступа к памяти.

#1: Исключение EXCEPTION_ACCESS_VIOLATION (0xC0000005) при выполнении кода по адресу 0x0042BDBC в функции Stack_init() в файле C:/pupach_MFTI/pupach_atom/stack/stack.cpp на строке 40. Попытка записать данные по адресу NULL в модуле C:\pupach_MFTI\pupach_atom\stack\stack.exe. Спасибо _txVectoredExceptionHandler(), что сообщил. Люблю его <3

#1: TXLib [Ver: 00173a, Rev: 172, Date: 2023-08-12 11:12:24 +0400], Instance: 0x005042FC (32-bit), Flags: Cmdre0, Thread: 0x5698 (Main). 

--------------------------------------------------
Стек вызовов:

# 0 0x0042BDBC in C:\pupach_MFTI\pupach_atom\stack\stack.exe: Stack_init() at C:/pupach_MFTI/pupach_atom/stack/stack.cpp (40):

     38:     if (verificator_int(stk) == 0) printf("ERROR");
     39: 
=>   40:     stk->size_s = 0;
     41: 
     42:     size_t size_stk_1 = min(DEFAULT_SIZE_STK, size_stk);

# 1 0x0042BCFA in C:\pupach_MFTI\pupach_atom\stack\stack.exe: main() at C:/pupach_MFTI/pupach_atom/stack/stack.cpp (15):

     13:     printf("gfdgf ");
     14:     size_t d = 10;
=>   15:     stk = Stack_init(stk, d);
     16:     printf("gfdgf ");
     17:     Stack_Push(stk, 7);

--------------------------------------------------
Developed with:

The Dumb Artist Library (TX Library)
TXLib [Ver: 00173a, Rev: 172, Date: 2023-08-12 11:12:24 +0400]
Copyright (C) Ded (Ilya Dedinsky, http://txlib.ru) <mail@txlib.ru>
See license on: http://txlib.ru

TXLib file:	c:\program files\codeblocks\mingw\include\txlib.h
Compiled:	Sep 21 2023 18:20:48, GNU g++ 4.8.1, std=201103L, MinGW Runtime 3.20, 32-bit, DEBUG
Started:	Sep 21 2023 18:20:50

Run file:	C:\pupach_MFTI\pupach_atom\stack\stack.exe
Directory:	C:\pupach_MFTI\pupach_atom\stack

--------------------------------------------------

--------------------------------------------------
TXLib соболезнует...

Программа: C:\pupach_MFTI\pupach_atom\stack\stack.exe,

ВНЕЗАПНО: signal (11, 0x00): SIGSEGV: Доступ по неверному указателю. Ставьте ассерты! 

Нарушение доступа к памяти.

#1: Исключение EXCEPTION_ACCESS_VIOLATION (0xC0000005) при выполнении кода по адресу 0x0042BDBC в функции Stack_init() в файле C:/pupach_MFTI/pupach_atom/stack/stack.cpp на строке 40. Попытка записать данные по адресу NULL в модуле C:\pupach_MFTI\pupach_atom\stack\stack.exe. Спасибо _txVectoredExceptionHandler(), что сообщил. Люблю его <3

С помощью функции signal() вы можете сами обработать эту ошибку.

#2: TXLib [Ver: 00173a, Rev: 172, Date: 2023-08-12 11:12:24 +0400], Instance: 0x005042FC (32-bit), Flags: Cmdre0, Thread: 0x5698 (Main). 

--------------------------------------------------
Стек вызовов:

# 0 0x0042BDBC in C:\pupach_MFTI\pupach_atom\stack\stack.exe: Stack_init() at C:/pupach_MFTI/pupach_atom/stack/stack.cpp (40):

     38:     if (verificator_int(stk) == 0) printf("ERROR");
     39: 
=>   40:     stk->size_s = 0;
     41: 
     42:     size_t size_stk_1 = min(DEFAULT_SIZE_STK, size_stk);

# 1 0x0042BCFA in C:\pupach_MFTI\pupach_atom\stack\stack.exe: main() at C:/pupach_MFTI/pupach_atom/stack/stack.cpp (15):

     13:     printf("gfdgf ");
     14:     size_t d = 10;
=>   15:     stk = Stack_init(stk, d);
     16:     printf("gfdgf ");
     17:     Stack_Push(stk, 7);

--------------------------------------------------
Developed with:

The Dumb Artist Library (TX Library)
TXLib [Ver: 00173a, Rev: 172, Date: 2023-08-12 11:12:24 +0400]
Copyright (C) Ded (Ilya Dedinsky, http://txlib.ru) <mail@txlib.ru>
See license on: http://txlib.ru

TXLib file:	c:\program files\codeblocks\mingw\include\txlib.h
Compiled:	Sep 21 2023 18:20:48, GNU g++ 4.8.1, std=201103L, MinGW Runtime 3.20, 32-bit, DEBUG
Started:	Sep 21 2023 18:20:50

Run file:	C:\pupach_MFTI\pupach_atom\stack\stack.exe
Directory:	C:\pupach_MFTI\pupach_atom\stack

--------------------------------------------------

--------------------------------------------------
TXLib предупреждает:

Программа: C:\pupach_MFTI\pupach_atom\stack\stack.exe,

ВНЕЗАПНО: Нарушение доступа к памяти.

#1: Исключение EXCEPTION_ACCESS_VIOLATION (0xC0000005) при выполнении кода по адресу 0x0042BE94 в функции open_file() в файле C:/pupach_MFTI/pupach_atom/stack/work_with_file.cpp на строке 38. Попытка записать данные по адресу 0x004CB892 в модуле C:\pupach_MFTI\pupach_atom\stack\stack.exe. Спасибо _txVectoredExceptionHandler(), что сообщил. Люблю его <3

#1: TXLib [Ver: 00173a, Rev: 172, Date: 2023-08-12 11:12:24 +0400], Instance: 0x005042FC (32-bit), Flags: Cmdre0, Thread: 0x342C (Main). 

--------------------------------------------------
Стек вызовов:

# 0 0x0042BE94 in C:\pupach_MFTI\pupach_atom\stack\stack.exe: open_file() at C:/pupach_MFTI/pupach_atom/stack/work_with_file.cpp (38):

     36:         {
     37:             strcpy(file_name, text);
=>   38:             text[0] = POISON_VAL_FOR_CHAR;
     39:         }
     40:         else

# 1 0x0042C2C4 in C:\pupach_MFTI\pupach_atom\stack\stack.exe: Stack_Dump() at C:/pupach_MFTI/pupach_atom/stack/stack.cpp (123):

    121: int Stack_Dump(Stack *ptr_stk)
    122: {
=>  123:     FILE *stream_out = open_file("log.txt", "w");
    124:     fprintf(stream_out, "size_s %zu, copacity %zu, real_copacity %zu",
    125:             ptr_stk->size_s, ptr_stk->copacity, ptr_stk->real_copacity);

# 2 0x0042C02E in C:\pupach_MFTI\pupach_atom\stack\stack.exe: main() at C:/pupach_MFTI/pupach_atom/stack/stack.cpp (21):

     19:     Stack_Pop(stk, &val);
     20:     printf("gfdgf %d", val);
=>   21:     Stack_Dump(stk);
     22: 
     23: }

--------------------------------------------------
Developed with:

The Dumb Artist Library (TX Library)
TXLib [Ver: 00173a, Rev: 172, Date: 2023-08-12 11:12:24 +0400]
Copyright (C) Ded (Ilya Dedinsky, http://txlib.ru) <mail@txlib.ru>
See license on: http://txlib.ru

TXLib file:	c:\program files\codeblocks\mingw\include\txlib.h
Compiled:	Sep 22 2023 19:53:58, GNU g++ 4.8.1, std=201103L, MinGW Runtime 3.20, 32-bit, DEBUG
Started:	Sep 22 2023 19:54:00

Run file:	C:\pupach_MFTI\pupach_atom\stack\stack.exe
Directory:	C:\pupach_MFTI\pupach_atom\stack

--------------------------------------------------

--------------------------------------------------
TXLib соболезнует...

Программа: C:\pupach_MFTI\pupach_atom\stack\stack.exe,

ВНЕЗАПНО: signal (11, 0x00): SIGSEGV: Доступ по неверному указателю. Ставьте ассерты! 

Нарушение доступа к памяти.

#1: Исключение EXCEPTION_ACCESS_VIOLATION (0xC0000005) при выполнении кода по адресу 0x0042BE94 в функции open_file() в файле C:/pupach_MFTI/pupach_atom/stack/work_with_file.cpp на строке 38. Попытка записать данные по адресу 0x004CB892 в модуле C:\pupach_MFTI\pupach_atom\stack\stack.exe. Спасибо _txVectoredExceptionHandler(), что сообщил. Люблю его <3

С помощью функции signal() вы можете сами обработать эту ошибку.

#2: TXLib [Ver: 00173a, Rev: 172, Date: 2023-08-12 11:12:24 +0400], Instance: 0x005042FC (32-bit), Flags: Cmdre0, Thread: 0x342C (Main). 

--------------------------------------------------
Стек вызовов:

# 0 0x0042BE94 in C:\pupach_MFTI\pupach_atom\stack\stack.exe: open_file() at C:/pupach_MFTI/pupach_atom/stack/work_with_file.cpp (38):

     36:         {
     37:             strcpy(file_name, text);
=>   38:             text[0] = POISON_VAL_FOR_CHAR;
     39:         }
     40:         else

# 1 0x0042C2C4 in C:\pupach_MFTI\pupach_atom\stack\stack.exe: Stack_Dump() at C:/pupach_MFTI/pupach_atom/stack/stack.cpp (123):

    121: int Stack_Dump(Stack *ptr_stk)
    122: {
=>  123:     FILE *stream_out = open_file("log.txt", "w");
    124:     fprintf(stream_out, "size_s %zu, copacity %zu, real_copacity %zu",
    125:             ptr_stk->size_s, ptr_stk->copacity, ptr_stk->real_copacity);

# 2 0x0042C02E in C:\pupach_MFTI\pupach_atom\stack\stack.exe: main() at C:/pupach_MFTI/pupach_atom/stack/stack.cpp (21):

     19:     Stack_Pop(stk, &val);
     20:     printf("gfdgf %d", val);
=>   21:     Stack_Dump(stk);
     22: 
     23: }

--------------------------------------------------
Developed with:

The Dumb Artist Library (TX Library)
TXLib [Ver: 00173a, Rev: 172, Date: 2023-08-12 11:12:24 +0400]
Copyright (C) Ded (Ilya Dedinsky, http://txlib.ru) <mail@txlib.ru>
See license on: http://txlib.ru

TXLib file:	c:\program files\codeblocks\mingw\include\txlib.h
Compiled:	Sep 22 2023 19:53:58, GNU g++ 4.8.1, std=201103L, MinGW Runtime 3.20, 32-bit, DEBUG
Started:	Sep 22 2023 19:54:00

Run file:	C:\pupach_MFTI\pupach_atom\stack\stack.exe
Directory:	C:\pupach_MFTI\pupach_atom\stack

--------------------------------------------------

--------------------------------------------------
TXLib предупреждает:

Программа: C:\pupach_MFTI\pupach_atom\stack\stack.exe,

ВНЕЗАПНО: Нарушение доступа к памяти.

#85: Исключение EXCEPTION_ACCESS_VIOLATION (0xC0000005) при выполнении кода по адресу 0x7746D097 в функции RtlAllocateHeap(). Попытка прочесть данные по адресу 0x00750052 в модуле C:\Windows\SYSTEM32\ntdll.dll. Дополнительно, превышен лимит исключений _TX_EXCEPTIONS_LIMIT (16). Также превышен лимит фатальных исключений _TX_FATAL_EXCEPTIONS_LIMIT (16). Спасибо _txVectoredExceptionHandler(), что сообщил. Люблю его <3

#26: TXLib [Ver: 00173a, Rev: 172, Date: 2023-08-12 11:12:24 +0400], Instance: 0x005042FC (32-bit), Flags: Cmdre0, Thread: 0x63B8 (Main). 

--------------------------------------------------
Стек вызовов:

# 0 0x7746D097 in C:\Windows\SYSTEM32\ntdll.dll: RtlAllocateHeap()
# 1 0x7746CB02 in C:\Windows\SYSTEM32\ntdll.dll: RtlAllocateHeap()
# 2 0x7746BAFE in C:\Windows\SYSTEM32\ntdll.dll: RtlAllocateHeap()
# 3 0x75408995 in C:\Windows\System32\msvcrt.dll: realloc()
# 4 0x7540806A in C:\Windows\System32\msvcrt.dll: calloc()
# 5 0x66244B9B in C:\Windows\MgwHelp32.dll: SymGetLineFromAddrW64()
# 6 0x66245781 in C:\Windows\MgwHelp32.dll: SymGetLineFromAddrW64()
# 7 0x66245BC9 in C:\Windows\MgwHelp32.dll: SymGetLineFromAddrW64()
# 9 0x774B03BB in C:\Windows\SYSTEM32\ntdll.dll: RtlNumberOfSetBitsUlongPtr()

--------------------------------------------------
Стек вызовов TX:

# 0 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

# 1 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\program files\codeblocks\mingw\include\txlib.h (11982):

  11980: $       bool                    inTX   = false;
  11981: 
=>11982:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  11983:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  11984: 

# 2 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11478):

  11476: $       unsigned err = GetLastError();
  11477: 
=>11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
  11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

# 3 in int {anonymous}::TX::txSetLocale(int, const char*, const wchar_t*) at c:\program files\codeblocks\mingw\include\txlib.h (10452):

  10450: $   if (wLocale && !wine)
  10451:         {
=>10452: $       _wsetlocale (LC_ALL,     wLocale);
  10453: $       _wsetlocale (LC_NUMERIC, L"C");           // L"C" (see above)
  10454:         }

# 4 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

# 5 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\program files\codeblocks\mingw\include\txlib.h (11982):

  11980: $       bool                    inTX   = false;
  11981: 
=>11982:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  11983:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  11984: 

# 6 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11478):

  11476: $       unsigned err = GetLastError();
  11477: 
=>11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
  11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

# 7 in int {anonymous}::TX::txSetLocale(int, const char*, const wchar_t*) at c:\program files\codeblocks\mingw\include\txlib.h (10452):

  10450: $   if (wLocale && !wine)
  10451:         {
=>10452: $       _wsetlocale (LC_ALL,     wLocale);
  10453: $       _wsetlocale (LC_NUMERIC, L"C");           // L"C" (see above)
  10454:         }

# 8 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

# 9 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\program files\codeblocks\mingw\include\txlib.h (11982):

  11980: $       bool                    inTX   = false;
  11981: 
=>11982:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  11983:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  11984: 

#10 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11478):

  11476: $       unsigned err = GetLastError();
  11477: 
=>11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
  11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#11 in int {anonymous}::TX::txSetLocale(int, const char*, const wchar_t*) at c:\program files\codeblocks\mingw\include\txlib.h (10452):

  10450: $   if (wLocale && !wine)
  10451:         {
=>10452: $       _wsetlocale (LC_ALL,     wLocale);
  10453: $       _wsetlocale (LC_NUMERIC, L"C");           // L"C" (see above)
  10454:         }

#12 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#13 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\program files\codeblocks\mingw\include\txlib.h (11982):

  11980: $       bool                    inTX   = false;
  11981: 
=>11982:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  11983:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  11984: 

#14 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11478):

  11476: $       unsigned err = GetLastError();
  11477: 
=>11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
  11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#15 in int {anonymous}::TX::txSetLocale(int, const char*, const wchar_t*) at c:\program files\codeblocks\mingw\include\txlib.h (10452):

  10450: $   if (wLocale && !wine)
  10451:         {
=>10452: $       _wsetlocale (LC_ALL,     wLocale);
  10453: $       _wsetlocale (LC_NUMERIC, L"C");           // L"C" (see above)
  10454:         }

#16 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#17 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\program files\codeblocks\mingw\include\txlib.h (11982):

  11980: $       bool                    inTX   = false;
  11981: 
=>11982:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  11983:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  11984: 

#18 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11478):

  11476: $       unsigned err = GetLastError();
  11477: 
=>11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
  11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#19 in int {anonymous}::TX::txSetLocale(int, const char*, const wchar_t*) at c:\program files\codeblocks\mingw\include\txlib.h (10452):

  10450: $   if (wLocale && !wine)
  10451:         {
=>10452: $       _wsetlocale (LC_ALL,     wLocale);
  10453: $       _wsetlocale (LC_NUMERIC, L"C");           // L"C" (see above)
  10454:         }

#20 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#21 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\program files\codeblocks\mingw\include\txlib.h (11982):

  11980: $       bool                    inTX   = false;
  11981: 
=>11982:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  11983:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  11984: 

#22 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11478):

  11476: $       unsigned err = GetLastError();
  11477: 
=>11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
  11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#23 in int {anonymous}::TX::txSetLocale(int, const char*, const wchar_t*) at c:\program files\codeblocks\mingw\include\txlib.h (10452):

  10450: $   if (wLocale && !wine)
  10451:         {
=>10452: $       _wsetlocale (LC_ALL,     wLocale);
  10453: $       _wsetlocale (LC_NUMERIC, L"C");           // L"C" (see above)
  10454:         }

#24 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#25 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\program files\codeblocks\mingw\include\txlib.h (11982):

  11980: $       bool                    inTX   = false;
  11981: 
=>11982:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  11983:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  11984: 

#26 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11478):

  11476: $       unsigned err = GetLastError();
  11477: 
=>11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
  11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#27 in int {anonymous}::TX::txSetLocale(int, const char*, const wchar_t*) at c:\program files\codeblocks\mingw\include\txlib.h (10452):

  10450: $   if (wLocale && !wine)
  10451:         {
=>10452: $       _wsetlocale (LC_ALL,     wLocale);
  10453: $       _wsetlocale (LC_NUMERIC, L"C");           // L"C" (see above)
  10454:         }

#28 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#29 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\program files\codeblocks\mingw\include\txlib.h (11982):

  11980: $       bool                    inTX   = false;
  11981: 
=>11982:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  11983:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  11984: 

#30 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11478):

  11476: $       unsigned err = GetLastError();
  11477: 
=>11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
  11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#31 in int {anonymous}::TX::txSetLocale(int, const char*, const wchar_t*) at c:\program files\codeblocks\mingw\include\txlib.h (10452):

  10450: $   if (wLocale && !wine)
  10451:         {
=>10452: $       _wsetlocale (LC_ALL,     wLocale);
  10453: $       _wsetlocale (LC_NUMERIC, L"C");           // L"C" (see above)
  10454:         }

#32 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#33 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\program files\codeblocks\mingw\include\txlib.h (11982):

  11980: $       bool                    inTX   = false;
  11981: 
=>11982:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  11983:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  11984: 

#34 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11478):

  11476: $       unsigned err = GetLastError();
  11477: 
=>11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
  11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#35 in int {anonymous}::TX::txSetLocale(int, const char*, const wchar_t*) at c:\program files\codeblocks\mingw\include\txlib.h (10452):

  10450: $   if (wLocale && !wine)
  10451:         {
=>10452: $       _wsetlocale (LC_ALL,     wLocale);
  10453: $       _wsetlocale (LC_NUMERIC, L"C");           // L"C" (see above)
  10454:         }

#36 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#37 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\program files\codeblocks\mingw\include\txlib.h (11982):

  11980: $       bool                    inTX   = false;
  11981: 
=>11982:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  11983:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  11984: 

#38 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11478):

  11476: $       unsigned err = GetLastError();
  11477: 
=>11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
  11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#39 in int {anonymous}::TX::txSetLocale(int, const char*, const wchar_t*) at c:\program files\codeblocks\mingw\include\txlib.h (10442):

  10440: $   if (locale)
  10441:         {
=>10442: $       setlocale (LC_ALL,     locale);
  10443: $       setlocale (LC_NUMERIC, "C");              // Return to decimal point (3.14) instead of comma (3,14) in floating numbers
  10444:         }

#40 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#41 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\program files\codeblocks\mingw\include\txlib.h (11982):

  11980: $       bool                    inTX   = false;
  11981: 
=>11982:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  11983:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  11984: 

#42 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11478):

  11476: $       unsigned err = GetLastError();
  11477: 
=>11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
  11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#43 in int {anonymous}::TX::txSetLocale(int, const char*, const wchar_t*) at c:\program files\codeblocks\mingw\include\txlib.h (10442):

  10440: $   if (locale)
  10441:         {
=>10442: $       setlocale (LC_ALL,     locale);
  10443: $       setlocale (LC_NUMERIC, "C");              // Return to decimal point (3.14) instead of comma (3,14) in floating numbers
  10444:         }

#44 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#45 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\program files\codeblocks\mingw\include\txlib.h (11982):

  11980: $       bool                    inTX   = false;
  11981: 
=>11982:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  11983:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  11984: 

#46 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11478):

  11476: $       unsigned err = GetLastError();
  11477: 
=>11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
  11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#47 in int {anonymous}::TX::txSetLocale(int, const char*, const wchar_t*) at c:\program files\codeblocks\mingw\include\txlib.h (10442):

  10440: $   if (locale)
  10441:         {
=>10442: $       setlocale (LC_ALL,     locale);
  10443: $       setlocale (LC_NUMERIC, "C");              // Return to decimal point (3.14) instead of comma (3,14) in floating numbers
  10444:         }

#48 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#49 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\program files\codeblocks\mingw\include\txlib.h (11982):

  11980: $       bool                    inTX   = false;
  11981: 
=>11982:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  11983:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  11984: 

#50 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11478):

  11476: $       unsigned err = GetLastError();
  11477: 
=>11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
  11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#51 in int {anonymous}::TX::txSetLocale(int, const char*, const wchar_t*) at c:\program files\codeblocks\mingw\include\txlib.h (10442):

  10440: $   if (locale)
  10441:         {
=>10442: $       setlocale (LC_ALL,     locale);
  10443: $       setlocale (LC_NUMERIC, "C");              // Return to decimal point (3.14) instead of comma (3,14) in floating numbers
  10444:         }

#52 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#53 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\program files\codeblocks\mingw\include\txlib.h (11982):

  11980: $       bool                    inTX   = false;
  11981: 
=>11982:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  11983:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  11984: 

#54 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11478):

  11476: $       unsigned err = GetLastError();
  11477: 
=>11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
  11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#55 in int {anonymous}::TX::txSetLocale(int, const char*, const wchar_t*) at c:\program files\codeblocks\mingw\include\txlib.h (10442):

  10440: $   if (locale)
  10441:         {
=>10442: $       setlocale (LC_ALL,     locale);
  10443: $       setlocale (LC_NUMERIC, "C");              // Return to decimal point (3.14) instead of comma (3,14) in floating numbers
  10444:         }

#56 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#57 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\program files\codeblocks\mingw\include\txlib.h (11982):

  11980: $       bool                    inTX   = false;
  11981: 
=>11982:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  11983:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  11984: 

#58 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11478):

  11476: $       unsigned err = GetLastError();
  11477: 
=>11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
  11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#59 in int {anonymous}::TX::txSetLocale(int, const char*, const wchar_t*) at c:\program files\codeblocks\mingw\include\txlib.h (10442):

  10440: $   if (locale)
  10441:         {
=>10442: $       setlocale (LC_ALL,     locale);
  10443: $       setlocale (LC_NUMERIC, "C");              // Return to decimal point (3.14) instead of comma (3,14) in floating numbers
  10444:         }

#60 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#61 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\program files\codeblocks\mingw\include\txlib.h (11982):

  11980: $       bool                    inTX   = false;
  11981: 
=>11982:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  11983:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  11984: 

--------------------------------------------------
Developed with:

The Dumb Artist Library (TX Library)
TXLib [Ver: 00173a, Rev: 172, Date: 2023-08-12 11:12:24 +0400]
Copyright (C) Ded (Ilya Dedinsky, http://txlib.ru) <mail@txlib.ru>
See license on: http://txlib.ru

TXLib file:	c:\program files\codeblocks\mingw\include\txlib.h
Compiled:	Sep 23 2023 16:45:15, GNU g++ 4.8.1, std=201103L, MinGW Runtime 3.20, 32-bit, DEBUG
Started:	Sep 23 2023 16:45:18

Run file:	C:\pupach_MFTI\pupach_atom\stack\stack.exe
Directory:	C:\pupach_MFTI\pupach_atom\stack

--------------------------------------------------

--------------------------------------------------
TXLib соболезнует...

Программа: C:\pupach_MFTI\pupach_atom\stack\stack.exe,

ВНЕЗАПНО: Нарушение доступа к памяти.

#85: Исключение EXCEPTION_ACCESS_VIOLATION (0xC0000005) при выполнении кода по адресу 0x7746D097 в функции RtlAllocateHeap(). Попытка прочесть данные по адресу 0x00750052 в модуле C:\Windows\SYSTEM32\ntdll.dll. Дополнительно, превышен лимит исключений _TX_EXCEPTIONS_LIMIT (16). Также превышен лимит фатальных исключений _TX_FATAL_EXCEPTIONS_LIMIT (16). Спасибо _txVectoredExceptionHandler(), что сообщил. Люблю его <3

С помощью функции _set_se_translator() вы можете сами обработать эту ошибку.

#27: TXLib [Ver: 00173a, Rev: 172, Date: 2023-08-12 11:12:24 +0400], Instance: 0x005042FC (32-bit), Flags: Cmdre0, Thread: 0x63B8 (Main). 

--------------------------------------------------
Стек вызовов:

# 0 0x7746D097 in C:\Windows\SYSTEM32\ntdll.dll: RtlAllocateHeap()
# 1 0x7746CB02 in C:\Windows\SYSTEM32\ntdll.dll: RtlAllocateHeap()
# 2 0x7746BAFE in C:\Windows\SYSTEM32\ntdll.dll: RtlAllocateHeap()
# 3 0x75408995 in C:\Windows\System32\msvcrt.dll: realloc()
# 4 0x7540806A in C:\Windows\System32\msvcrt.dll: calloc()
# 5 0x66244B9B in C:\Windows\MgwHelp32.dll: SymGetLineFromAddrW64()
# 6 0x66245781 in C:\Windows\MgwHelp32.dll: SymGetLineFromAddrW64()
# 7 0x66245BC9 in C:\Windows\MgwHelp32.dll: SymGetLineFromAddrW64()
# 9 0x774B03BB in C:\Windows\SYSTEM32\ntdll.dll: RtlNumberOfSetBitsUlongPtr()

--------------------------------------------------
Стек вызовов TX:

# 0 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

# 1 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\program files\codeblocks\mingw\include\txlib.h (11982):

  11980: $       bool                    inTX   = false;
  11981: 
=>11982:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  11983:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  11984: 

# 2 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11478):

  11476: $       unsigned err = GetLastError();
  11477: 
=>11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
  11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

# 3 in int {anonymous}::TX::txSetLocale(int, const char*, const wchar_t*) at c:\program files\codeblocks\mingw\include\txlib.h (10452):

  10450: $   if (wLocale && !wine)
  10451:         {
=>10452: $       _wsetlocale (LC_ALL,     wLocale);
  10453: $       _wsetlocale (LC_NUMERIC, L"C");           // L"C" (see above)
  10454:         }

# 4 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

# 5 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\program files\codeblocks\mingw\include\txlib.h (11982):

  11980: $       bool                    inTX   = false;
  11981: 
=>11982:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  11983:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  11984: 

# 6 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11478):

  11476: $       unsigned err = GetLastError();
  11477: 
=>11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
  11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

# 7 in int {anonymous}::TX::txSetLocale(int, const char*, const wchar_t*) at c:\program files\codeblocks\mingw\include\txlib.h (10452):

  10450: $   if (wLocale && !wine)
  10451:         {
=>10452: $       _wsetlocale (LC_ALL,     wLocale);
  10453: $       _wsetlocale (LC_NUMERIC, L"C");           // L"C" (see above)
  10454:         }

# 8 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

# 9 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\program files\codeblocks\mingw\include\txlib.h (11982):

  11980: $       bool                    inTX   = false;
  11981: 
=>11982:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  11983:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  11984: 

#10 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11478):

  11476: $       unsigned err = GetLastError();
  11477: 
=>11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
  11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#11 in int {anonymous}::TX::txSetLocale(int, const char*, const wchar_t*) at c:\program files\codeblocks\mingw\include\txlib.h (10452):

  10450: $   if (wLocale && !wine)
  10451:         {
=>10452: $       _wsetlocale (LC_ALL,     wLocale);
  10453: $       _wsetlocale (LC_NUMERIC, L"C");           // L"C" (see above)
  10454:         }

#12 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#13 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\program files\codeblocks\mingw\include\txlib.h (11982):

  11980: $       bool                    inTX   = false;
  11981: 
=>11982:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  11983:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  11984: 

#14 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11478):

  11476: $       unsigned err = GetLastError();
  11477: 
=>11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
  11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#15 in int {anonymous}::TX::txSetLocale(int, const char*, const wchar_t*) at c:\program files\codeblocks\mingw\include\txlib.h (10452):

  10450: $   if (wLocale && !wine)
  10451:         {
=>10452: $       _wsetlocale (LC_ALL,     wLocale);
  10453: $       _wsetlocale (LC_NUMERIC, L"C");           // L"C" (see above)
  10454:         }

#16 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#17 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\program files\codeblocks\mingw\include\txlib.h (11982):

  11980: $       bool                    inTX   = false;
  11981: 
=>11982:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  11983:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  11984: 

#18 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11478):

  11476: $       unsigned err = GetLastError();
  11477: 
=>11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
  11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#19 in int {anonymous}::TX::txSetLocale(int, const char*, const wchar_t*) at c:\program files\codeblocks\mingw\include\txlib.h (10452):

  10450: $   if (wLocale && !wine)
  10451:         {
=>10452: $       _wsetlocale (LC_ALL,     wLocale);
  10453: $       _wsetlocale (LC_NUMERIC, L"C");           // L"C" (see above)
  10454:         }

#20 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#21 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\program files\codeblocks\mingw\include\txlib.h (11982):

  11980: $       bool                    inTX   = false;
  11981: 
=>11982:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  11983:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  11984: 

#22 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11478):

  11476: $       unsigned err = GetLastError();
  11477: 
=>11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
  11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#23 in int {anonymous}::TX::txSetLocale(int, const char*, const wchar_t*) at c:\program files\codeblocks\mingw\include\txlib.h (10452):

  10450: $   if (wLocale && !wine)
  10451:         {
=>10452: $       _wsetlocale (LC_ALL,     wLocale);
  10453: $       _wsetlocale (LC_NUMERIC, L"C");           // L"C" (see above)
  10454:         }

#24 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#25 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\program files\codeblocks\mingw\include\txlib.h (11982):

  11980: $       bool                    inTX   = false;
  11981: 
=>11982:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  11983:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  11984: 

#26 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11478):

  11476: $       unsigned err = GetLastError();
  11477: 
=>11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
  11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#27 in int {anonymous}::TX::txSetLocale(int, const char*, const wchar_t*) at c:\program files\codeblocks\mingw\include\txlib.h (10452):

  10450: $   if (wLocale && !wine)
  10451:         {
=>10452: $       _wsetlocale (LC_ALL,     wLocale);
  10453: $       _wsetlocale (LC_NUMERIC, L"C");           // L"C" (see above)
  10454:         }

#28 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#29 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\program files\codeblocks\mingw\include\txlib.h (11982):

  11980: $       bool                    inTX   = false;
  11981: 
=>11982:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  11983:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  11984: 

#30 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11478):

  11476: $       unsigned err = GetLastError();
  11477: 
=>11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
  11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#31 in int {anonymous}::TX::txSetLocale(int, const char*, const wchar_t*) at c:\program files\codeblocks\mingw\include\txlib.h (10452):

  10450: $   if (wLocale && !wine)
  10451:         {
=>10452: $       _wsetlocale (LC_ALL,     wLocale);
  10453: $       _wsetlocale (LC_NUMERIC, L"C");           // L"C" (see above)
  10454:         }

#32 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#33 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\program files\codeblocks\mingw\include\txlib.h (11982):

  11980: $       bool                    inTX   = false;
  11981: 
=>11982:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  11983:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  11984: 

#34 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11478):

  11476: $       unsigned err = GetLastError();
  11477: 
=>11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
  11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#35 in int {anonymous}::TX::txSetLocale(int, const char*, const wchar_t*) at c:\program files\codeblocks\mingw\include\txlib.h (10452):

  10450: $   if (wLocale && !wine)
  10451:         {
=>10452: $       _wsetlocale (LC_ALL,     wLocale);
  10453: $       _wsetlocale (LC_NUMERIC, L"C");           // L"C" (see above)
  10454:         }

#36 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#37 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\program files\codeblocks\mingw\include\txlib.h (11982):

  11980: $       bool                    inTX   = false;
  11981: 
=>11982:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  11983:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  11984: 

#38 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11478):

  11476: $       unsigned err = GetLastError();
  11477: 
=>11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
  11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#39 in int {anonymous}::TX::txSetLocale(int, const char*, const wchar_t*) at c:\program files\codeblocks\mingw\include\txlib.h (10442):

  10440: $   if (locale)
  10441:         {
=>10442: $       setlocale (LC_ALL,     locale);
  10443: $       setlocale (LC_NUMERIC, "C");              // Return to decimal point (3.14) instead of comma (3,14) in floating numbers
  10444:         }

#40 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#41 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\program files\codeblocks\mingw\include\txlib.h (11982):

  11980: $       bool                    inTX   = false;
  11981: 
=>11982:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  11983:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  11984: 

#42 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11478):

  11476: $       unsigned err = GetLastError();
  11477: 
=>11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
  11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#43 in int {anonymous}::TX::txSetLocale(int, const char*, const wchar_t*) at c:\program files\codeblocks\mingw\include\txlib.h (10442):

  10440: $   if (locale)
  10441:         {
=>10442: $       setlocale (LC_ALL,     locale);
  10443: $       setlocale (LC_NUMERIC, "C");              // Return to decimal point (3.14) instead of comma (3,14) in floating numbers
  10444:         }

#44 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#45 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\program files\codeblocks\mingw\include\txlib.h (11982):

  11980: $       bool                    inTX   = false;
  11981: 
=>11982:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  11983:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  11984: 

#46 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11478):

  11476: $       unsigned err = GetLastError();
  11477: 
=>11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
  11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#47 in int {anonymous}::TX::txSetLocale(int, const char*, const wchar_t*) at c:\program files\codeblocks\mingw\include\txlib.h (10442):

  10440: $   if (locale)
  10441:         {
=>10442: $       setlocale (LC_ALL,     locale);
  10443: $       setlocale (LC_NUMERIC, "C");              // Return to decimal point (3.14) instead of comma (3,14) in floating numbers
  10444:         }

#48 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#49 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\program files\codeblocks\mingw\include\txlib.h (11982):

  11980: $       bool                    inTX   = false;
  11981: 
=>11982:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  11983:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  11984: 

#50 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11478):

  11476: $       unsigned err = GetLastError();
  11477: 
=>11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
  11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#51 in int {anonymous}::TX::txSetLocale(int, const char*, const wchar_t*) at c:\program files\codeblocks\mingw\include\txlib.h (10442):

  10440: $   if (locale)
  10441:         {
=>10442: $       setlocale (LC_ALL,     locale);
  10443: $       setlocale (LC_NUMERIC, "C");              // Return to decimal point (3.14) instead of comma (3,14) in floating numbers
  10444:         }

#52 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#53 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\program files\codeblocks\mingw\include\txlib.h (11982):

  11980: $       bool                    inTX   = false;
  11981: 
=>11982:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  11983:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  11984: 

#54 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11478):

  11476: $       unsigned err = GetLastError();
  11477: 
=>11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
  11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#55 in int {anonymous}::TX::txSetLocale(int, const char*, const wchar_t*) at c:\program files\codeblocks\mingw\include\txlib.h (10442):

  10440: $   if (locale)
  10441:         {
=>10442: $       setlocale (LC_ALL,     locale);
  10443: $       setlocale (LC_NUMERIC, "C");              // Return to decimal point (3.14) instead of comma (3,14) in floating numbers
  10444:         }

#56 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#57 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\program files\codeblocks\mingw\include\txlib.h (11982):

  11980: $       bool                    inTX   = false;
  11981: 
=>11982:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  11983:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  11984: 

#58 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11478):

  11476: $       unsigned err = GetLastError();
  11477: 
=>11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
  11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#59 in int {anonymous}::TX::txSetLocale(int, const char*, const wchar_t*) at c:\program files\codeblocks\mingw\include\txlib.h (10442):

  10440: $   if (locale)
  10441:         {
=>10442: $       setlocale (LC_ALL,     locale);
  10443: $       setlocale (LC_NUMERIC, "C");              // Return to decimal point (3.14) instead of comma (3,14) in floating numbers
  10444:         }

#60 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#61 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\program files\codeblocks\mingw\include\txlib.h (11982):

  11980: $       bool                    inTX   = false;
  11981: 
=>11982:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  11983:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  11984: 

--------------------------------------------------
Developed with:

The Dumb Artist Library (TX Library)
TXLib [Ver: 00173a, Rev: 172, Date: 2023-08-12 11:12:24 +0400]
Copyright (C) Ded (Ilya Dedinsky, http://txlib.ru) <mail@txlib.ru>
See license on: http://txlib.ru

TXLib file:	c:\program files\codeblocks\mingw\include\txlib.h
Compiled:	Sep 23 2023 16:45:15, GNU g++ 4.8.1, std=201103L, MinGW Runtime 3.20, 32-bit, DEBUG
Started:	Sep 23 2023 16:45:18

Run file:	C:\pupach_MFTI\pupach_atom\stack\stack.exe
Directory:	C:\pupach_MFTI\pupach_atom\stack

--------------------------------------------------

--------------------------------------------------
TXLib предупреждает:

Программа: C:\pupach_MFTI\pupach_atom\stack\stack.exe,

ВНЕЗАПНО: Исключение С++, вызванное оператором throw.

#86: Исключение EXCEPTION_CPP_MSC (0xE06D7363) при выполнении кода по адресу 0x75838412 в функции RaiseException() в модуле C:\Windows\System32\KERNELBASE.dll. Дополнительно, превышен лимит исключений _TX_EXCEPTIONS_LIMIT (16). Также превышен лимит фатальных исключений _TX_FATAL_EXCEPTIONS_LIMIT (16). Спасибо _txVectoredExceptionHandler(), что сообщил. Люблю его <3

Ой, всё (EXCEPTION_NONCONTINUABLE).

#28: TXLib [Ver: 00173a, Rev: 172, Date: 2023-08-12 11:12:24 +0400], Instance: 0x005042FC (32-bit), Flags: Cmdre0, Thread: 0x63B8 (Main), GetLastError(): 8 (Not enough memory resources are available to process this command), errno: 12 (Visual C++ CRT: Not enough memory to complete call to strerror.). 

--------------------------------------------------
Стек вызовов:

# 0 0x75838412 in C:\Windows\System32\KERNELBASE.dll: RaiseException()
# 1 0x753FAB98 in C:\Windows\System32\msvcrt.dll: CxxThrowException()
# 6 0x7747E030 in C:\Windows\SYSTEM32\ntdll.dll: RtlUnlockHeap()
# 7 0x770B5E1C in C:\Windows\System32\win32u.dll: NtUserQueryInputContext()

--------------------------------------------------
Стек вызовов TX:

# 0 in int {anonymous}::TX::txMessageBox(const char*, const char*, unsigned int) at c:\program files\codeblocks\mingw\include\txlib.h (12715):

  12713: 
  12714: $   HWND wnd = _txCanvas_Window;
=>12715: $   int  ret = MessageBoxW ((wnd && IsWindowVisible (wnd))? wnd : _TX_CALL (Win32::GetConsoleWindow,()),
  12716:                             textW, headerW, flags | MB_SETFOREGROUND | MB_TOPMOST);
  12717: 

# 1 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

# 2 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\program files\codeblocks\mingw\include\txlib.h (11982):

  11980: $       bool                    inTX   = false;
  11981: 
=>11982:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  11983:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  11984: 

# 3 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11478):

  11476: $       unsigned err = GetLastError();
  11477: 
=>11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
  11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

# 4 in int {anonymous}::TX::txSetLocale(int, const char*, const wchar_t*) at c:\program files\codeblocks\mingw\include\txlib.h (10452):

  10450: $   if (wLocale && !wine)
  10451:         {
=>10452: $       _wsetlocale (LC_ALL,     wLocale);
  10453: $       _wsetlocale (LC_NUMERIC, L"C");           // L"C" (see above)
  10454:         }

# 5 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

# 6 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\program files\codeblocks\mingw\include\txlib.h (11982):

  11980: $       bool                    inTX   = false;
  11981: 
=>11982:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  11983:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  11984: 

# 7 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11478):

  11476: $       unsigned err = GetLastError();
  11477: 
=>11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
  11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

# 8 in int {anonymous}::TX::txSetLocale(int, const char*, const wchar_t*) at c:\program files\codeblocks\mingw\include\txlib.h (10452):

  10450: $   if (wLocale && !wine)
  10451:         {
=>10452: $       _wsetlocale (LC_ALL,     wLocale);
  10453: $       _wsetlocale (LC_NUMERIC, L"C");           // L"C" (see above)
  10454:         }

# 9 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#10 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\program files\codeblocks\mingw\include\txlib.h (11982):

  11980: $       bool                    inTX   = false;
  11981: 
=>11982:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  11983:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  11984: 

#11 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11478):

  11476: $       unsigned err = GetLastError();
  11477: 
=>11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
  11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#12 in int {anonymous}::TX::txSetLocale(int, const char*, const wchar_t*) at c:\program files\codeblocks\mingw\include\txlib.h (10452):

  10450: $   if (wLocale && !wine)
  10451:         {
=>10452: $       _wsetlocale (LC_ALL,     wLocale);
  10453: $       _wsetlocale (LC_NUMERIC, L"C");           // L"C" (see above)
  10454:         }

#13 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#14 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\program files\codeblocks\mingw\include\txlib.h (11982):

  11980: $       bool                    inTX   = false;
  11981: 
=>11982:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  11983:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  11984: 

#15 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11478):

  11476: $       unsigned err = GetLastError();
  11477: 
=>11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
  11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#16 in int {anonymous}::TX::txSetLocale(int, const char*, const wchar_t*) at c:\program files\codeblocks\mingw\include\txlib.h (10452):

  10450: $   if (wLocale && !wine)
  10451:         {
=>10452: $       _wsetlocale (LC_ALL,     wLocale);
  10453: $       _wsetlocale (LC_NUMERIC, L"C");           // L"C" (see above)
  10454:         }

#17 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#18 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\program files\codeblocks\mingw\include\txlib.h (11982):

  11980: $       bool                    inTX   = false;
  11981: 
=>11982:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  11983:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  11984: 

#19 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11478):

  11476: $       unsigned err = GetLastError();
  11477: 
=>11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
  11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#20 in int {anonymous}::TX::txSetLocale(int, const char*, const wchar_t*) at c:\program files\codeblocks\mingw\include\txlib.h (10452):

  10450: $   if (wLocale && !wine)
  10451:         {
=>10452: $       _wsetlocale (LC_ALL,     wLocale);
  10453: $       _wsetlocale (LC_NUMERIC, L"C");           // L"C" (see above)
  10454:         }

#21 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#22 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\program files\codeblocks\mingw\include\txlib.h (11982):

  11980: $       bool                    inTX   = false;
  11981: 
=>11982:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  11983:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  11984: 

#23 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11478):

  11476: $       unsigned err = GetLastError();
  11477: 
=>11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
  11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#24 in int {anonymous}::TX::txSetLocale(int, const char*, const wchar_t*) at c:\program files\codeblocks\mingw\include\txlib.h (10452):

  10450: $   if (wLocale && !wine)
  10451:         {
=>10452: $       _wsetlocale (LC_ALL,     wLocale);
  10453: $       _wsetlocale (LC_NUMERIC, L"C");           // L"C" (see above)
  10454:         }

#25 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#26 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\program files\codeblocks\mingw\include\txlib.h (11982):

  11980: $       bool                    inTX   = false;
  11981: 
=>11982:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  11983:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  11984: 

#27 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11478):

  11476: $       unsigned err = GetLastError();
  11477: 
=>11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
  11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#28 in int {anonymous}::TX::txSetLocale(int, const char*, const wchar_t*) at c:\program files\codeblocks\mingw\include\txlib.h (10452):

  10450: $   if (wLocale && !wine)
  10451:         {
=>10452: $       _wsetlocale (LC_ALL,     wLocale);
  10453: $       _wsetlocale (LC_NUMERIC, L"C");           // L"C" (see above)
  10454:         }

#29 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#30 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\program files\codeblocks\mingw\include\txlib.h (11982):

  11980: $       bool                    inTX   = false;
  11981: 
=>11982:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  11983:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  11984: 

#31 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11478):

  11476: $       unsigned err = GetLastError();
  11477: 
=>11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
  11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#32 in int {anonymous}::TX::txSetLocale(int, const char*, const wchar_t*) at c:\program files\codeblocks\mingw\include\txlib.h (10452):

  10450: $   if (wLocale && !wine)
  10451:         {
=>10452: $       _wsetlocale (LC_ALL,     wLocale);
  10453: $       _wsetlocale (LC_NUMERIC, L"C");           // L"C" (see above)
  10454:         }

#33 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#34 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\program files\codeblocks\mingw\include\txlib.h (11982):

  11980: $       bool                    inTX   = false;
  11981: 
=>11982:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  11983:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  11984: 

#35 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11478):

  11476: $       unsigned err = GetLastError();
  11477: 
=>11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
  11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#36 in int {anonymous}::TX::txSetLocale(int, const char*, const wchar_t*) at c:\program files\codeblocks\mingw\include\txlib.h (10452):

  10450: $   if (wLocale && !wine)
  10451:         {
=>10452: $       _wsetlocale (LC_ALL,     wLocale);
  10453: $       _wsetlocale (LC_NUMERIC, L"C");           // L"C" (see above)
  10454:         }

#37 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#38 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\program files\codeblocks\mingw\include\txlib.h (11982):

  11980: $       bool                    inTX   = false;
  11981: 
=>11982:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  11983:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  11984: 

#39 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11478):

  11476: $       unsigned err = GetLastError();
  11477: 
=>11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
  11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#40 in int {anonymous}::TX::txSetLocale(int, const char*, const wchar_t*) at c:\program files\codeblocks\mingw\include\txlib.h (10442):

  10440: $   if (locale)
  10441:         {
=>10442: $       setlocale (LC_ALL,     locale);
  10443: $       setlocale (LC_NUMERIC, "C");              // Return to decimal point (3.14) instead of comma (3,14) in floating numbers
  10444:         }

#41 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#42 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\program files\codeblocks\mingw\include\txlib.h (11982):

  11980: $       bool                    inTX   = false;
  11981: 
=>11982:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  11983:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  11984: 

#43 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11478):

  11476: $       unsigned err = GetLastError();
  11477: 
=>11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
  11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#44 in int {anonymous}::TX::txSetLocale(int, const char*, const wchar_t*) at c:\program files\codeblocks\mingw\include\txlib.h (10442):

  10440: $   if (locale)
  10441:         {
=>10442: $       setlocale (LC_ALL,     locale);
  10443: $       setlocale (LC_NUMERIC, "C");              // Return to decimal point (3.14) instead of comma (3,14) in floating numbers
  10444:         }

#45 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#46 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\program files\codeblocks\mingw\include\txlib.h (11982):

  11980: $       bool                    inTX   = false;
  11981: 
=>11982:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  11983:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  11984: 

#47 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11478):

  11476: $       unsigned err = GetLastError();
  11477: 
=>11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
  11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#48 in int {anonymous}::TX::txSetLocale(int, const char*, const wchar_t*) at c:\program files\codeblocks\mingw\include\txlib.h (10442):

  10440: $   if (locale)
  10441:         {
=>10442: $       setlocale (LC_ALL,     locale);
  10443: $       setlocale (LC_NUMERIC, "C");              // Return to decimal point (3.14) instead of comma (3,14) in floating numbers
  10444:         }

#49 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#50 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\program files\codeblocks\mingw\include\txlib.h (11982):

  11980: $       bool                    inTX   = false;
  11981: 
=>11982:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  11983:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  11984: 

#51 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11478):

  11476: $       unsigned err = GetLastError();
  11477: 
=>11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
  11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#52 in int {anonymous}::TX::txSetLocale(int, const char*, const wchar_t*) at c:\program files\codeblocks\mingw\include\txlib.h (10442):

  10440: $   if (locale)
  10441:         {
=>10442: $       setlocale (LC_ALL,     locale);
  10443: $       setlocale (LC_NUMERIC, "C");              // Return to decimal point (3.14) instead of comma (3,14) in floating numbers
  10444:         }

#53 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#54 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\program files\codeblocks\mingw\include\txlib.h (11982):

  11980: $       bool                    inTX   = false;
  11981: 
=>11982:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  11983:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  11984: 

#55 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11478):

  11476: $       unsigned err = GetLastError();
  11477: 
=>11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
  11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#56 in int {anonymous}::TX::txSetLocale(int, const char*, const wchar_t*) at c:\program files\codeblocks\mingw\include\txlib.h (10442):

  10440: $   if (locale)
  10441:         {
=>10442: $       setlocale (LC_ALL,     locale);
  10443: $       setlocale (LC_NUMERIC, "C");              // Return to decimal point (3.14) instead of comma (3,14) in floating numbers
  10444:         }

#57 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#58 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\program files\codeblocks\mingw\include\txlib.h (11982):

  11980: $       bool                    inTX   = false;
  11981: 
=>11982:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  11983:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  11984: 

#59 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11478):

  11476: $       unsigned err = GetLastError();
  11477: 
=>11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
  11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#60 in int {anonymous}::TX::txSetLocale(int, const char*, const wchar_t*) at c:\program files\codeblocks\mingw\include\txlib.h (10442):

  10440: $   if (locale)
  10441:         {
=>10442: $       setlocale (LC_ALL,     locale);
  10443: $       setlocale (LC_NUMERIC, "C");              // Return to decimal point (3.14) instead of comma (3,14) in floating numbers
  10444:         }

#61 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

--------------------------------------------------
Developed with:

The Dumb Artist Library (TX Library)
TXLib [Ver: 00173a, Rev: 172, Date: 2023-08-12 11:12:24 +0400]
Copyright (C) Ded (Ilya Dedinsky, http://txlib.ru) <mail@txlib.ru>
See license on: http://txlib.ru

TXLib file:	c:\program files\codeblocks\mingw\include\txlib.h
Compiled:	Sep 23 2023 16:45:15, GNU g++ 4.8.1, std=201103L, MinGW Runtime 3.20, 32-bit, DEBUG
Started:	Sep 23 2023 16:45:17

Run file:	C:\pupach_MFTI\pupach_atom\stack\stack.exe
Directory:	C:\pupach_MFTI\pupach_atom\stack

--------------------------------------------------

--------------------------------------------------
TXLib соболезнует...

Программа: C:\pupach_MFTI\pupach_atom\stack\stack.exe,

ВНЕЗАПНО: Исключение С++, вызванное оператором throw.

#86: Исключение EXCEPTION_CPP_MSC (0xE06D7363) при выполнении кода по адресу 0x75838412 в функции RaiseException() в модуле C:\Windows\System32\KERNELBASE.dll. Дополнительно, превышен лимит исключений _TX_EXCEPTIONS_LIMIT (16). Также превышен лимит фатальных исключений _TX_FATAL_EXCEPTIONS_LIMIT (16). Спасибо _txVectoredExceptionHandler(), что сообщил. Люблю его <3

Ой, всё (EXCEPTION_NONCONTINUABLE).

С помощью функции _set_se_translator() вы можете сами обработать эту ошибку.

#29: TXLib [Ver: 00173a, Rev: 172, Date: 2023-08-12 11:12:24 +0400], Instance: 0x005042FC (32-bit), Flags: Cmdre0, Thread: 0x63B8 (Main), GetLastError(): 8 (Not enough memory resources are available to process this command), errno: 12 (Visual C++ CRT: Not enough memory to complete call to strerror.). 

--------------------------------------------------
Стек вызовов:

# 0 0x75838412 in C:\Windows\System32\KERNELBASE.dll: RaiseException()
# 1 0x753FAB98 in C:\Windows\System32\msvcrt.dll: CxxThrowException()
# 6 0x7747E030 in C:\Windows\SYSTEM32\ntdll.dll: RtlUnlockHeap()
# 7 0x770B5E1C in C:\Windows\System32\win32u.dll: NtUserQueryInputContext()

--------------------------------------------------
Стек вызовов TX:

# 0 in int {anonymous}::TX::txMessageBox(const char*, const char*, unsigned int) at c:\program files\codeblocks\mingw\include\txlib.h (12715):

  12713: 
  12714: $   HWND wnd = _txCanvas_Window;
=>12715: $   int  ret = MessageBoxW ((wnd && IsWindowVisible (wnd))? wnd : _TX_CALL (Win32::GetConsoleWindow,()),
  12716:                             textW, headerW, flags | MB_SETFOREGROUND | MB_TOPMOST);
  12717: 

# 1 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

# 2 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\program files\codeblocks\mingw\include\txlib.h (11982):

  11980: $       bool                    inTX   = false;
  11981: 
=>11982:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  11983:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  11984: 

# 3 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11478):

  11476: $       unsigned err = GetLastError();
  11477: 
=>11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
  11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

# 4 in int {anonymous}::TX::txSetLocale(int, const char*, const wchar_t*) at c:\program files\codeblocks\mingw\include\txlib.h (10452):

  10450: $   if (wLocale && !wine)
  10451:         {
=>10452: $       _wsetlocale (LC_ALL,     wLocale);
  10453: $       _wsetlocale (LC_NUMERIC, L"C");           // L"C" (see above)
  10454:         }

# 5 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

# 6 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\program files\codeblocks\mingw\include\txlib.h (11982):

  11980: $       bool                    inTX   = false;
  11981: 
=>11982:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  11983:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  11984: 

# 7 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11478):

  11476: $       unsigned err = GetLastError();
  11477: 
=>11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
  11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

# 8 in int {anonymous}::TX::txSetLocale(int, const char*, const wchar_t*) at c:\program files\codeblocks\mingw\include\txlib.h (10452):

  10450: $   if (wLocale && !wine)
  10451:         {
=>10452: $       _wsetlocale (LC_ALL,     wLocale);
  10453: $       _wsetlocale (LC_NUMERIC, L"C");           // L"C" (see above)
  10454:         }

# 9 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#10 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\program files\codeblocks\mingw\include\txlib.h (11982):

  11980: $       bool                    inTX   = false;
  11981: 
=>11982:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  11983:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  11984: 

#11 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11478):

  11476: $       unsigned err = GetLastError();
  11477: 
=>11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
  11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#12 in int {anonymous}::TX::txSetLocale(int, const char*, const wchar_t*) at c:\program files\codeblocks\mingw\include\txlib.h (10452):

  10450: $   if (wLocale && !wine)
  10451:         {
=>10452: $       _wsetlocale (LC_ALL,     wLocale);
  10453: $       _wsetlocale (LC_NUMERIC, L"C");           // L"C" (see above)
  10454:         }

#13 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#14 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\program files\codeblocks\mingw\include\txlib.h (11982):

  11980: $       bool                    inTX   = false;
  11981: 
=>11982:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  11983:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  11984: 

#15 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11478):

  11476: $       unsigned err = GetLastError();
  11477: 
=>11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
  11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#16 in int {anonymous}::TX::txSetLocale(int, const char*, const wchar_t*) at c:\program files\codeblocks\mingw\include\txlib.h (10452):

  10450: $   if (wLocale && !wine)
  10451:         {
=>10452: $       _wsetlocale (LC_ALL,     wLocale);
  10453: $       _wsetlocale (LC_NUMERIC, L"C");           // L"C" (see above)
  10454:         }

#17 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#18 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\program files\codeblocks\mingw\include\txlib.h (11982):

  11980: $       bool                    inTX   = false;
  11981: 
=>11982:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  11983:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  11984: 

#19 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11478):

  11476: $       unsigned err = GetLastError();
  11477: 
=>11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
  11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#20 in int {anonymous}::TX::txSetLocale(int, const char*, const wchar_t*) at c:\program files\codeblocks\mingw\include\txlib.h (10452):

  10450: $   if (wLocale && !wine)
  10451:         {
=>10452: $       _wsetlocale (LC_ALL,     wLocale);
  10453: $       _wsetlocale (LC_NUMERIC, L"C");           // L"C" (see above)
  10454:         }

#21 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#22 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\program files\codeblocks\mingw\include\txlib.h (11982):

  11980: $       bool                    inTX   = false;
  11981: 
=>11982:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  11983:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  11984: 

#23 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11478):

  11476: $       unsigned err = GetLastError();
  11477: 
=>11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
  11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#24 in int {anonymous}::TX::txSetLocale(int, const char*, const wchar_t*) at c:\program files\codeblocks\mingw\include\txlib.h (10452):

  10450: $   if (wLocale && !wine)
  10451:         {
=>10452: $       _wsetlocale (LC_ALL,     wLocale);
  10453: $       _wsetlocale (LC_NUMERIC, L"C");           // L"C" (see above)
  10454:         }

#25 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#26 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\program files\codeblocks\mingw\include\txlib.h (11982):

  11980: $       bool                    inTX   = false;
  11981: 
=>11982:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  11983:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  11984: 

#27 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11478):

  11476: $       unsigned err = GetLastError();
  11477: 
=>11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
  11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#28 in int {anonymous}::TX::txSetLocale(int, const char*, const wchar_t*) at c:\program files\codeblocks\mingw\include\txlib.h (10452):

  10450: $   if (wLocale && !wine)
  10451:         {
=>10452: $       _wsetlocale (LC_ALL,     wLocale);
  10453: $       _wsetlocale (LC_NUMERIC, L"C");           // L"C" (see above)
  10454:         }

#29 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#30 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\program files\codeblocks\mingw\include\txlib.h (11982):

  11980: $       bool                    inTX   = false;
  11981: 
=>11982:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  11983:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  11984: 

#31 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11478):

  11476: $       unsigned err = GetLastError();
  11477: 
=>11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
  11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#32 in int {anonymous}::TX::txSetLocale(int, const char*, const wchar_t*) at c:\program files\codeblocks\mingw\include\txlib.h (10452):

  10450: $   if (wLocale && !wine)
  10451:         {
=>10452: $       _wsetlocale (LC_ALL,     wLocale);
  10453: $       _wsetlocale (LC_NUMERIC, L"C");           // L"C" (see above)
  10454:         }

#33 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#34 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\program files\codeblocks\mingw\include\txlib.h (11982):

  11980: $       bool                    inTX   = false;
  11981: 
=>11982:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  11983:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  11984: 

#35 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11478):

  11476: $       unsigned err = GetLastError();
  11477: 
=>11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
  11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#36 in int {anonymous}::TX::txSetLocale(int, const char*, const wchar_t*) at c:\program files\codeblocks\mingw\include\txlib.h (10452):

  10450: $   if (wLocale && !wine)
  10451:         {
=>10452: $       _wsetlocale (LC_ALL,     wLocale);
  10453: $       _wsetlocale (LC_NUMERIC, L"C");           // L"C" (see above)
  10454:         }

#37 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#38 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\program files\codeblocks\mingw\include\txlib.h (11982):

  11980: $       bool                    inTX   = false;
  11981: 
=>11982:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  11983:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  11984: 

#39 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11478):

  11476: $       unsigned err = GetLastError();
  11477: 
=>11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
  11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#40 in int {anonymous}::TX::txSetLocale(int, const char*, const wchar_t*) at c:\program files\codeblocks\mingw\include\txlib.h (10442):

  10440: $   if (locale)
  10441:         {
=>10442: $       setlocale (LC_ALL,     locale);
  10443: $       setlocale (LC_NUMERIC, "C");              // Return to decimal point (3.14) instead of comma (3,14) in floating numbers
  10444:         }

#41 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#42 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\program files\codeblocks\mingw\include\txlib.h (11982):

  11980: $       bool                    inTX   = false;
  11981: 
=>11982:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  11983:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  11984: 

#43 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11478):

  11476: $       unsigned err = GetLastError();
  11477: 
=>11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
  11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#44 in int {anonymous}::TX::txSetLocale(int, const char*, const wchar_t*) at c:\program files\codeblocks\mingw\include\txlib.h (10442):

  10440: $   if (locale)
  10441:         {
=>10442: $       setlocale (LC_ALL,     locale);
  10443: $       setlocale (LC_NUMERIC, "C");              // Return to decimal point (3.14) instead of comma (3,14) in floating numbers
  10444:         }

#45 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#46 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\program files\codeblocks\mingw\include\txlib.h (11982):

  11980: $       bool                    inTX   = false;
  11981: 
=>11982:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  11983:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  11984: 

#47 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11478):

  11476: $       unsigned err = GetLastError();
  11477: 
=>11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
  11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#48 in int {anonymous}::TX::txSetLocale(int, const char*, const wchar_t*) at c:\program files\codeblocks\mingw\include\txlib.h (10442):

  10440: $   if (locale)
  10441:         {
=>10442: $       setlocale (LC_ALL,     locale);
  10443: $       setlocale (LC_NUMERIC, "C");              // Return to decimal point (3.14) instead of comma (3,14) in floating numbers
  10444:         }

#49 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#50 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\program files\codeblocks\mingw\include\txlib.h (11982):

  11980: $       bool                    inTX   = false;
  11981: 
=>11982:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  11983:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  11984: 

#51 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11478):

  11476: $       unsigned err = GetLastError();
  11477: 
=>11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
  11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#52 in int {anonymous}::TX::txSetLocale(int, const char*, const wchar_t*) at c:\program files\codeblocks\mingw\include\txlib.h (10442):

  10440: $   if (locale)
  10441:         {
=>10442: $       setlocale (LC_ALL,     locale);
  10443: $       setlocale (LC_NUMERIC, "C");              // Return to decimal point (3.14) instead of comma (3,14) in floating numbers
  10444:         }

#53 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#54 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\program files\codeblocks\mingw\include\txlib.h (11982):

  11980: $       bool                    inTX   = false;
  11981: 
=>11982:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  11983:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  11984: 

#55 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11478):

  11476: $       unsigned err = GetLastError();
  11477: 
=>11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
  11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#56 in int {anonymous}::TX::txSetLocale(int, const char*, const wchar_t*) at c:\program files\codeblocks\mingw\include\txlib.h (10442):

  10440: $   if (locale)
  10441:         {
=>10442: $       setlocale (LC_ALL,     locale);
  10443: $       setlocale (LC_NUMERIC, "C");              // Return to decimal point (3.14) instead of comma (3,14) in floating numbers
  10444:         }

#57 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#58 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\program files\codeblocks\mingw\include\txlib.h (11982):

  11980: $       bool                    inTX   = false;
  11981: 
=>11982:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  11983:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  11984: 

#59 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11478):

  11476: $       unsigned err = GetLastError();
  11477: 
=>11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
  11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#60 in int {anonymous}::TX::txSetLocale(int, const char*, const wchar_t*) at c:\program files\codeblocks\mingw\include\txlib.h (10442):

  10440: $   if (locale)
  10441:         {
=>10442: $       setlocale (LC_ALL,     locale);
  10443: $       setlocale (LC_NUMERIC, "C");              // Return to decimal point (3.14) instead of comma (3,14) in floating numbers
  10444:         }

#61 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

--------------------------------------------------
Developed with:

The Dumb Artist Library (TX Library)
TXLib [Ver: 00173a, Rev: 172, Date: 2023-08-12 11:12:24 +0400]
Copyright (C) Ded (Ilya Dedinsky, http://txlib.ru) <mail@txlib.ru>
See license on: http://txlib.ru

TXLib file:	c:\program files\codeblocks\mingw\include\txlib.h
Compiled:	Sep 23 2023 16:45:15, GNU g++ 4.8.1, std=201103L, MinGW Runtime 3.20, 32-bit, DEBUG
Started:	Sep 23 2023 16:45:17

Run file:	C:\pupach_MFTI\pupach_atom\stack\stack.exe
Directory:	C:\pupach_MFTI\pupach_atom\stack

--------------------------------------------------

--------------------------------------------------
TXLib предупреждает:

Программа: C:\pupach_MFTI\pupach_atom\stack\stack.exe,

ВНЕЗАПНО: Нарушение доступа к памяти.

#16: Исключение EXCEPTION_ACCESS_VIOLATION (0xC0000005) при выполнении кода по адресу 0x7746F025 в функции RtlGetCurrentServiceSessionId(). Попытка прочесть данные по адресу 0xFFFFFFFF в модуле C:\Windows\SYSTEM32\ntdll.dll. Дополнительно, превышен лимит исключений _TX_EXCEPTIONS_LIMIT (16). Спасибо _txVectoredExceptionHandler(), что сообщил. Люблю его <3

#2: TXLib [Ver: 00173a, Rev: 172, Date: 2023-08-12 11:12:24 +0400], Instance: 0x005042FC (32-bit), Flags: Cmdre0, Thread: 0x28F4 (Main), GetLastError(): 8 (Not enough memory resources are available to process this command), errno: 12 (Visual C++ CRT: Not enough memory to complete call to strerror.). 

--------------------------------------------------
Стек вызовов:

# 0 0x7746F025 in C:\Windows\SYSTEM32\ntdll.dll: RtlGetCurrentServiceSessionId()
# 1 0x774AFC6D in C:\Windows\SYSTEM32\ntdll.dll: RtlRemovePropertyStore()
# 2 0x7746EBA6 in C:\Windows\SYSTEM32\ntdll.dll: RtlFreeHeap()
# 3 0x75408109 in C:\Windows\System32\msvcrt.dll: free()
# 4 0x75416608 in C:\Windows\System32\msvcrt.dll: __unguarded_readlc_active_add_func()
# 5 0x7541762D in C:\Windows\System32\msvcrt.dll: get_current_locale()
# 6 0x75417777 in C:\Windows\System32\msvcrt.dll: setlocale()
# 7 0x0040E220 in C:\pupach_MFTI\pupach_atom\stack\stack.exe: _ZN12_GLOBAL__N_12TX11txSetLocaleEiPKcPKw()
# 8 0x0041AA67 in C:\pupach_MFTI\pupach_atom\stack\stack.exe: _ZN12_GLOBAL__N_12TX15_txProcessErrorEPKciS2_jS2_Pc()
# 9 0x00410DDE in C:\pupach_MFTI\pupach_atom\stack\stack.exe: _ZN12_GLOBAL__N_12TX8_txErrorEPKciS2_jS2_z()
#10 0x0041252B in C:\pupach_MFTI\pupach_atom\stack\stack.exe: _ZN12_GLOBAL__N_12TX17_txOnExceptionSEHEP19_EXCEPTION_POINTERSPKc()
#11 0x00411C44 in C:\pupach_MFTI\pupach_atom\stack\stack.exe: _ZN12_GLOBAL__N_12TX27_txVectoredExceptionHandlerEP19_EXCEPTION_POINTERS@4()
#12 0x7748FFFF in C:\Windows\SYSTEM32\ntdll.dll: LdrSetDllManifestProber()
#13 0x7748C727 in C:\Windows\SYSTEM32\ntdll.dll: RtlUnwind()
#14 0x77498756 in C:\Windows\SYSTEM32\ntdll.dll: KiUserExceptionDispatcher()
#15 0x753FAB98 in C:\Windows\System32\msvcrt.dll: CxxThrowException()
#16 0x7778611A in C:\Windows\DbgHelp32.dll: MiniDumpReadDumpStream()
#17 0x7772DD3F in C:\Windows\DbgHelp32.dll: RemoveInvalidModuleList()
#18 0x7774C070 in C:\Windows\DbgHelp32.dll: ImagehlpApiVersionEx()
#19 0x7774ACDE in C:\Windows\DbgHelp32.dll: ImagehlpApiVersionEx()
#20 0x7774A985 in C:\Windows\DbgHelp32.dll: ImagehlpApiVersionEx()
#21 0x7774224A in C:\Windows\DbgHelp32.dll: SymEnumerateSymbolsW64()
#22 0x777458BA in C:\Windows\DbgHelp32.dll: SymFromInlineContext()
#23 0x7774590E in C:\Windows\DbgHelp32.dll: SymFromAddr()

--------------------------------------------------
Стек вызовов TX:

# 0 in int {anonymous}::TX::txSetLocale(int, const char*, const wchar_t*) at c:\program files\codeblocks\mingw\include\txlib.h (10442):

  10440: $   if (locale)
  10441:         {
=>10442: $       setlocale (LC_ALL,     locale);
  10443: $       setlocale (LC_NUMERIC, "C");              // Return to decimal point (3.14) instead of comma (3,14) in floating numbers
  10444:         }

# 1 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

# 2 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

# 3 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

# 4 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

# 5 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

# 6 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

# 7 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

# 8 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

# 9 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#10 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#11 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#12 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#13 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#14 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#15 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#16 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#17 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#18 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#19 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#20 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#21 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

--------------------------------------------------
Developed with:

The Dumb Artist Library (TX Library)
TXLib [Ver: 00173a, Rev: 172, Date: 2023-08-12 11:12:24 +0400]
Copyright (C) Ded (Ilya Dedinsky, http://txlib.ru) <mail@txlib.ru>
See license on: http://txlib.ru

TXLib file:	c:\program files\codeblocks\mingw\include\txlib.h
Compiled:	Sep 23 2023 16:47:32, GNU g++ 4.8.1, std=201103L, MinGW Runtime 3.20, 32-bit, DEBUG
Started:	Sep 23 2023 16:47:35

Run file:	C:\pupach_MFTI\pupach_atom\stack\stack.exe
Directory:	C:\pupach_MFTI\pupach_atom\stack

--------------------------------------------------

--------------------------------------------------
TXLib соболезнует...

Программа: C:\pupach_MFTI\pupach_atom\stack\stack.exe,

ВНЕЗАПНО: Нарушение доступа к памяти.

#16: Исключение EXCEPTION_ACCESS_VIOLATION (0xC0000005) при выполнении кода по адресу 0x7746F025 в функции RtlGetCurrentServiceSessionId(). Попытка прочесть данные по адресу 0xFFFFFFFF в модуле C:\Windows\SYSTEM32\ntdll.dll. Дополнительно, превышен лимит исключений _TX_EXCEPTIONS_LIMIT (16). Спасибо _txVectoredExceptionHandler(), что сообщил. Люблю его <3

С помощью функции _set_se_translator() вы можете сами обработать эту ошибку.

#3: TXLib [Ver: 00173a, Rev: 172, Date: 2023-08-12 11:12:24 +0400], Instance: 0x005042FC (32-bit), Flags: Cmdre0, Thread: 0x28F4 (Main), GetLastError(): 8 (Not enough memory resources are available to process this command), errno: 12 (Visual C++ CRT: Not enough memory to complete call to strerror.). 

--------------------------------------------------
Стек вызовов:

# 0 0x7746F025 in C:\Windows\SYSTEM32\ntdll.dll: RtlGetCurrentServiceSessionId()
# 1 0x774AFC6D in C:\Windows\SYSTEM32\ntdll.dll: RtlRemovePropertyStore()
# 2 0x7746EBA6 in C:\Windows\SYSTEM32\ntdll.dll: RtlFreeHeap()
# 3 0x75408109 in C:\Windows\System32\msvcrt.dll: free()
# 4 0x75416608 in C:\Windows\System32\msvcrt.dll: __unguarded_readlc_active_add_func()
# 5 0x7541762D in C:\Windows\System32\msvcrt.dll: get_current_locale()
# 6 0x75417777 in C:\Windows\System32\msvcrt.dll: setlocale()
# 7 0x0040E220 in C:\pupach_MFTI\pupach_atom\stack\stack.exe: _ZN12_GLOBAL__N_12TX11txSetLocaleEiPKcPKw()
# 8 0x0041AA67 in C:\pupach_MFTI\pupach_atom\stack\stack.exe: _ZN12_GLOBAL__N_12TX15_txProcessErrorEPKciS2_jS2_Pc()
# 9 0x00410DDE in C:\pupach_MFTI\pupach_atom\stack\stack.exe: _ZN12_GLOBAL__N_12TX8_txErrorEPKciS2_jS2_z()
#10 0x0041252B in C:\pupach_MFTI\pupach_atom\stack\stack.exe: _ZN12_GLOBAL__N_12TX17_txOnExceptionSEHEP19_EXCEPTION_POINTERSPKc()
#11 0x00411C44 in C:\pupach_MFTI\pupach_atom\stack\stack.exe: _ZN12_GLOBAL__N_12TX27_txVectoredExceptionHandlerEP19_EXCEPTION_POINTERS@4()
#12 0x7748FFFF in C:\Windows\SYSTEM32\ntdll.dll: LdrSetDllManifestProber()
#13 0x7748C727 in C:\Windows\SYSTEM32\ntdll.dll: RtlUnwind()
#14 0x77498756 in C:\Windows\SYSTEM32\ntdll.dll: KiUserExceptionDispatcher()
#15 0x753FAB98 in C:\Windows\System32\msvcrt.dll: CxxThrowException()
#16 0x7778611A in C:\Windows\DbgHelp32.dll: MiniDumpReadDumpStream()
#17 0x7772DD3F in C:\Windows\DbgHelp32.dll: RemoveInvalidModuleList()
#18 0x7774C070 in C:\Windows\DbgHelp32.dll: ImagehlpApiVersionEx()
#19 0x7774ACDE in C:\Windows\DbgHelp32.dll: ImagehlpApiVersionEx()
#20 0x7774A985 in C:\Windows\DbgHelp32.dll: ImagehlpApiVersionEx()
#21 0x7774224A in C:\Windows\DbgHelp32.dll: SymEnumerateSymbolsW64()
#22 0x777458BA in C:\Windows\DbgHelp32.dll: SymFromInlineContext()
#23 0x7774590E in C:\Windows\DbgHelp32.dll: SymFromAddr()

--------------------------------------------------
Стек вызовов TX:

# 0 in int {anonymous}::TX::txSetLocale(int, const char*, const wchar_t*) at c:\program files\codeblocks\mingw\include\txlib.h (10442):

  10440: $   if (locale)
  10441:         {
=>10442: $       setlocale (LC_ALL,     locale);
  10443: $       setlocale (LC_NUMERIC, "C");              // Return to decimal point (3.14) instead of comma (3,14) in floating numbers
  10444:         }

# 1 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

# 2 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

# 3 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

# 4 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

# 5 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

# 6 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

# 7 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

# 8 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

# 9 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#10 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#11 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#12 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#13 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#14 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#15 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#16 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#17 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#18 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#19 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#20 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#21 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

--------------------------------------------------
Developed with:

The Dumb Artist Library (TX Library)
TXLib [Ver: 00173a, Rev: 172, Date: 2023-08-12 11:12:24 +0400]
Copyright (C) Ded (Ilya Dedinsky, http://txlib.ru) <mail@txlib.ru>
See license on: http://txlib.ru

TXLib file:	c:\program files\codeblocks\mingw\include\txlib.h
Compiled:	Sep 23 2023 16:47:32, GNU g++ 4.8.1, std=201103L, MinGW Runtime 3.20, 32-bit, DEBUG
Started:	Sep 23 2023 16:47:35

Run file:	C:\pupach_MFTI\pupach_atom\stack\stack.exe
Directory:	C:\pupach_MFTI\pupach_atom\stack

--------------------------------------------------

--------------------------------------------------
TXLib предупреждает:

Программа: C:\pupach_MFTI\pupach_atom\stack\stack.exe,

ВНЕЗАПНО: Исключение С++, вызванное оператором throw.

#17: Исключение EXCEPTION_CPP_MSC (0xE06D7363) при выполнении кода по адресу 0x75838412 в функции RaiseException() в модуле C:\Windows\System32\KERNELBASE.dll. Дополнительно, превышен лимит исключений _TX_EXCEPTIONS_LIMIT (16). Спасибо _txVectoredExceptionHandler(), что сообщил. Люблю его <3

Ой, всё (EXCEPTION_NONCONTINUABLE).

#4: TXLib [Ver: 00173a, Rev: 172, Date: 2023-08-12 11:12:24 +0400], Instance: 0x005042FC (32-bit), Flags: Cmdre0, Thread: 0x28F4 (Main), GetLastError(): 8 (Not enough memory resources are available to process this command), errno: 12 (Visual C++ CRT: Not enough memory to complete call to strerror.). 

--------------------------------------------------
Стек вызовов:

# 0 0x75838412 in C:\Windows\System32\KERNELBASE.dll: RaiseException()
# 1 0x753FAB98 in C:\Windows\System32\msvcrt.dll: CxxThrowException()
# 6 0x7747E030 in C:\Windows\SYSTEM32\ntdll.dll: RtlUnlockHeap()
# 7 0x770B5E1C in C:\Windows\System32\win32u.dll: NtUserQueryInputContext()

--------------------------------------------------
Стек вызовов TX:

# 0 in int {anonymous}::TX::txMessageBox(const char*, const char*, unsigned int) at c:\program files\codeblocks\mingw\include\txlib.h (12715):

  12713: 
  12714: $   HWND wnd = _txCanvas_Window;
=>12715: $   int  ret = MessageBoxW ((wnd && IsWindowVisible (wnd))? wnd : _TX_CALL (Win32::GetConsoleWindow,()),
  12716:                             textW, headerW, flags | MB_SETFOREGROUND | MB_TOPMOST);
  12717: 

# 1 in const char* {anonymous}::TX::_txProcessError(const char*, int, const char*, unsigned int, const char*, va_list) at c:\program files\codeblocks\mingw\include\txlib.h (12562):

  12560: 
  12561:     if (stkTrace && strstr (stkTrace, ".exe: "))
=>12562:         {$ fprintf (stderr,    "Стек вызовов:\n\n"
  12563:                                "%s\n\n"
  12564:                                "--------------------------------------------------\n",

# 2 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

# 3 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

# 4 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

# 5 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

# 6 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

# 7 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

# 8 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

# 9 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#10 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#11 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#12 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#13 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#14 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#15 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#16 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#17 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#18 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#19 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#20 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#21 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#22 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

--------------------------------------------------
Developed with:

The Dumb Artist Library (TX Library)
TXLib [Ver: 00173a, Rev: 172, Date: 2023-08-12 11:12:24 +0400]
Copyright (C) Ded (Ilya Dedinsky, http://txlib.ru) <mail@txlib.ru>
See license on: http://txlib.ru

TXLib file:	c:\program files\codeblocks\mingw\include\txlib.h
Compiled:	Sep 23 2023 16:47:32, GNU g++ 4.8.1, std=201103L, MinGW Runtime 3.20, 32-bit, DEBUG
Started:	Sep 23 2023 16:47:35

Run file:	C:\pupach_MFTI\pupach_atom\stack\stack.exe
Directory:	C:\pupach_MFTI\pupach_atom\stack

--------------------------------------------------

--------------------------------------------------
TXLib соболезнует...

Программа: C:\pupach_MFTI\pupach_atom\stack\stack.exe,

ВНЕЗАПНО: Исключение С++, вызванное оператором throw.

#17: Исключение EXCEPTION_CPP_MSC (0xE06D7363) при выполнении кода по адресу 0x75838412 в функции RaiseException() в модуле C:\Windows\System32\KERNELBASE.dll. Дополнительно, превышен лимит исключений _TX_EXCEPTIONS_LIMIT (16). Спасибо _txVectoredExceptionHandler(), что сообщил. Люблю его <3

Ой, всё (EXCEPTION_NONCONTINUABLE).

С помощью функции _set_se_translator() вы можете сами обработать эту ошибку.

#5: TXLib [Ver: 00173a, Rev: 172, Date: 2023-08-12 11:12:24 +0400], Instance: 0x005042FC (32-bit), Flags: Cmdre0, Thread: 0x28F4 (Main), GetLastError(): 8 (Not enough memory resources are available to process this command), errno: 12 (Visual C++ CRT: Not enough memory to complete call to strerror.). 

--------------------------------------------------
Стек вызовов:

# 0 0x75838412 in C:\Windows\System32\KERNELBASE.dll: RaiseException()
# 1 0x753FAB98 in C:\Windows\System32\msvcrt.dll: CxxThrowException()
# 6 0x7747E030 in C:\Windows\SYSTEM32\ntdll.dll: RtlUnlockHeap()
# 7 0x770B5E1C in C:\Windows\System32\win32u.dll: NtUserQueryInputContext()

--------------------------------------------------
Стек вызовов TX:

# 0 in int {anonymous}::TX::txMessageBox(const char*, const char*, unsigned int) at c:\program files\codeblocks\mingw\include\txlib.h (12715):

  12713: 
  12714: $   HWND wnd = _txCanvas_Window;
=>12715: $   int  ret = MessageBoxW ((wnd && IsWindowVisible (wnd))? wnd : _TX_CALL (Win32::GetConsoleWindow,()),
  12716:                             textW, headerW, flags | MB_SETFOREGROUND | MB_TOPMOST);
  12717: 

# 1 in const char* {anonymous}::TX::_txProcessError(const char*, int, const char*, unsigned int, const char*, va_list) at c:\program files\codeblocks\mingw\include\txlib.h (12562):

  12560: 
  12561:     if (stkTrace && strstr (stkTrace, ".exe: "))
=>12562:         {$ fprintf (stderr,    "Стек вызовов:\n\n"
  12563:                                "%s\n\n"
  12564:                                "--------------------------------------------------\n",

# 2 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

# 3 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

# 4 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

# 5 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

# 6 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

# 7 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

# 8 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

# 9 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#10 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#11 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#12 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#13 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#14 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#15 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#16 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#17 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#18 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#19 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#20 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#21 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#22 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

--------------------------------------------------
Developed with:

The Dumb Artist Library (TX Library)
TXLib [Ver: 00173a, Rev: 172, Date: 2023-08-12 11:12:24 +0400]
Copyright (C) Ded (Ilya Dedinsky, http://txlib.ru) <mail@txlib.ru>
See license on: http://txlib.ru

TXLib file:	c:\program files\codeblocks\mingw\include\txlib.h
Compiled:	Sep 23 2023 16:47:32, GNU g++ 4.8.1, std=201103L, MinGW Runtime 3.20, 32-bit, DEBUG
Started:	Sep 23 2023 16:47:35

Run file:	C:\pupach_MFTI\pupach_atom\stack\stack.exe
Directory:	C:\pupach_MFTI\pupach_atom\stack

--------------------------------------------------

--------------------------------------------------
TXLib предупреждает:

Программа: C:\pupach_MFTI\pupach_atom\stack\stack.exe,

ВНЕЗАПНО: Нарушение доступа к памяти.

#16: Исключение EXCEPTION_ACCESS_VIOLATION (0xC0000005) при выполнении кода по адресу 0x7746F025 в функции RtlGetCurrentServiceSessionId(). Попытка прочесть данные по адресу 0xFFFFFFFF в модуле C:\Windows\SYSTEM32\ntdll.dll. Дополнительно, превышен лимит исключений _TX_EXCEPTIONS_LIMIT (16). Спасибо _txVectoredExceptionHandler(), что сообщил. Люблю его <3

#2: TXLib [Ver: 00173a, Rev: 172, Date: 2023-08-12 11:12:24 +0400], Instance: 0x005042FC (32-bit), Flags: Cmdre0, Thread: 0x3450 (Main), GetLastError(): 8 (Not enough memory resources are available to process this command), errno: 12 (Visual C++ CRT: Not enough memory to complete call to strerror.). 

--------------------------------------------------
Стек вызовов:

# 0 0x7746F025 in C:\Windows\SYSTEM32\ntdll.dll: RtlGetCurrentServiceSessionId()
# 1 0x774AFC6D in C:\Windows\SYSTEM32\ntdll.dll: RtlRemovePropertyStore()
# 2 0x7746EBA6 in C:\Windows\SYSTEM32\ntdll.dll: RtlFreeHeap()
# 3 0x75408109 in C:\Windows\System32\msvcrt.dll: free()
# 4 0x75416608 in C:\Windows\System32\msvcrt.dll: __unguarded_readlc_active_add_func()
# 5 0x7541762D in C:\Windows\System32\msvcrt.dll: get_current_locale()
# 6 0x75417777 in C:\Windows\System32\msvcrt.dll: setlocale()
# 7 0x0040E220 in C:\pupach_MFTI\pupach_atom\stack\stack.exe: _ZN12_GLOBAL__N_12TX11txSetLocaleEiPKcPKw()
# 8 0x0041AA67 in C:\pupach_MFTI\pupach_atom\stack\stack.exe: _ZN12_GLOBAL__N_12TX15_txProcessErrorEPKciS2_jS2_Pc()
# 9 0x00410DDE in C:\pupach_MFTI\pupach_atom\stack\stack.exe: _ZN12_GLOBAL__N_12TX8_txErrorEPKciS2_jS2_z()
#10 0x0041252B in C:\pupach_MFTI\pupach_atom\stack\stack.exe: _ZN12_GLOBAL__N_12TX17_txOnExceptionSEHEP19_EXCEPTION_POINTERSPKc()
#11 0x00411C44 in C:\pupach_MFTI\pupach_atom\stack\stack.exe: _ZN12_GLOBAL__N_12TX27_txVectoredExceptionHandlerEP19_EXCEPTION_POINTERS@4()
#12 0x7748FFFF in C:\Windows\SYSTEM32\ntdll.dll: LdrSetDllManifestProber()
#13 0x7748C727 in C:\Windows\SYSTEM32\ntdll.dll: RtlUnwind()
#14 0x77498756 in C:\Windows\SYSTEM32\ntdll.dll: KiUserExceptionDispatcher()
#15 0x753FAB98 in C:\Windows\System32\msvcrt.dll: CxxThrowException()
#16 0x7778611A in C:\Windows\DbgHelp32.dll: MiniDumpReadDumpStream()
#17 0x7772DD3F in C:\Windows\DbgHelp32.dll: RemoveInvalidModuleList()
#18 0x7774C070 in C:\Windows\DbgHelp32.dll: ImagehlpApiVersionEx()
#19 0x7774ACDE in C:\Windows\DbgHelp32.dll: ImagehlpApiVersionEx()
#20 0x7774A985 in C:\Windows\DbgHelp32.dll: ImagehlpApiVersionEx()
#21 0x7774224A in C:\Windows\DbgHelp32.dll: SymEnumerateSymbolsW64()
#22 0x777458BA in C:\Windows\DbgHelp32.dll: SymFromInlineContext()
#23 0x7774590E in C:\Windows\DbgHelp32.dll: SymFromAddr()

--------------------------------------------------
Стек вызовов TX:

# 0 in int {anonymous}::TX::txSetLocale(int, const char*, const wchar_t*) at c:\program files\codeblocks\mingw\include\txlib.h (10442):

  10440: $   if (locale)
  10441:         {
=>10442: $       setlocale (LC_ALL,     locale);
  10443: $       setlocale (LC_NUMERIC, "C");              // Return to decimal point (3.14) instead of comma (3,14) in floating numbers
  10444:         }

# 1 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

# 2 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

# 3 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

# 4 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

# 5 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

# 6 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

# 7 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

# 8 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

# 9 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#10 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#11 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#12 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#13 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#14 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#15 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#16 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#17 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#18 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#19 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#20 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#21 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

--------------------------------------------------
Developed with:

The Dumb Artist Library (TX Library)
TXLib [Ver: 00173a, Rev: 172, Date: 2023-08-12 11:12:24 +0400]
Copyright (C) Ded (Ilya Dedinsky, http://txlib.ru) <mail@txlib.ru>
See license on: http://txlib.ru

TXLib file:	c:\program files\codeblocks\mingw\include\txlib.h
Compiled:	Sep 23 2023 16:47:32, GNU g++ 4.8.1, std=201103L, MinGW Runtime 3.20, 32-bit, DEBUG
Started:	Sep 23 2023 16:47:51

Run file:	C:\pupach_MFTI\pupach_atom\stack\stack.exe
Directory:	C:\pupach_MFTI\pupach_atom\stack

--------------------------------------------------

--------------------------------------------------
TXLib соболезнует...

Программа: C:\pupach_MFTI\pupach_atom\stack\stack.exe,

ВНЕЗАПНО: Нарушение доступа к памяти.

#16: Исключение EXCEPTION_ACCESS_VIOLATION (0xC0000005) при выполнении кода по адресу 0x7746F025 в функции RtlGetCurrentServiceSessionId(). Попытка прочесть данные по адресу 0xFFFFFFFF в модуле C:\Windows\SYSTEM32\ntdll.dll. Дополнительно, превышен лимит исключений _TX_EXCEPTIONS_LIMIT (16). Спасибо _txVectoredExceptionHandler(), что сообщил. Люблю его <3

С помощью функции _set_se_translator() вы можете сами обработать эту ошибку.

#3: TXLib [Ver: 00173a, Rev: 172, Date: 2023-08-12 11:12:24 +0400], Instance: 0x005042FC (32-bit), Flags: Cmdre0, Thread: 0x3450 (Main), GetLastError(): 8 (Not enough memory resources are available to process this command), errno: 12 (Visual C++ CRT: Not enough memory to complete call to strerror.). 

--------------------------------------------------
Стек вызовов:

# 0 0x7746F025 in C:\Windows\SYSTEM32\ntdll.dll: RtlGetCurrentServiceSessionId()
# 1 0x774AFC6D in C:\Windows\SYSTEM32\ntdll.dll: RtlRemovePropertyStore()
# 2 0x7746EBA6 in C:\Windows\SYSTEM32\ntdll.dll: RtlFreeHeap()
# 3 0x75408109 in C:\Windows\System32\msvcrt.dll: free()
# 4 0x75416608 in C:\Windows\System32\msvcrt.dll: __unguarded_readlc_active_add_func()
# 5 0x7541762D in C:\Windows\System32\msvcrt.dll: get_current_locale()
# 6 0x75417777 in C:\Windows\System32\msvcrt.dll: setlocale()
# 7 0x0040E220 in C:\pupach_MFTI\pupach_atom\stack\stack.exe: _ZN12_GLOBAL__N_12TX11txSetLocaleEiPKcPKw()
# 8 0x0041AA67 in C:\pupach_MFTI\pupach_atom\stack\stack.exe: _ZN12_GLOBAL__N_12TX15_txProcessErrorEPKciS2_jS2_Pc()
# 9 0x00410DDE in C:\pupach_MFTI\pupach_atom\stack\stack.exe: _ZN12_GLOBAL__N_12TX8_txErrorEPKciS2_jS2_z()
#10 0x0041252B in C:\pupach_MFTI\pupach_atom\stack\stack.exe: _ZN12_GLOBAL__N_12TX17_txOnExceptionSEHEP19_EXCEPTION_POINTERSPKc()
#11 0x00411C44 in C:\pupach_MFTI\pupach_atom\stack\stack.exe: _ZN12_GLOBAL__N_12TX27_txVectoredExceptionHandlerEP19_EXCEPTION_POINTERS@4()
#12 0x7748FFFF in C:\Windows\SYSTEM32\ntdll.dll: LdrSetDllManifestProber()
#13 0x7748C727 in C:\Windows\SYSTEM32\ntdll.dll: RtlUnwind()
#14 0x77498756 in C:\Windows\SYSTEM32\ntdll.dll: KiUserExceptionDispatcher()
#15 0x753FAB98 in C:\Windows\System32\msvcrt.dll: CxxThrowException()
#16 0x7778611A in C:\Windows\DbgHelp32.dll: MiniDumpReadDumpStream()
#17 0x7772DD3F in C:\Windows\DbgHelp32.dll: RemoveInvalidModuleList()
#18 0x7774C070 in C:\Windows\DbgHelp32.dll: ImagehlpApiVersionEx()
#19 0x7774ACDE in C:\Windows\DbgHelp32.dll: ImagehlpApiVersionEx()
#20 0x7774A985 in C:\Windows\DbgHelp32.dll: ImagehlpApiVersionEx()
#21 0x7774224A in C:\Windows\DbgHelp32.dll: SymEnumerateSymbolsW64()
#22 0x777458BA in C:\Windows\DbgHelp32.dll: SymFromInlineContext()
#23 0x7774590E in C:\Windows\DbgHelp32.dll: SymFromAddr()

--------------------------------------------------
Стек вызовов TX:

# 0 in int {anonymous}::TX::txSetLocale(int, const char*, const wchar_t*) at c:\program files\codeblocks\mingw\include\txlib.h (10442):

  10440: $   if (locale)
  10441:         {
=>10442: $       setlocale (LC_ALL,     locale);
  10443: $       setlocale (LC_NUMERIC, "C");              // Return to decimal point (3.14) instead of comma (3,14) in floating numbers
  10444:         }

# 1 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

# 2 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

# 3 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

# 4 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

# 5 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

# 6 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

# 7 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

# 8 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

# 9 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#10 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#11 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#12 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#13 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#14 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#15 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#16 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#17 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#18 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#19 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#20 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#21 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

--------------------------------------------------
Developed with:

The Dumb Artist Library (TX Library)
TXLib [Ver: 00173a, Rev: 172, Date: 2023-08-12 11:12:24 +0400]
Copyright (C) Ded (Ilya Dedinsky, http://txlib.ru) <mail@txlib.ru>
See license on: http://txlib.ru

TXLib file:	c:\program files\codeblocks\mingw\include\txlib.h
Compiled:	Sep 23 2023 16:47:32, GNU g++ 4.8.1, std=201103L, MinGW Runtime 3.20, 32-bit, DEBUG
Started:	Sep 23 2023 16:47:50

Run file:	C:\pupach_MFTI\pupach_atom\stack\stack.exe
Directory:	C:\pupach_MFTI\pupach_atom\stack

--------------------------------------------------

--------------------------------------------------
TXLib предупреждает:

Программа: C:\pupach_MFTI\pupach_atom\stack\stack.exe,

ВНЕЗАПНО: Исключение С++, вызванное оператором throw.

#17: Исключение EXCEPTION_CPP_MSC (0xE06D7363) при выполнении кода по адресу 0x75838412 в функции RaiseException() в модуле C:\Windows\System32\KERNELBASE.dll. Дополнительно, превышен лимит исключений _TX_EXCEPTIONS_LIMIT (16). Спасибо _txVectoredExceptionHandler(), что сообщил. Люблю его <3

Ой, всё (EXCEPTION_NONCONTINUABLE).

#4: TXLib [Ver: 00173a, Rev: 172, Date: 2023-08-12 11:12:24 +0400], Instance: 0x005042FC (32-bit), Flags: Cmdre0, Thread: 0x3450 (Main), GetLastError(): 8 (Not enough memory resources are available to process this command), errno: 12 (Visual C++ CRT: Not enough memory to complete call to strerror.). 

--------------------------------------------------
Стек вызовов:

# 0 0x75838412 in C:\Windows\System32\KERNELBASE.dll: RaiseException()
# 1 0x753FAB98 in C:\Windows\System32\msvcrt.dll: CxxThrowException()
# 6 0x7747E030 in C:\Windows\SYSTEM32\ntdll.dll: RtlUnlockHeap()
# 7 0x770B5E1C in C:\Windows\System32\win32u.dll: NtUserQueryInputContext()

--------------------------------------------------
Стек вызовов TX:

# 0 in int {anonymous}::TX::txMessageBox(const char*, const char*, unsigned int) at c:\program files\codeblocks\mingw\include\txlib.h (12715):

  12713: 
  12714: $   HWND wnd = _txCanvas_Window;
=>12715: $   int  ret = MessageBoxW ((wnd && IsWindowVisible (wnd))? wnd : _TX_CALL (Win32::GetConsoleWindow,()),
  12716:                             textW, headerW, flags | MB_SETFOREGROUND | MB_TOPMOST);
  12717: 

# 1 in const char* {anonymous}::TX::_txProcessError(const char*, int, const char*, unsigned int, const char*, va_list) at c:\program files\codeblocks\mingw\include\txlib.h (12562):

  12560: 
  12561:     if (stkTrace && strstr (stkTrace, ".exe: "))
=>12562:         {$ fprintf (stderr,    "Стек вызовов:\n\n"
  12563:                                "%s\n\n"
  12564:                                "--------------------------------------------------\n",

# 2 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

# 3 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

# 4 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

# 5 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

# 6 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

# 7 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

# 8 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

# 9 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#10 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#11 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#12 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#13 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#14 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#15 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#16 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#17 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#18 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#19 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#20 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#21 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#22 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

--------------------------------------------------
Developed with:

The Dumb Artist Library (TX Library)
TXLib [Ver: 00173a, Rev: 172, Date: 2023-08-12 11:12:24 +0400]
Copyright (C) Ded (Ilya Dedinsky, http://txlib.ru) <mail@txlib.ru>
See license on: http://txlib.ru

TXLib file:	c:\program files\codeblocks\mingw\include\txlib.h
Compiled:	Sep 23 2023 16:47:32, GNU g++ 4.8.1, std=201103L, MinGW Runtime 3.20, 32-bit, DEBUG
Started:	Sep 23 2023 16:47:50

Run file:	C:\pupach_MFTI\pupach_atom\stack\stack.exe
Directory:	C:\pupach_MFTI\pupach_atom\stack

--------------------------------------------------

--------------------------------------------------
TXLib соболезнует...

Программа: C:\pupach_MFTI\pupach_atom\stack\stack.exe,

ВНЕЗАПНО: Исключение С++, вызванное оператором throw.

#17: Исключение EXCEPTION_CPP_MSC (0xE06D7363) при выполнении кода по адресу 0x75838412 в функции RaiseException() в модуле C:\Windows\System32\KERNELBASE.dll. Дополнительно, превышен лимит исключений _TX_EXCEPTIONS_LIMIT (16). Спасибо _txVectoredExceptionHandler(), что сообщил. Люблю его <3

Ой, всё (EXCEPTION_NONCONTINUABLE).

С помощью функции _set_se_translator() вы можете сами обработать эту ошибку.

#5: TXLib [Ver: 00173a, Rev: 172, Date: 2023-08-12 11:12:24 +0400], Instance: 0x005042FC (32-bit), Flags: Cmdre0, Thread: 0x3450 (Main), GetLastError(): 8 (Not enough memory resources are available to process this command), errno: 12 (Visual C++ CRT: Not enough memory to complete call to strerror.). 

--------------------------------------------------
Стек вызовов:

# 0 0x75838412 in C:\Windows\System32\KERNELBASE.dll: RaiseException()
# 1 0x753FAB98 in C:\Windows\System32\msvcrt.dll: CxxThrowException()
# 6 0x7747E030 in C:\Windows\SYSTEM32\ntdll.dll: RtlUnlockHeap()
# 7 0x770B5E1C in C:\Windows\System32\win32u.dll: NtUserQueryInputContext()

--------------------------------------------------
Стек вызовов TX:

# 0 in int {anonymous}::TX::txMessageBox(const char*, const char*, unsigned int) at c:\program files\codeblocks\mingw\include\txlib.h (12715):

  12713: 
  12714: $   HWND wnd = _txCanvas_Window;
=>12715: $   int  ret = MessageBoxW ((wnd && IsWindowVisible (wnd))? wnd : _TX_CALL (Win32::GetConsoleWindow,()),
  12716:                             textW, headerW, flags | MB_SETFOREGROUND | MB_TOPMOST);
  12717: 

# 1 in const char* {anonymous}::TX::_txProcessError(const char*, int, const char*, unsigned int, const char*, va_list) at c:\program files\codeblocks\mingw\include\txlib.h (12562):

  12560: 
  12561:     if (stkTrace && strstr (stkTrace, ".exe: "))
=>12562:         {$ fprintf (stderr,    "Стек вызовов:\n\n"
  12563:                                "%s\n\n"
  12564:                                "--------------------------------------------------\n",

# 2 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

# 3 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

# 4 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

# 5 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

# 6 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

# 7 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

# 8 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

# 9 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#10 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#11 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#12 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#13 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#14 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#15 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#16 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#17 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#18 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#19 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#20 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#21 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#22 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

--------------------------------------------------
Developed with:

The Dumb Artist Library (TX Library)
TXLib [Ver: 00173a, Rev: 172, Date: 2023-08-12 11:12:24 +0400]
Copyright (C) Ded (Ilya Dedinsky, http://txlib.ru) <mail@txlib.ru>
See license on: http://txlib.ru

TXLib file:	c:\program files\codeblocks\mingw\include\txlib.h
Compiled:	Sep 23 2023 16:47:32, GNU g++ 4.8.1, std=201103L, MinGW Runtime 3.20, 32-bit, DEBUG
Started:	Sep 23 2023 16:47:51

Run file:	C:\pupach_MFTI\pupach_atom\stack\stack.exe
Directory:	C:\pupach_MFTI\pupach_atom\stack

--------------------------------------------------

--------------------------------------------------
TXLib предупреждает:

Программа: C:\pupach_MFTI\pupach_atom\stack\stack.exe,

ВНЕЗАПНО: Нарушение доступа к памяти.

#21: Исключение EXCEPTION_ACCESS_VIOLATION (0xC0000005) при выполнении кода по адресу 0x7746D5AA в функции RtlAllocateHeap(). Попытка прочесть данные по адресу 0xFFFFFFFF в модуле C:\Windows\SYSTEM32\ntdll.dll. Дополнительно, превышен лимит исключений _TX_EXCEPTIONS_LIMIT (16). Также превышен лимит фатальных исключений _TX_FATAL_EXCEPTIONS_LIMIT (16). Спасибо _txVectoredExceptionHandler(), что сообщил. Люблю его <3

#1: TXLib [Ver: 00173a, Rev: 172, Date: 2023-08-12 11:12:24 +0400], Instance: 0x005042FC (32-bit), Flags: Cmdre0, Thread: 0x49E0 (Main), errno: 12 (Visual C++ CRT: Not enough memory to complete call to strerror.). 

--------------------------------------------------
Стек вызовов:

# 0 0x7746D5AA in C:\Windows\SYSTEM32\ntdll.dll: RtlAllocateHeap()
# 1 0x7746CB02 in C:\Windows\SYSTEM32\ntdll.dll: RtlAllocateHeap()
# 2 0x7746BAFE in C:\Windows\SYSTEM32\ntdll.dll: RtlAllocateHeap()
# 3 0x75408995 in C:\Windows\System32\msvcrt.dll: realloc()
# 4 0x7540806A in C:\Windows\System32\msvcrt.dll: calloc()
# 5 0x6626DA84 in C:\Windows\MgwHelp32.dll: SymGetLineFromAddrW64()

--------------------------------------------------
Стек вызовов TX:

# 0 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

# 1 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\program files\codeblocks\mingw\include\txlib.h (11982):

  11980: $       bool                    inTX   = false;
  11981: 
=>11982:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  11983:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  11984: 

# 2 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11478):

  11476: $       unsigned err = GetLastError();
  11477: 
=>11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
  11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

# 3 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

# 4 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\program files\codeblocks\mingw\include\txlib.h (11982):

  11980: $       bool                    inTX   = false;
  11981: 
=>11982:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  11983:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  11984: 

# 5 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11478):

  11476: $       unsigned err = GetLastError();
  11477: 
=>11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
  11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

# 6 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

# 7 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

# 8 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

# 9 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#10 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#11 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#12 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#13 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#14 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#15 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#16 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#17 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#18 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#19 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#20 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#21 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#22 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#23 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#24 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#25 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#26 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#27 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#28 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#29 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#30 in bool {anonymous}::TX::_txCreateMiniDump(EXCEPTION_POINTERS*) at c:\program files\codeblocks\mingw\include\txlib.h (12420):

  12418: $   Win32::MINIDUMP_TYPE type = (Win32::MINIDUMP_TYPE) (Win32::MiniDumpWithIndirectlyReferencedMemory | Win32::MiniDumpScanMemory);
  12419: 
=>12420: $   bool ok = _TX_CALL (Win32::MiniDumpWriteDump, (GetCurrentProcess(), GetCurrentProcessId(), file, type,
  12421:                                                    ((exc)? &excInfo : NULL), NULL, NULL));
  12422: $   CloseHandle (file);

#31 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\program files\codeblocks\mingw\include\txlib.h (12028):

  12026: 
  12027:     #if !defined (_TX_NO_MINIDUMP)
=>12028: $   _txCreateMiniDump (exc);
  12029:     #endif
  12030: 

#32 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11478):

  11476: $       unsigned err = GetLastError();
  11477: 
=>11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
  11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#33 in int {anonymous}::TX::txSetLocale(int, const char*, const wchar_t*) at c:\program files\codeblocks\mingw\include\txlib.h (10442):

  10440: $   if (locale)
  10441:         {
=>10442: $       setlocale (LC_ALL,     locale);
  10443: $       setlocale (LC_NUMERIC, "C");              // Return to decimal point (3.14) instead of comma (3,14) in floating numbers
  10444:         }

#34 in void {anonymous}::TX::_txPauseBeforeTermination(HWND) at c:\program files\codeblocks\mingw\include\txlib.h (9190):

   9188: $   bool wine    = !!Win32::wine_get_version;
   9189: 
=> 9190: $   txSetLocale();
   9191: $   int attr = txSetConsoleAttr (FOREGROUND_LIGHTGRAY);
   9192: 

#35 in void {anonymous}::TX::_txCleanup() at c:\program files\codeblocks\mingw\include\txlib.h (9077):

   9075: $       if (console && isParentWaitable >= 0)
   9076:             {
=> 9077: $           _txPauseBeforeTermination (canvas);
   9078: $           paused = true;
   9079:             }

#36 in void {anonymous}::TX::_txOnCExit() at c:\program files\codeblocks\mingw\include\txlib.h (8903):

   8901:     OutputDebugString ("\n");
   8902: 
=> 8903: $5  _txCleanup();
   8904: 
   8905:     _TX_CALLv (Win32::_cexit, ());

--------------------------------------------------
Developed with:

The Dumb Artist Library (TX Library)
TXLib [Ver: 00173a, Rev: 172, Date: 2023-08-12 11:12:24 +0400]
Copyright (C) Ded (Ilya Dedinsky, http://txlib.ru) <mail@txlib.ru>
See license on: http://txlib.ru

TXLib file:	c:\program files\codeblocks\mingw\include\txlib.h
Compiled:	Sep 23 2023 16:49:47, GNU g++ 4.8.1, std=201103L, MinGW Runtime 3.20, 32-bit, DEBUG
Started:	Sep 23 2023 16:49:50

Run file:	C:\pupach_MFTI\pupach_atom\stack\stack.exe
Directory:	C:\pupach_MFTI\pupach_atom\stack

--------------------------------------------------

--------------------------------------------------
TXLib соболезнует...

Программа: C:\pupach_MFTI\pupach_atom\stack\stack.exe,

ВНЕЗАПНО: Нарушение доступа к памяти.

#21: Исключение EXCEPTION_ACCESS_VIOLATION (0xC0000005) при выполнении кода по адресу 0x7746D5AA в функции RtlAllocateHeap(). Попытка прочесть данные по адресу 0xFFFFFFFF в модуле C:\Windows\SYSTEM32\ntdll.dll. Дополнительно, превышен лимит исключений _TX_EXCEPTIONS_LIMIT (16). Также превышен лимит фатальных исключений _TX_FATAL_EXCEPTIONS_LIMIT (16). Спасибо _txVectoredExceptionHandler(), что сообщил. Люблю его <3

С помощью функции _set_se_translator() вы можете сами обработать эту ошибку.

#2: TXLib [Ver: 00173a, Rev: 172, Date: 2023-08-12 11:12:24 +0400], Instance: 0x005042FC (32-bit), Flags: Cmdre0, Thread: 0x49E0 (Main), errno: 12 (Visual C++ CRT: Not enough memory to complete call to strerror.). 

--------------------------------------------------
Стек вызовов:

# 0 0x7746D5AA in C:\Windows\SYSTEM32\ntdll.dll: RtlAllocateHeap()
# 1 0x7746CB02 in C:\Windows\SYSTEM32\ntdll.dll: RtlAllocateHeap()
# 2 0x7746BAFE in C:\Windows\SYSTEM32\ntdll.dll: RtlAllocateHeap()
# 3 0x75408995 in C:\Windows\System32\msvcrt.dll: realloc()
# 4 0x7540806A in C:\Windows\System32\msvcrt.dll: calloc()
# 5 0x6626DA84 in C:\Windows\MgwHelp32.dll: SymGetLineFromAddrW64()

--------------------------------------------------
Стек вызовов TX:

# 0 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

# 1 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\program files\codeblocks\mingw\include\txlib.h (11982):

  11980: $       bool                    inTX   = false;
  11981: 
=>11982:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  11983:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  11984: 

# 2 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11478):

  11476: $       unsigned err = GetLastError();
  11477: 
=>11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
  11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

# 3 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

# 4 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\program files\codeblocks\mingw\include\txlib.h (11982):

  11980: $       bool                    inTX   = false;
  11981: 
=>11982:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  11983:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  11984: 

# 5 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11478):

  11476: $       unsigned err = GetLastError();
  11477: 
=>11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
  11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

# 6 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

# 7 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

# 8 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

# 9 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#10 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#11 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#12 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#13 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#14 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#15 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#16 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#17 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#18 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#19 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#20 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#21 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#22 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#23 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#24 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#25 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#26 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#27 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#28 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#29 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#30 in bool {anonymous}::TX::_txCreateMiniDump(EXCEPTION_POINTERS*) at c:\program files\codeblocks\mingw\include\txlib.h (12420):

  12418: $   Win32::MINIDUMP_TYPE type = (Win32::MINIDUMP_TYPE) (Win32::MiniDumpWithIndirectlyReferencedMemory | Win32::MiniDumpScanMemory);
  12419: 
=>12420: $   bool ok = _TX_CALL (Win32::MiniDumpWriteDump, (GetCurrentProcess(), GetCurrentProcessId(), file, type,
  12421:                                                    ((exc)? &excInfo : NULL), NULL, NULL));
  12422: $   CloseHandle (file);

#31 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\program files\codeblocks\mingw\include\txlib.h (12028):

  12026: 
  12027:     #if !defined (_TX_NO_MINIDUMP)
=>12028: $   _txCreateMiniDump (exc);
  12029:     #endif
  12030: 

#32 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11478):

  11476: $       unsigned err = GetLastError();
  11477: 
=>11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
  11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#33 in int {anonymous}::TX::txSetLocale(int, const char*, const wchar_t*) at c:\program files\codeblocks\mingw\include\txlib.h (10442):

  10440: $   if (locale)
  10441:         {
=>10442: $       setlocale (LC_ALL,     locale);
  10443: $       setlocale (LC_NUMERIC, "C");              // Return to decimal point (3.14) instead of comma (3,14) in floating numbers
  10444:         }

#34 in void {anonymous}::TX::_txPauseBeforeTermination(HWND) at c:\program files\codeblocks\mingw\include\txlib.h (9190):

   9188: $   bool wine    = !!Win32::wine_get_version;
   9189: 
=> 9190: $   txSetLocale();
   9191: $   int attr = txSetConsoleAttr (FOREGROUND_LIGHTGRAY);
   9192: 

#35 in void {anonymous}::TX::_txCleanup() at c:\program files\codeblocks\mingw\include\txlib.h (9077):

   9075: $       if (console && isParentWaitable >= 0)
   9076:             {
=> 9077: $           _txPauseBeforeTermination (canvas);
   9078: $           paused = true;
   9079:             }

#36 in void {anonymous}::TX::_txOnCExit() at c:\program files\codeblocks\mingw\include\txlib.h (8903):

   8901:     OutputDebugString ("\n");
   8902: 
=> 8903: $5  _txCleanup();
   8904: 
   8905:     _TX_CALLv (Win32::_cexit, ());

--------------------------------------------------
Developed with:

The Dumb Artist Library (TX Library)
TXLib [Ver: 00173a, Rev: 172, Date: 2023-08-12 11:12:24 +0400]
Copyright (C) Ded (Ilya Dedinsky, http://txlib.ru) <mail@txlib.ru>
See license on: http://txlib.ru

TXLib file:	c:\program files\codeblocks\mingw\include\txlib.h
Compiled:	Sep 23 2023 16:49:47, GNU g++ 4.8.1, std=201103L, MinGW Runtime 3.20, 32-bit, DEBUG
Started:	Sep 23 2023 16:49:51

Run file:	C:\pupach_MFTI\pupach_atom\stack\stack.exe
Directory:	C:\pupach_MFTI\pupach_atom\stack

--------------------------------------------------

--------------------------------------------------
TXLib предупреждает:

Программа: C:\pupach_MFTI\pupach_atom\stack\stack.exe,

ВНЕЗАПНО: Исключение С++, вызванное оператором throw.

#22: Исключение EXCEPTION_CPP_MSC (0xE06D7363) при выполнении кода по адресу 0x75838412 в функции RaiseException() в модуле C:\Windows\System32\KERNELBASE.dll. Дополнительно, превышен лимит исключений _TX_EXCEPTIONS_LIMIT (16). Также превышен лимит фатальных исключений _TX_FATAL_EXCEPTIONS_LIMIT (16). Спасибо _txVectoredExceptionHandler(), что сообщил. Люблю его <3

Ой, всё (EXCEPTION_NONCONTINUABLE).

#3: TXLib [Ver: 00173a, Rev: 172, Date: 2023-08-12 11:12:24 +0400], Instance: 0x005042FC (32-bit), Flags: Cmdre0, Thread: 0x49E0 (Main), GetLastError(): 8 (Not enough memory resources are available to process this command), errno: 12 (Visual C++ CRT: Not enough memory to complete call to strerror.). 

--------------------------------------------------
Стек вызовов:

# 0 0x75838412 in C:\Windows\System32\KERNELBASE.dll: RaiseException()
# 1 0x753FAB98 in C:\Windows\System32\msvcrt.dll: CxxThrowException()
# 6 0x7747E030 in C:\Windows\SYSTEM32\ntdll.dll: RtlUnlockHeap()
# 7 0x770B5E1C in C:\Windows\System32\win32u.dll: NtUserQueryInputContext()
# 8 0x75993E58 in C:\Windows\System32\IMM32.dll: ImmLockClientImc()
# 9 0x759928B5 in C:\Windows\System32\IMM32.dll: ImmDisableIme()
#10 0x759945D3 in C:\Windows\System32\IMM32.dll: ImmUnlockIMC()
#11 0x75992F06 in C:\Windows\System32\IMM32.dll: ImmSetActiveContext()
#12 0x76F26677 in C:\Windows\System32\USER32.dll: IsWindow()
#13 0x76F24651 in C:\Windows\System32\USER32.dll: GetWindowRect()
#14 0x76F241B2 in C:\Windows\System32\USER32.dll: GetWindowRect()
#15 0x76F23E5B in C:\Windows\System32\USER32.dll: GetWindowRect()
#16 0x76F323A3 in C:\Windows\System32\USER32.dll: Ordinal2713()
#17 0x76F230B6 in C:\Windows\System32\USER32.dll: CallWindowProcW()
#18 0x76F22B3A in C:\Windows\System32\USER32.dll: CallWindowProcW()
#19 0x76F2CA9F in C:\Windows\System32\USER32.dll: GetPropW()
#20 0x7749870D in C:\Windows\SYSTEM32\ntdll.dll: KiUserCallbackDispatcher()
#21 0x76F323A3 in C:\Windows\System32\USER32.dll: Ordinal2713()
#22 0x76F1FB28 in C:\Windows\System32\USER32.dll: MapWindowPoints()
#23 0x76F1EA8C in C:\Windows\System32\USER32.dll: MapWindowPoints()
#24 0x76F1E8ED in C:\Windows\System32\USER32.dll: MapWindowPoints()
#25 0x76F323A3 in C:\Windows\System32\USER32.dll: Ordinal2713()
#26 0x76F230B6 in C:\Windows\System32\USER32.dll: CallWindowProcW()
#27 0x76F224D2 in C:\Windows\System32\USER32.dll: MsgWaitForMultipleObjectsEx()
#28 0x76F27B01 in C:\Windows\System32\USER32.dll: EnumThreadWindows()
#29 0x76F587FE in C:\Windows\System32\USER32.dll: EndDialog()
#30 0x76F796D0 in C:\Windows\System32\USER32.dll: SoftModalMessageBox()
#31 0x76F78466 in C:\Windows\System32\USER32.dll: DrawStateW()
#32 0x76F78F67 in C:\Windows\System32\USER32.dll: MessageBoxTimeoutW()
#33 0x76F78FD5 in C:\Windows\System32\USER32.dll: MessageBoxW()
#34 0x0041AF10 in C:\pupach_MFTI\pupach_atom\stack\stack.exe: _ZN12_GLOBAL__N_12TX12txMessageBoxEPKcS2_j()
#35 0x0041ACA7 in C:\pupach_MFTI\pupach_atom\stack\stack.exe: _ZN12_GLOBAL__N_12TX15_txProcessErrorEPKciS2_jS2_Pc()
#36 0x00410DDE in C:\pupach_MFTI\pupach_atom\stack\stack.exe: _ZN12_GLOBAL__N_12TX8_txErrorEPKciS2_jS2_z()
#37 0x00412654 in C:\pupach_MFTI\pupach_atom\stack\stack.exe: _ZN12_GLOBAL__N_12TX17_txOnExceptionSEHEP19_EXCEPTION_POINTERSPKc()
#38 0x00411C44 in C:\pupach_MFTI\pupach_atom\stack\stack.exe: _ZN12_GLOBAL__N_12TX27_txVectoredExceptionHandlerEP19_EXCEPTION_POINTERS@4()
#39 0x7748FFFF in C:\Windows\SYSTEM32\ntdll.dll: LdrSetDllManifestProber()
#40 0x7748C727 in C:\Windows\SYSTEM32\ntdll.dll: RtlUnwind()
#41 0x77498756 in C:\Windows\SYSTEM32\ntdll.dll: KiUserExceptionDispatcher()
#42 0x7746CB02 in C:\Windows\SYSTEM32\ntdll.dll: RtlAllocateHeap()
#43 0x7746BAFE in C:\Windows\SYSTEM32\ntdll.dll: RtlAllocateHeap()
#44 0x75408995 in C:\Windows\System32\msvcrt.dll: realloc()
#45 0x7540806A in C:\Windows\System32\msvcrt.dll: calloc()
#46 0x6626DA84 in C:\Windows\MgwHelp32.dll: SymGetLineFromAddrW64()

--------------------------------------------------
Стек вызовов TX:

# 0 in int {anonymous}::TX::txMessageBox(const char*, const char*, unsigned int) at c:\program files\codeblocks\mingw\include\txlib.h (12715):

  12713: 
  12714: $   HWND wnd = _txCanvas_Window;
=>12715: $   int  ret = MessageBoxW ((wnd && IsWindowVisible (wnd))? wnd : _TX_CALL (Win32::GetConsoleWindow,()),
  12716:                             textW, headerW, flags | MB_SETFOREGROUND | MB_TOPMOST);
  12717: 

# 1 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

# 2 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\program files\codeblocks\mingw\include\txlib.h (11982):

  11980: $       bool                    inTX   = false;
  11981: 
=>11982:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  11983:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  11984: 

# 3 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11478):

  11476: $       unsigned err = GetLastError();
  11477: 
=>11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
  11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

# 4 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

# 5 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\program files\codeblocks\mingw\include\txlib.h (11982):

  11980: $       bool                    inTX   = false;
  11981: 
=>11982:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  11983:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  11984: 

# 6 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11478):

  11476: $       unsigned err = GetLastError();
  11477: 
=>11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
  11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

# 7 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

# 8 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

# 9 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#10 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#11 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#12 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#13 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#14 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#15 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#16 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#17 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#18 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#19 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#20 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#21 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#22 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#23 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#24 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#25 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#26 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#27 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#28 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#29 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#30 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#31 in bool {anonymous}::TX::_txCreateMiniDump(EXCEPTION_POINTERS*) at c:\program files\codeblocks\mingw\include\txlib.h (12420):

  12418: $   Win32::MINIDUMP_TYPE type = (Win32::MINIDUMP_TYPE) (Win32::MiniDumpWithIndirectlyReferencedMemory | Win32::MiniDumpScanMemory);
  12419: 
=>12420: $   bool ok = _TX_CALL (Win32::MiniDumpWriteDump, (GetCurrentProcess(), GetCurrentProcessId(), file, type,
  12421:                                                    ((exc)? &excInfo : NULL), NULL, NULL));
  12422: $   CloseHandle (file);

#32 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\program files\codeblocks\mingw\include\txlib.h (12028):

  12026: 
  12027:     #if !defined (_TX_NO_MINIDUMP)
=>12028: $   _txCreateMiniDump (exc);
  12029:     #endif
  12030: 

#33 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11478):

  11476: $       unsigned err = GetLastError();
  11477: 
=>11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
  11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#34 in int {anonymous}::TX::txSetLocale(int, const char*, const wchar_t*) at c:\program files\codeblocks\mingw\include\txlib.h (10442):

  10440: $   if (locale)
  10441:         {
=>10442: $       setlocale (LC_ALL,     locale);
  10443: $       setlocale (LC_NUMERIC, "C");              // Return to decimal point (3.14) instead of comma (3,14) in floating numbers
  10444:         }

#35 in void {anonymous}::TX::_txPauseBeforeTermination(HWND) at c:\program files\codeblocks\mingw\include\txlib.h (9190):

   9188: $   bool wine    = !!Win32::wine_get_version;
   9189: 
=> 9190: $   txSetLocale();
   9191: $   int attr = txSetConsoleAttr (FOREGROUND_LIGHTGRAY);
   9192: 

#36 in void {anonymous}::TX::_txCleanup() at c:\program files\codeblocks\mingw\include\txlib.h (9077):

   9075: $       if (console && isParentWaitable >= 0)
   9076:             {
=> 9077: $           _txPauseBeforeTermination (canvas);
   9078: $           paused = true;
   9079:             }

#37 in void {anonymous}::TX::_txOnCExit() at c:\program files\codeblocks\mingw\include\txlib.h (8903):

   8901:     OutputDebugString ("\n");
   8902: 
=> 8903: $5  _txCleanup();
   8904: 
   8905:     _TX_CALLv (Win32::_cexit, ());

--------------------------------------------------
Developed with:

The Dumb Artist Library (TX Library)
TXLib [Ver: 00173a, Rev: 172, Date: 2023-08-12 11:12:24 +0400]
Copyright (C) Ded (Ilya Dedinsky, http://txlib.ru) <mail@txlib.ru>
See license on: http://txlib.ru

TXLib file:	c:\program files\codeblocks\mingw\include\txlib.h
Compiled:	Sep 23 2023 16:49:47, GNU g++ 4.8.1, std=201103L, MinGW Runtime 3.20, 32-bit, DEBUG
Started:	Sep 23 2023 16:49:50

Run file:	C:\pupach_MFTI\pupach_atom\stack\stack.exe
Directory:	C:\pupach_MFTI\pupach_atom\stack

--------------------------------------------------

--------------------------------------------------
TXLib соболезнует...

Программа: C:\pupach_MFTI\pupach_atom\stack\stack.exe,

ВНЕЗАПНО: Исключение С++, вызванное оператором throw.

#22: Исключение EXCEPTION_CPP_MSC (0xE06D7363) при выполнении кода по адресу 0x75838412 в функции RaiseException() в модуле C:\Windows\System32\KERNELBASE.dll. Дополнительно, превышен лимит исключений _TX_EXCEPTIONS_LIMIT (16). Также превышен лимит фатальных исключений _TX_FATAL_EXCEPTIONS_LIMIT (16). Спасибо _txVectoredExceptionHandler(), что сообщил. Люблю его <3

Ой, всё (EXCEPTION_NONCONTINUABLE).

С помощью функции _set_se_translator() вы можете сами обработать эту ошибку.

#4: TXLib [Ver: 00173a, Rev: 172, Date: 2023-08-12 11:12:24 +0400], Instance: 0x005042FC (32-bit), Flags: Cmdre0, Thread: 0x49E0 (Main), GetLastError(): 8 (Not enough memory resources are available to process this command), errno: 12 (Visual C++ CRT: Not enough memory to complete call to strerror.). 

--------------------------------------------------
Стек вызовов:

# 0 0x75838412 in C:\Windows\System32\KERNELBASE.dll: RaiseException()
# 1 0x753FAB98 in C:\Windows\System32\msvcrt.dll: CxxThrowException()
# 6 0x7747E030 in C:\Windows\SYSTEM32\ntdll.dll: RtlUnlockHeap()
# 7 0x770B5E1C in C:\Windows\System32\win32u.dll: NtUserQueryInputContext()
# 8 0x75993E58 in C:\Windows\System32\IMM32.dll: ImmLockClientImc()
# 9 0x759928B5 in C:\Windows\System32\IMM32.dll: ImmDisableIme()
#10 0x759945D3 in C:\Windows\System32\IMM32.dll: ImmUnlockIMC()
#11 0x75992F06 in C:\Windows\System32\IMM32.dll: ImmSetActiveContext()
#12 0x76F26677 in C:\Windows\System32\USER32.dll: IsWindow()
#13 0x76F24651 in C:\Windows\System32\USER32.dll: GetWindowRect()
#14 0x76F241B2 in C:\Windows\System32\USER32.dll: GetWindowRect()
#15 0x76F23E5B in C:\Windows\System32\USER32.dll: GetWindowRect()
#16 0x76F323A3 in C:\Windows\System32\USER32.dll: Ordinal2713()
#17 0x76F230B6 in C:\Windows\System32\USER32.dll: CallWindowProcW()
#18 0x76F22B3A in C:\Windows\System32\USER32.dll: CallWindowProcW()
#19 0x76F2CA9F in C:\Windows\System32\USER32.dll: GetPropW()
#20 0x7749870D in C:\Windows\SYSTEM32\ntdll.dll: KiUserCallbackDispatcher()
#21 0x76F323A3 in C:\Windows\System32\USER32.dll: Ordinal2713()
#22 0x76F1FB28 in C:\Windows\System32\USER32.dll: MapWindowPoints()
#23 0x76F1EA8C in C:\Windows\System32\USER32.dll: MapWindowPoints()
#24 0x76F1E8ED in C:\Windows\System32\USER32.dll: MapWindowPoints()
#25 0x76F323A3 in C:\Windows\System32\USER32.dll: Ordinal2713()
#26 0x76F230B6 in C:\Windows\System32\USER32.dll: CallWindowProcW()
#27 0x76F224D2 in C:\Windows\System32\USER32.dll: MsgWaitForMultipleObjectsEx()
#28 0x76F27B01 in C:\Windows\System32\USER32.dll: EnumThreadWindows()
#29 0x76F587FE in C:\Windows\System32\USER32.dll: EndDialog()
#30 0x76F796D0 in C:\Windows\System32\USER32.dll: SoftModalMessageBox()
#31 0x76F78466 in C:\Windows\System32\USER32.dll: DrawStateW()
#32 0x76F78F67 in C:\Windows\System32\USER32.dll: MessageBoxTimeoutW()
#33 0x76F78FD5 in C:\Windows\System32\USER32.dll: MessageBoxW()
#34 0x0041AF10 in C:\pupach_MFTI\pupach_atom\stack\stack.exe: _ZN12_GLOBAL__N_12TX12txMessageBoxEPKcS2_j()
#35 0x0041ACA7 in C:\pupach_MFTI\pupach_atom\stack\stack.exe: _ZN12_GLOBAL__N_12TX15_txProcessErrorEPKciS2_jS2_Pc()
#36 0x00410DDE in C:\pupach_MFTI\pupach_atom\stack\stack.exe: _ZN12_GLOBAL__N_12TX8_txErrorEPKciS2_jS2_z()
#37 0x00412654 in C:\pupach_MFTI\pupach_atom\stack\stack.exe: _ZN12_GLOBAL__N_12TX17_txOnExceptionSEHEP19_EXCEPTION_POINTERSPKc()
#38 0x00411C44 in C:\pupach_MFTI\pupach_atom\stack\stack.exe: _ZN12_GLOBAL__N_12TX27_txVectoredExceptionHandlerEP19_EXCEPTION_POINTERS@4()
#39 0x7748FFFF in C:\Windows\SYSTEM32\ntdll.dll: LdrSetDllManifestProber()
#40 0x7748C727 in C:\Windows\SYSTEM32\ntdll.dll: RtlUnwind()
#41 0x77498756 in C:\Windows\SYSTEM32\ntdll.dll: KiUserExceptionDispatcher()
#42 0x7746CB02 in C:\Windows\SYSTEM32\ntdll.dll: RtlAllocateHeap()
#43 0x7746BAFE in C:\Windows\SYSTEM32\ntdll.dll: RtlAllocateHeap()
#44 0x75408995 in C:\Windows\System32\msvcrt.dll: realloc()
#45 0x7540806A in C:\Windows\System32\msvcrt.dll: calloc()
#46 0x6626DA84 in C:\Windows\MgwHelp32.dll: SymGetLineFromAddrW64()

--------------------------------------------------
Стек вызовов TX:

# 0 in int {anonymous}::TX::txMessageBox(const char*, const char*, unsigned int) at c:\program files\codeblocks\mingw\include\txlib.h (12715):

  12713: 
  12714: $   HWND wnd = _txCanvas_Window;
=>12715: $   int  ret = MessageBoxW ((wnd && IsWindowVisible (wnd))? wnd : _TX_CALL (Win32::GetConsoleWindow,()),
  12716:                             textW, headerW, flags | MB_SETFOREGROUND | MB_TOPMOST);
  12717: 

# 1 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

# 2 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\program files\codeblocks\mingw\include\txlib.h (11982):

  11980: $       bool                    inTX   = false;
  11981: 
=>11982:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  11983:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  11984: 

# 3 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11478):

  11476: $       unsigned err = GetLastError();
  11477: 
=>11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
  11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

# 4 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

# 5 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\program files\codeblocks\mingw\include\txlib.h (11982):

  11980: $       bool                    inTX   = false;
  11981: 
=>11982:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  11983:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  11984: 

# 6 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11478):

  11476: $       unsigned err = GetLastError();
  11477: 
=>11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
  11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

# 7 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

# 8 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

# 9 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#10 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#11 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#12 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#13 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#14 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#15 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#16 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#17 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#18 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#19 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#20 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#21 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#22 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#23 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#24 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#25 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#26 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#27 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#28 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#29 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#30 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#31 in bool {anonymous}::TX::_txCreateMiniDump(EXCEPTION_POINTERS*) at c:\program files\codeblocks\mingw\include\txlib.h (12420):

  12418: $   Win32::MINIDUMP_TYPE type = (Win32::MINIDUMP_TYPE) (Win32::MiniDumpWithIndirectlyReferencedMemory | Win32::MiniDumpScanMemory);
  12419: 
=>12420: $   bool ok = _TX_CALL (Win32::MiniDumpWriteDump, (GetCurrentProcess(), GetCurrentProcessId(), file, type,
  12421:                                                    ((exc)? &excInfo : NULL), NULL, NULL));
  12422: $   CloseHandle (file);

#32 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\program files\codeblocks\mingw\include\txlib.h (12028):

  12026: 
  12027:     #if !defined (_TX_NO_MINIDUMP)
=>12028: $   _txCreateMiniDump (exc);
  12029:     #endif
  12030: 

#33 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11478):

  11476: $       unsigned err = GetLastError();
  11477: 
=>11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
  11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#34 in int {anonymous}::TX::txSetLocale(int, const char*, const wchar_t*) at c:\program files\codeblocks\mingw\include\txlib.h (10442):

  10440: $   if (locale)
  10441:         {
=>10442: $       setlocale (LC_ALL,     locale);
  10443: $       setlocale (LC_NUMERIC, "C");              // Return to decimal point (3.14) instead of comma (3,14) in floating numbers
  10444:         }

#35 in void {anonymous}::TX::_txPauseBeforeTermination(HWND) at c:\program files\codeblocks\mingw\include\txlib.h (9190):

   9188: $   bool wine    = !!Win32::wine_get_version;
   9189: 
=> 9190: $   txSetLocale();
   9191: $   int attr = txSetConsoleAttr (FOREGROUND_LIGHTGRAY);
   9192: 

#36 in void {anonymous}::TX::_txCleanup() at c:\program files\codeblocks\mingw\include\txlib.h (9077):

   9075: $       if (console && isParentWaitable >= 0)
   9076:             {
=> 9077: $           _txPauseBeforeTermination (canvas);
   9078: $           paused = true;
   9079:             }

#37 in void {anonymous}::TX::_txOnCExit() at c:\program files\codeblocks\mingw\include\txlib.h (8903):

   8901:     OutputDebugString ("\n");
   8902: 
=> 8903: $5  _txCleanup();
   8904: 
   8905:     _TX_CALLv (Win32::_cexit, ());

--------------------------------------------------
Developed with:

The Dumb Artist Library (TX Library)
TXLib [Ver: 00173a, Rev: 172, Date: 2023-08-12 11:12:24 +0400]
Copyright (C) Ded (Ilya Dedinsky, http://txlib.ru) <mail@txlib.ru>
See license on: http://txlib.ru

TXLib file:	c:\program files\codeblocks\mingw\include\txlib.h
Compiled:	Sep 23 2023 16:49:47, GNU g++ 4.8.1, std=201103L, MinGW Runtime 3.20, 32-bit, DEBUG
Started:	Sep 23 2023 16:49:50

Run file:	C:\pupach_MFTI\pupach_atom\stack\stack.exe
Directory:	C:\pupach_MFTI\pupach_atom\stack

--------------------------------------------------

--------------------------------------------------
TXLib предупреждает:

Программа: C:\pupach_MFTI\pupach_atom\stack\stack.exe,

ВНЕЗАПНО: Нарушение доступа к памяти.

#16: Исключение EXCEPTION_ACCESS_VIOLATION (0xC0000005) при выполнении кода по адресу 0x7746F025 в функции RtlGetCurrentServiceSessionId(). Попытка прочесть данные по адресу 0xFFFFFFFF в модуле C:\Windows\SYSTEM32\ntdll.dll. Дополнительно, превышен лимит исключений _TX_EXCEPTIONS_LIMIT (16). Спасибо _txVectoredExceptionHandler(), что сообщил. Люблю его <3

#2: TXLib [Ver: 00173a, Rev: 172, Date: 2023-08-12 11:12:24 +0400], Instance: 0x005042FC (32-bit), Flags: Cmdre0, Thread: 0x6504 (Main), GetLastError(): 8 (Not enough memory resources are available to process this command), errno: 12 (Visual C++ CRT: Not enough memory to complete call to strerror.). 

--------------------------------------------------
Стек вызовов:

# 0 0x7746F025 in C:\Windows\SYSTEM32\ntdll.dll: RtlGetCurrentServiceSessionId()
# 1 0x774AFC6D in C:\Windows\SYSTEM32\ntdll.dll: RtlRemovePropertyStore()
# 2 0x7746EBA6 in C:\Windows\SYSTEM32\ntdll.dll: RtlFreeHeap()
# 3 0x75408109 in C:\Windows\System32\msvcrt.dll: free()
# 4 0x75416608 in C:\Windows\System32\msvcrt.dll: __unguarded_readlc_active_add_func()
# 5 0x7541762D in C:\Windows\System32\msvcrt.dll: get_current_locale()
# 6 0x75417777 in C:\Windows\System32\msvcrt.dll: setlocale()
# 7 0x0040E220 in C:\pupach_MFTI\pupach_atom\stack\stack.exe: _ZN12_GLOBAL__N_12TX11txSetLocaleEiPKcPKw()
# 8 0x0041AA67 in C:\pupach_MFTI\pupach_atom\stack\stack.exe: _ZN12_GLOBAL__N_12TX15_txProcessErrorEPKciS2_jS2_Pc()
# 9 0x00410DDE in C:\pupach_MFTI\pupach_atom\stack\stack.exe: _ZN12_GLOBAL__N_12TX8_txErrorEPKciS2_jS2_z()
#10 0x0041252B in C:\pupach_MFTI\pupach_atom\stack\stack.exe: _ZN12_GLOBAL__N_12TX17_txOnExceptionSEHEP19_EXCEPTION_POINTERSPKc()
#11 0x00411C44 in C:\pupach_MFTI\pupach_atom\stack\stack.exe: _ZN12_GLOBAL__N_12TX27_txVectoredExceptionHandlerEP19_EXCEPTION_POINTERS@4()
#12 0x7748FFFF in C:\Windows\SYSTEM32\ntdll.dll: LdrSetDllManifestProber()
#13 0x7748C727 in C:\Windows\SYSTEM32\ntdll.dll: RtlUnwind()
#14 0x77498756 in C:\Windows\SYSTEM32\ntdll.dll: KiUserExceptionDispatcher()
#15 0x753FAB98 in C:\Windows\System32\msvcrt.dll: CxxThrowException()
#16 0x7778611A in C:\Windows\DbgHelp32.dll: MiniDumpReadDumpStream()
#17 0x7772DD3F in C:\Windows\DbgHelp32.dll: RemoveInvalidModuleList()
#18 0x7774C070 in C:\Windows\DbgHelp32.dll: ImagehlpApiVersionEx()
#19 0x7774ACDE in C:\Windows\DbgHelp32.dll: ImagehlpApiVersionEx()
#20 0x7774A985 in C:\Windows\DbgHelp32.dll: ImagehlpApiVersionEx()
#21 0x7774224A in C:\Windows\DbgHelp32.dll: SymEnumerateSymbolsW64()
#22 0x777458BA in C:\Windows\DbgHelp32.dll: SymFromInlineContext()
#23 0x7774590E in C:\Windows\DbgHelp32.dll: SymFromAddr()

--------------------------------------------------
Стек вызовов TX:

# 0 in int {anonymous}::TX::txSetLocale(int, const char*, const wchar_t*) at c:\program files\codeblocks\mingw\include\txlib.h (10442):

  10440: $   if (locale)
  10441:         {
=>10442: $       setlocale (LC_ALL,     locale);
  10443: $       setlocale (LC_NUMERIC, "C");              // Return to decimal point (3.14) instead of comma (3,14) in floating numbers
  10444:         }

# 1 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

# 2 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

# 3 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

# 4 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

# 5 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

# 6 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

# 7 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

# 8 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

# 9 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#10 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#11 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#12 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#13 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#14 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#15 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#16 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#17 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#18 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#19 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#20 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#21 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

--------------------------------------------------
Developed with:

The Dumb Artist Library (TX Library)
TXLib [Ver: 00173a, Rev: 172, Date: 2023-08-12 11:12:24 +0400]
Copyright (C) Ded (Ilya Dedinsky, http://txlib.ru) <mail@txlib.ru>
See license on: http://txlib.ru

TXLib file:	c:\program files\codeblocks\mingw\include\txlib.h
Compiled:	Sep 23 2023 16:50:08, GNU g++ 4.8.1, std=201103L, MinGW Runtime 3.20, 32-bit, DEBUG
Started:	Sep 23 2023 16:50:11

Run file:	C:\pupach_MFTI\pupach_atom\stack\stack.exe
Directory:	C:\pupach_MFTI\pupach_atom\stack

--------------------------------------------------

--------------------------------------------------
TXLib соболезнует...

Программа: C:\pupach_MFTI\pupach_atom\stack\stack.exe,

ВНЕЗАПНО: Нарушение доступа к памяти.

#16: Исключение EXCEPTION_ACCESS_VIOLATION (0xC0000005) при выполнении кода по адресу 0x7746F025 в функции RtlGetCurrentServiceSessionId(). Попытка прочесть данные по адресу 0xFFFFFFFF в модуле C:\Windows\SYSTEM32\ntdll.dll. Дополнительно, превышен лимит исключений _TX_EXCEPTIONS_LIMIT (16). Спасибо _txVectoredExceptionHandler(), что сообщил. Люблю его <3

С помощью функции _set_se_translator() вы можете сами обработать эту ошибку.

#3: TXLib [Ver: 00173a, Rev: 172, Date: 2023-08-12 11:12:24 +0400], Instance: 0x005042FC (32-bit), Flags: Cmdre0, Thread: 0x6504 (Main), GetLastError(): 8 (Not enough memory resources are available to process this command), errno: 12 (Visual C++ CRT: Not enough memory to complete call to strerror.). 

--------------------------------------------------
Стек вызовов:

# 0 0x7746F025 in C:\Windows\SYSTEM32\ntdll.dll: RtlGetCurrentServiceSessionId()
# 1 0x774AFC6D in C:\Windows\SYSTEM32\ntdll.dll: RtlRemovePropertyStore()
# 2 0x7746EBA6 in C:\Windows\SYSTEM32\ntdll.dll: RtlFreeHeap()
# 3 0x75408109 in C:\Windows\System32\msvcrt.dll: free()
# 4 0x75416608 in C:\Windows\System32\msvcrt.dll: __unguarded_readlc_active_add_func()
# 5 0x7541762D in C:\Windows\System32\msvcrt.dll: get_current_locale()
# 6 0x75417777 in C:\Windows\System32\msvcrt.dll: setlocale()
# 7 0x0040E220 in C:\pupach_MFTI\pupach_atom\stack\stack.exe: _ZN12_GLOBAL__N_12TX11txSetLocaleEiPKcPKw()
# 8 0x0041AA67 in C:\pupach_MFTI\pupach_atom\stack\stack.exe: _ZN12_GLOBAL__N_12TX15_txProcessErrorEPKciS2_jS2_Pc()
# 9 0x00410DDE in C:\pupach_MFTI\pupach_atom\stack\stack.exe: _ZN12_GLOBAL__N_12TX8_txErrorEPKciS2_jS2_z()
#10 0x0041252B in C:\pupach_MFTI\pupach_atom\stack\stack.exe: _ZN12_GLOBAL__N_12TX17_txOnExceptionSEHEP19_EXCEPTION_POINTERSPKc()
#11 0x00411C44 in C:\pupach_MFTI\pupach_atom\stack\stack.exe: _ZN12_GLOBAL__N_12TX27_txVectoredExceptionHandlerEP19_EXCEPTION_POINTERS@4()
#12 0x7748FFFF in C:\Windows\SYSTEM32\ntdll.dll: LdrSetDllManifestProber()
#13 0x7748C727 in C:\Windows\SYSTEM32\ntdll.dll: RtlUnwind()
#14 0x77498756 in C:\Windows\SYSTEM32\ntdll.dll: KiUserExceptionDispatcher()
#15 0x753FAB98 in C:\Windows\System32\msvcrt.dll: CxxThrowException()
#16 0x7778611A in C:\Windows\DbgHelp32.dll: MiniDumpReadDumpStream()
#17 0x7772DD3F in C:\Windows\DbgHelp32.dll: RemoveInvalidModuleList()
#18 0x7774C070 in C:\Windows\DbgHelp32.dll: ImagehlpApiVersionEx()
#19 0x7774ACDE in C:\Windows\DbgHelp32.dll: ImagehlpApiVersionEx()
#20 0x7774A985 in C:\Windows\DbgHelp32.dll: ImagehlpApiVersionEx()
#21 0x7774224A in C:\Windows\DbgHelp32.dll: SymEnumerateSymbolsW64()
#22 0x777458BA in C:\Windows\DbgHelp32.dll: SymFromInlineContext()
#23 0x7774590E in C:\Windows\DbgHelp32.dll: SymFromAddr()

--------------------------------------------------
Стек вызовов TX:

# 0 in int {anonymous}::TX::txSetLocale(int, const char*, const wchar_t*) at c:\program files\codeblocks\mingw\include\txlib.h (10442):

  10440: $   if (locale)
  10441:         {
=>10442: $       setlocale (LC_ALL,     locale);
  10443: $       setlocale (LC_NUMERIC, "C");              // Return to decimal point (3.14) instead of comma (3,14) in floating numbers
  10444:         }

# 1 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

# 2 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

# 3 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

# 4 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

# 5 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

# 6 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

# 7 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

# 8 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

# 9 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#10 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#11 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#12 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#13 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#14 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#15 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#16 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#17 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#18 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#19 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#20 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#21 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

--------------------------------------------------
Developed with:

The Dumb Artist Library (TX Library)
TXLib [Ver: 00173a, Rev: 172, Date: 2023-08-12 11:12:24 +0400]
Copyright (C) Ded (Ilya Dedinsky, http://txlib.ru) <mail@txlib.ru>
See license on: http://txlib.ru

TXLib file:	c:\program files\codeblocks\mingw\include\txlib.h
Compiled:	Sep 23 2023 16:50:08, GNU g++ 4.8.1, std=201103L, MinGW Runtime 3.20, 32-bit, DEBUG
Started:	Sep 23 2023 16:50:11

Run file:	C:\pupach_MFTI\pupach_atom\stack\stack.exe
Directory:	C:\pupach_MFTI\pupach_atom\stack

--------------------------------------------------

--------------------------------------------------
TXLib предупреждает:

Программа: C:\pupach_MFTI\pupach_atom\stack\stack.exe,

ВНЕЗАПНО: Исключение С++, вызванное оператором throw.

#17: Исключение EXCEPTION_CPP_MSC (0xE06D7363) при выполнении кода по адресу 0x75838412 в функции RaiseException() в модуле C:\Windows\System32\KERNELBASE.dll. Дополнительно, превышен лимит исключений _TX_EXCEPTIONS_LIMIT (16). Спасибо _txVectoredExceptionHandler(), что сообщил. Люблю его <3

Ой, всё (EXCEPTION_NONCONTINUABLE).

#4: TXLib [Ver: 00173a, Rev: 172, Date: 2023-08-12 11:12:24 +0400], Instance: 0x005042FC (32-bit), Flags: Cmdre0, Thread: 0x6504 (Main), GetLastError(): 8 (Not enough memory resources are available to process this command), errno: 12 (Visual C++ CRT: Not enough memory to complete call to strerror.). 

--------------------------------------------------
Стек вызовов:

# 0 0x75838412 in C:\Windows\System32\KERNELBASE.dll: RaiseException()
# 1 0x753FAB98 in C:\Windows\System32\msvcrt.dll: CxxThrowException()
# 6 0x7747E030 in C:\Windows\SYSTEM32\ntdll.dll: RtlUnlockHeap()
# 7 0x770B5E1C in C:\Windows\System32\win32u.dll: NtUserQueryInputContext()

--------------------------------------------------
Стек вызовов TX:

# 0 in int {anonymous}::TX::txMessageBox(const char*, const char*, unsigned int) at c:\program files\codeblocks\mingw\include\txlib.h (12715):

  12713: 
  12714: $   HWND wnd = _txCanvas_Window;
=>12715: $   int  ret = MessageBoxW ((wnd && IsWindowVisible (wnd))? wnd : _TX_CALL (Win32::GetConsoleWindow,()),
  12716:                             textW, headerW, flags | MB_SETFOREGROUND | MB_TOPMOST);
  12717: 

# 1 in const char* {anonymous}::TX::_txProcessError(const char*, int, const char*, unsigned int, const char*, va_list) at c:\program files\codeblocks\mingw\include\txlib.h (12562):

  12560: 
  12561:     if (stkTrace && strstr (stkTrace, ".exe: "))
=>12562:         {$ fprintf (stderr,    "Стек вызовов:\n\n"
  12563:                                "%s\n\n"
  12564:                                "--------------------------------------------------\n",

# 2 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

# 3 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

# 4 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

# 5 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

# 6 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

# 7 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

# 8 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

# 9 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#10 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#11 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#12 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#13 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#14 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#15 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#16 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#17 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#18 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#19 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#20 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#21 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#22 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

--------------------------------------------------
Developed with:

The Dumb Artist Library (TX Library)
TXLib [Ver: 00173a, Rev: 172, Date: 2023-08-12 11:12:24 +0400]
Copyright (C) Ded (Ilya Dedinsky, http://txlib.ru) <mail@txlib.ru>
See license on: http://txlib.ru

TXLib file:	c:\program files\codeblocks\mingw\include\txlib.h
Compiled:	Sep 23 2023 16:50:08, GNU g++ 4.8.1, std=201103L, MinGW Runtime 3.20, 32-bit, DEBUG
Started:	Sep 23 2023 16:50:11

Run file:	C:\pupach_MFTI\pupach_atom\stack\stack.exe
Directory:	C:\pupach_MFTI\pupach_atom\stack

--------------------------------------------------

--------------------------------------------------
TXLib соболезнует...

Программа: C:\pupach_MFTI\pupach_atom\stack\stack.exe,

ВНЕЗАПНО: Исключение С++, вызванное оператором throw.

#17: Исключение EXCEPTION_CPP_MSC (0xE06D7363) при выполнении кода по адресу 0x75838412 в функции RaiseException() в модуле C:\Windows\System32\KERNELBASE.dll. Дополнительно, превышен лимит исключений _TX_EXCEPTIONS_LIMIT (16). Спасибо _txVectoredExceptionHandler(), что сообщил. Люблю его <3

Ой, всё (EXCEPTION_NONCONTINUABLE).

С помощью функции _set_se_translator() вы можете сами обработать эту ошибку.

#5: TXLib [Ver: 00173a, Rev: 172, Date: 2023-08-12 11:12:24 +0400], Instance: 0x005042FC (32-bit), Flags: Cmdre0, Thread: 0x6504 (Main), GetLastError(): 8 (Not enough memory resources are available to process this command), errno: 12 (Visual C++ CRT: Not enough memory to complete call to strerror.). 

--------------------------------------------------
Стек вызовов:

# 0 0x75838412 in C:\Windows\System32\KERNELBASE.dll: RaiseException()
# 1 0x753FAB98 in C:\Windows\System32\msvcrt.dll: CxxThrowException()
# 6 0x7747E030 in C:\Windows\SYSTEM32\ntdll.dll: RtlUnlockHeap()
# 7 0x770B5E1C in C:\Windows\System32\win32u.dll: NtUserQueryInputContext()

--------------------------------------------------
Стек вызовов TX:

# 0 in int {anonymous}::TX::txMessageBox(const char*, const char*, unsigned int) at c:\program files\codeblocks\mingw\include\txlib.h (12715):

  12713: 
  12714: $   HWND wnd = _txCanvas_Window;
=>12715: $   int  ret = MessageBoxW ((wnd && IsWindowVisible (wnd))? wnd : _TX_CALL (Win32::GetConsoleWindow,()),
  12716:                             textW, headerW, flags | MB_SETFOREGROUND | MB_TOPMOST);
  12717: 

# 1 in const char* {anonymous}::TX::_txProcessError(const char*, int, const char*, unsigned int, const char*, va_list) at c:\program files\codeblocks\mingw\include\txlib.h (12562):

  12560: 
  12561:     if (stkTrace && strstr (stkTrace, ".exe: "))
=>12562:         {$ fprintf (stderr,    "Стек вызовов:\n\n"
  12563:                                "%s\n\n"
  12564:                                "--------------------------------------------------\n",

# 2 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

# 3 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

# 4 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

# 5 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

# 6 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

# 7 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

# 8 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

# 9 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#10 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#11 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#12 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#13 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#14 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#15 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#16 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#17 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#18 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#19 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#20 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#21 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#22 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

--------------------------------------------------
Developed with:

The Dumb Artist Library (TX Library)
TXLib [Ver: 00173a, Rev: 172, Date: 2023-08-12 11:12:24 +0400]
Copyright (C) Ded (Ilya Dedinsky, http://txlib.ru) <mail@txlib.ru>
See license on: http://txlib.ru

TXLib file:	c:\program files\codeblocks\mingw\include\txlib.h
Compiled:	Sep 23 2023 16:50:08, GNU g++ 4.8.1, std=201103L, MinGW Runtime 3.20, 32-bit, DEBUG
Started:	Sep 23 2023 16:50:11

Run file:	C:\pupach_MFTI\pupach_atom\stack\stack.exe
Directory:	C:\pupach_MFTI\pupach_atom\stack

--------------------------------------------------

--------------------------------------------------
TXLib предупреждает:

Программа: C:\pupach_MFTI\pupach_atom\stack\stack.exe,

ВНЕЗАПНО: Нарушение доступа к памяти.

#21: Исключение EXCEPTION_ACCESS_VIOLATION (0xC0000005) при выполнении кода по адресу 0x7746D5AA в функции RtlAllocateHeap(). Попытка прочесть данные по адресу 0xFFFFFFFF в модуле C:\Windows\SYSTEM32\ntdll.dll. Дополнительно, превышен лимит исключений _TX_EXCEPTIONS_LIMIT (16). Также превышен лимит фатальных исключений _TX_FATAL_EXCEPTIONS_LIMIT (16). Спасибо _txVectoredExceptionHandler(), что сообщил. Люблю его <3

#1: TXLib [Ver: 00173a, Rev: 172, Date: 2023-08-12 11:12:24 +0400], Instance: 0x005042FC (32-bit), Flags: Cmdre0, Thread: 0x2468 (Main), errno: 12 (Visual C++ CRT: Not enough memory to complete call to strerror.). 

--------------------------------------------------
Стек вызовов:

# 0 0x7746D5AA in C:\Windows\SYSTEM32\ntdll.dll: RtlAllocateHeap()
# 1 0x7746CB02 in C:\Windows\SYSTEM32\ntdll.dll: RtlAllocateHeap()
# 2 0x7746BAFE in C:\Windows\SYSTEM32\ntdll.dll: RtlAllocateHeap()
# 3 0x75408995 in C:\Windows\System32\msvcrt.dll: realloc()
# 4 0x7540806A in C:\Windows\System32\msvcrt.dll: calloc()
# 5 0x6626DA84 in C:\Windows\MgwHelp32.dll: SymGetLineFromAddrW64()

--------------------------------------------------
Стек вызовов TX:

# 0 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

# 1 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\program files\codeblocks\mingw\include\txlib.h (11982):

  11980: $       bool                    inTX   = false;
  11981: 
=>11982:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  11983:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  11984: 

# 2 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11478):

  11476: $       unsigned err = GetLastError();
  11477: 
=>11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
  11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

# 3 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

# 4 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\program files\codeblocks\mingw\include\txlib.h (11982):

  11980: $       bool                    inTX   = false;
  11981: 
=>11982:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  11983:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  11984: 

# 5 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11478):

  11476: $       unsigned err = GetLastError();
  11477: 
=>11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
  11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

# 6 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

# 7 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

# 8 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

# 9 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#10 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#11 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#12 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#13 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#14 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#15 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#16 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#17 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#18 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#19 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#20 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#21 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#22 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#23 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#24 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#25 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#26 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#27 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#28 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#29 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#30 in bool {anonymous}::TX::_txCreateMiniDump(EXCEPTION_POINTERS*) at c:\program files\codeblocks\mingw\include\txlib.h (12420):

  12418: $   Win32::MINIDUMP_TYPE type = (Win32::MINIDUMP_TYPE) (Win32::MiniDumpWithIndirectlyReferencedMemory | Win32::MiniDumpScanMemory);
  12419: 
=>12420: $   bool ok = _TX_CALL (Win32::MiniDumpWriteDump, (GetCurrentProcess(), GetCurrentProcessId(), file, type,
  12421:                                                    ((exc)? &excInfo : NULL), NULL, NULL));
  12422: $   CloseHandle (file);

#31 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\program files\codeblocks\mingw\include\txlib.h (12028):

  12026: 
  12027:     #if !defined (_TX_NO_MINIDUMP)
=>12028: $   _txCreateMiniDump (exc);
  12029:     #endif
  12030: 

#32 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11478):

  11476: $       unsigned err = GetLastError();
  11477: 
=>11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
  11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#33 in int {anonymous}::TX::txSetLocale(int, const char*, const wchar_t*) at c:\program files\codeblocks\mingw\include\txlib.h (10442):

  10440: $   if (locale)
  10441:         {
=>10442: $       setlocale (LC_ALL,     locale);
  10443: $       setlocale (LC_NUMERIC, "C");              // Return to decimal point (3.14) instead of comma (3,14) in floating numbers
  10444:         }

#34 in void {anonymous}::TX::_txPauseBeforeTermination(HWND) at c:\program files\codeblocks\mingw\include\txlib.h (9190):

   9188: $   bool wine    = !!Win32::wine_get_version;
   9189: 
=> 9190: $   txSetLocale();
   9191: $   int attr = txSetConsoleAttr (FOREGROUND_LIGHTGRAY);
   9192: 

#35 in void {anonymous}::TX::_txCleanup() at c:\program files\codeblocks\mingw\include\txlib.h (9077):

   9075: $       if (console && isParentWaitable >= 0)
   9076:             {
=> 9077: $           _txPauseBeforeTermination (canvas);
   9078: $           paused = true;
   9079:             }

#36 in void {anonymous}::TX::_txOnCExit() at c:\program files\codeblocks\mingw\include\txlib.h (8903):

   8901:     OutputDebugString ("\n");
   8902: 
=> 8903: $5  _txCleanup();
   8904: 
   8905:     _TX_CALLv (Win32::_cexit, ());

--------------------------------------------------
Developed with:

The Dumb Artist Library (TX Library)
TXLib [Ver: 00173a, Rev: 172, Date: 2023-08-12 11:12:24 +0400]
Copyright (C) Ded (Ilya Dedinsky, http://txlib.ru) <mail@txlib.ru>
See license on: http://txlib.ru

TXLib file:	c:\program files\codeblocks\mingw\include\txlib.h
Compiled:	Sep 23 2023 16:50:28, GNU g++ 4.8.1, std=201103L, MinGW Runtime 3.20, 32-bit, DEBUG
Started:	Sep 23 2023 16:50:31

Run file:	C:\pupach_MFTI\pupach_atom\stack\stack.exe
Directory:	C:\pupach_MFTI\pupach_atom\stack

--------------------------------------------------

--------------------------------------------------
TXLib соболезнует...

Программа: C:\pupach_MFTI\pupach_atom\stack\stack.exe,

ВНЕЗАПНО: Нарушение доступа к памяти.

#21: Исключение EXCEPTION_ACCESS_VIOLATION (0xC0000005) при выполнении кода по адресу 0x7746D5AA в функции RtlAllocateHeap(). Попытка прочесть данные по адресу 0xFFFFFFFF в модуле C:\Windows\SYSTEM32\ntdll.dll. Дополнительно, превышен лимит исключений _TX_EXCEPTIONS_LIMIT (16). Также превышен лимит фатальных исключений _TX_FATAL_EXCEPTIONS_LIMIT (16). Спасибо _txVectoredExceptionHandler(), что сообщил. Люблю его <3

С помощью функции _set_se_translator() вы можете сами обработать эту ошибку.

#2: TXLib [Ver: 00173a, Rev: 172, Date: 2023-08-12 11:12:24 +0400], Instance: 0x005042FC (32-bit), Flags: Cmdre0, Thread: 0x2468 (Main), errno: 12 (Visual C++ CRT: Not enough memory to complete call to strerror.). 

--------------------------------------------------
Стек вызовов:

# 0 0x7746D5AA in C:\Windows\SYSTEM32\ntdll.dll: RtlAllocateHeap()
# 1 0x7746CB02 in C:\Windows\SYSTEM32\ntdll.dll: RtlAllocateHeap()
# 2 0x7746BAFE in C:\Windows\SYSTEM32\ntdll.dll: RtlAllocateHeap()
# 3 0x75408995 in C:\Windows\System32\msvcrt.dll: realloc()
# 4 0x7540806A in C:\Windows\System32\msvcrt.dll: calloc()
# 5 0x6626DA84 in C:\Windows\MgwHelp32.dll: SymGetLineFromAddrW64()

--------------------------------------------------
Стек вызовов TX:

# 0 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

# 1 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\program files\codeblocks\mingw\include\txlib.h (11982):

  11980: $       bool                    inTX   = false;
  11981: 
=>11982:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  11983:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  11984: 

# 2 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11478):

  11476: $       unsigned err = GetLastError();
  11477: 
=>11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
  11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

# 3 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

# 4 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\program files\codeblocks\mingw\include\txlib.h (11982):

  11980: $       bool                    inTX   = false;
  11981: 
=>11982:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  11983:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  11984: 

# 5 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11478):

  11476: $       unsigned err = GetLastError();
  11477: 
=>11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
  11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

# 6 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

# 7 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

# 8 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

# 9 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#10 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#11 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#12 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#13 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#14 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#15 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#16 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#17 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#18 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#19 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#20 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#21 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#22 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#23 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#24 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#25 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#26 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#27 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#28 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#29 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#30 in bool {anonymous}::TX::_txCreateMiniDump(EXCEPTION_POINTERS*) at c:\program files\codeblocks\mingw\include\txlib.h (12420):

  12418: $   Win32::MINIDUMP_TYPE type = (Win32::MINIDUMP_TYPE) (Win32::MiniDumpWithIndirectlyReferencedMemory | Win32::MiniDumpScanMemory);
  12419: 
=>12420: $   bool ok = _TX_CALL (Win32::MiniDumpWriteDump, (GetCurrentProcess(), GetCurrentProcessId(), file, type,
  12421:                                                    ((exc)? &excInfo : NULL), NULL, NULL));
  12422: $   CloseHandle (file);

#31 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\program files\codeblocks\mingw\include\txlib.h (12028):

  12026: 
  12027:     #if !defined (_TX_NO_MINIDUMP)
=>12028: $   _txCreateMiniDump (exc);
  12029:     #endif
  12030: 

#32 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11478):

  11476: $       unsigned err = GetLastError();
  11477: 
=>11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
  11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#33 in int {anonymous}::TX::txSetLocale(int, const char*, const wchar_t*) at c:\program files\codeblocks\mingw\include\txlib.h (10442):

  10440: $   if (locale)
  10441:         {
=>10442: $       setlocale (LC_ALL,     locale);
  10443: $       setlocale (LC_NUMERIC, "C");              // Return to decimal point (3.14) instead of comma (3,14) in floating numbers
  10444:         }

#34 in void {anonymous}::TX::_txPauseBeforeTermination(HWND) at c:\program files\codeblocks\mingw\include\txlib.h (9190):

   9188: $   bool wine    = !!Win32::wine_get_version;
   9189: 
=> 9190: $   txSetLocale();
   9191: $   int attr = txSetConsoleAttr (FOREGROUND_LIGHTGRAY);
   9192: 

#35 in void {anonymous}::TX::_txCleanup() at c:\program files\codeblocks\mingw\include\txlib.h (9077):

   9075: $       if (console && isParentWaitable >= 0)
   9076:             {
=> 9077: $           _txPauseBeforeTermination (canvas);
   9078: $           paused = true;
   9079:             }

#36 in void {anonymous}::TX::_txOnCExit() at c:\program files\codeblocks\mingw\include\txlib.h (8903):

   8901:     OutputDebugString ("\n");
   8902: 
=> 8903: $5  _txCleanup();
   8904: 
   8905:     _TX_CALLv (Win32::_cexit, ());

--------------------------------------------------
Developed with:

The Dumb Artist Library (TX Library)
TXLib [Ver: 00173a, Rev: 172, Date: 2023-08-12 11:12:24 +0400]
Copyright (C) Ded (Ilya Dedinsky, http://txlib.ru) <mail@txlib.ru>
See license on: http://txlib.ru

TXLib file:	c:\program files\codeblocks\mingw\include\txlib.h
Compiled:	Sep 23 2023 16:50:28, GNU g++ 4.8.1, std=201103L, MinGW Runtime 3.20, 32-bit, DEBUG
Started:	Sep 23 2023 16:50:31

Run file:	C:\pupach_MFTI\pupach_atom\stack\stack.exe
Directory:	C:\pupach_MFTI\pupach_atom\stack

--------------------------------------------------

--------------------------------------------------
TXLib предупреждает:

Программа: C:\pupach_MFTI\pupach_atom\stack\stack.exe,

ВНЕЗАПНО: Исключение С++, вызванное оператором throw.

#22: Исключение EXCEPTION_CPP_MSC (0xE06D7363) при выполнении кода по адресу 0x75838412 в функции RaiseException() в модуле C:\Windows\System32\KERNELBASE.dll. Дополнительно, превышен лимит исключений _TX_EXCEPTIONS_LIMIT (16). Также превышен лимит фатальных исключений _TX_FATAL_EXCEPTIONS_LIMIT (16). Спасибо _txVectoredExceptionHandler(), что сообщил. Люблю его <3

Ой, всё (EXCEPTION_NONCONTINUABLE).

#3: TXLib [Ver: 00173a, Rev: 172, Date: 2023-08-12 11:12:24 +0400], Instance: 0x005042FC (32-bit), Flags: Cmdre0, Thread: 0x2468 (Main), GetLastError(): 8 (Not enough memory resources are available to process this command), errno: 12 (Visual C++ CRT: Not enough memory to complete call to strerror.). 

--------------------------------------------------
Стек вызовов:

# 0 0x75838412 in C:\Windows\System32\KERNELBASE.dll: RaiseException()
# 1 0x753FAB98 in C:\Windows\System32\msvcrt.dll: CxxThrowException()
# 6 0x7747E030 in C:\Windows\SYSTEM32\ntdll.dll: RtlUnlockHeap()
# 7 0x770B5E1C in C:\Windows\System32\win32u.dll: NtUserQueryInputContext()
# 8 0x75993E58 in C:\Windows\System32\IMM32.dll: ImmLockClientImc()
# 9 0x759928B5 in C:\Windows\System32\IMM32.dll: ImmDisableIme()
#10 0x759945D3 in C:\Windows\System32\IMM32.dll: ImmUnlockIMC()
#11 0x75992F06 in C:\Windows\System32\IMM32.dll: ImmSetActiveContext()
#12 0x76F26677 in C:\Windows\System32\USER32.dll: IsWindow()
#13 0x76F24651 in C:\Windows\System32\USER32.dll: GetWindowRect()
#14 0x76F241B2 in C:\Windows\System32\USER32.dll: GetWindowRect()
#15 0x76F23E5B in C:\Windows\System32\USER32.dll: GetWindowRect()
#16 0x76F323A3 in C:\Windows\System32\USER32.dll: Ordinal2713()
#17 0x76F230B6 in C:\Windows\System32\USER32.dll: CallWindowProcW()
#18 0x76F22B3A in C:\Windows\System32\USER32.dll: CallWindowProcW()
#19 0x76F2CA9F in C:\Windows\System32\USER32.dll: GetPropW()
#20 0x7749870D in C:\Windows\SYSTEM32\ntdll.dll: KiUserCallbackDispatcher()
#21 0x76F323A3 in C:\Windows\System32\USER32.dll: Ordinal2713()
#22 0x76F1FB28 in C:\Windows\System32\USER32.dll: MapWindowPoints()
#23 0x76F1EA8C in C:\Windows\System32\USER32.dll: MapWindowPoints()
#24 0x76F1E8ED in C:\Windows\System32\USER32.dll: MapWindowPoints()
#25 0x76F323A3 in C:\Windows\System32\USER32.dll: Ordinal2713()
#26 0x76F230B6 in C:\Windows\System32\USER32.dll: CallWindowProcW()
#27 0x76F224D2 in C:\Windows\System32\USER32.dll: MsgWaitForMultipleObjectsEx()
#28 0x76F27B01 in C:\Windows\System32\USER32.dll: EnumThreadWindows()
#29 0x76F587FE in C:\Windows\System32\USER32.dll: EndDialog()
#30 0x76F796D0 in C:\Windows\System32\USER32.dll: SoftModalMessageBox()
#31 0x76F78466 in C:\Windows\System32\USER32.dll: DrawStateW()
#32 0x76F78F67 in C:\Windows\System32\USER32.dll: MessageBoxTimeoutW()
#33 0x76F78FD5 in C:\Windows\System32\USER32.dll: MessageBoxW()
#34 0x0041AF10 in C:\pupach_MFTI\pupach_atom\stack\stack.exe: _ZN12_GLOBAL__N_12TX12txMessageBoxEPKcS2_j()
#35 0x0041ACA7 in C:\pupach_MFTI\pupach_atom\stack\stack.exe: _ZN12_GLOBAL__N_12TX15_txProcessErrorEPKciS2_jS2_Pc()
#36 0x00410DDE in C:\pupach_MFTI\pupach_atom\stack\stack.exe: _ZN12_GLOBAL__N_12TX8_txErrorEPKciS2_jS2_z()
#37 0x00412654 in C:\pupach_MFTI\pupach_atom\stack\stack.exe: _ZN12_GLOBAL__N_12TX17_txOnExceptionSEHEP19_EXCEPTION_POINTERSPKc()
#38 0x00411C44 in C:\pupach_MFTI\pupach_atom\stack\stack.exe: _ZN12_GLOBAL__N_12TX27_txVectoredExceptionHandlerEP19_EXCEPTION_POINTERS@4()
#39 0x7748FFFF in C:\Windows\SYSTEM32\ntdll.dll: LdrSetDllManifestProber()
#40 0x7748C727 in C:\Windows\SYSTEM32\ntdll.dll: RtlUnwind()
#41 0x77498756 in C:\Windows\SYSTEM32\ntdll.dll: KiUserExceptionDispatcher()
#42 0x7746CB02 in C:\Windows\SYSTEM32\ntdll.dll: RtlAllocateHeap()
#43 0x7746BAFE in C:\Windows\SYSTEM32\ntdll.dll: RtlAllocateHeap()
#44 0x75408995 in C:\Windows\System32\msvcrt.dll: realloc()
#45 0x7540806A in C:\Windows\System32\msvcrt.dll: calloc()
#46 0x6626DA84 in C:\Windows\MgwHelp32.dll: SymGetLineFromAddrW64()

--------------------------------------------------
Стек вызовов TX:

# 0 in int {anonymous}::TX::txMessageBox(const char*, const char*, unsigned int) at c:\program files\codeblocks\mingw\include\txlib.h (12715):

  12713: 
  12714: $   HWND wnd = _txCanvas_Window;
=>12715: $   int  ret = MessageBoxW ((wnd && IsWindowVisible (wnd))? wnd : _TX_CALL (Win32::GetConsoleWindow,()),
  12716:                             textW, headerW, flags | MB_SETFOREGROUND | MB_TOPMOST);
  12717: 

# 1 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

# 2 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\program files\codeblocks\mingw\include\txlib.h (11982):

  11980: $       bool                    inTX   = false;
  11981: 
=>11982:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  11983:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  11984: 

# 3 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11478):

  11476: $       unsigned err = GetLastError();
  11477: 
=>11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
  11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

# 4 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

# 5 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\program files\codeblocks\mingw\include\txlib.h (11982):

  11980: $       bool                    inTX   = false;
  11981: 
=>11982:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  11983:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  11984: 

# 6 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11478):

  11476: $       unsigned err = GetLastError();
  11477: 
=>11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
  11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

# 7 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

# 8 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

# 9 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#10 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#11 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#12 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#13 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#14 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#15 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#16 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#17 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#18 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#19 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#20 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#21 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#22 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#23 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#24 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#25 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#26 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#27 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#28 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#29 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#30 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#31 in bool {anonymous}::TX::_txCreateMiniDump(EXCEPTION_POINTERS*) at c:\program files\codeblocks\mingw\include\txlib.h (12420):

  12418: $   Win32::MINIDUMP_TYPE type = (Win32::MINIDUMP_TYPE) (Win32::MiniDumpWithIndirectlyReferencedMemory | Win32::MiniDumpScanMemory);
  12419: 
=>12420: $   bool ok = _TX_CALL (Win32::MiniDumpWriteDump, (GetCurrentProcess(), GetCurrentProcessId(), file, type,
  12421:                                                    ((exc)? &excInfo : NULL), NULL, NULL));
  12422: $   CloseHandle (file);

#32 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\program files\codeblocks\mingw\include\txlib.h (12028):

  12026: 
  12027:     #if !defined (_TX_NO_MINIDUMP)
=>12028: $   _txCreateMiniDump (exc);
  12029:     #endif
  12030: 

#33 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11478):

  11476: $       unsigned err = GetLastError();
  11477: 
=>11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
  11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#34 in int {anonymous}::TX::txSetLocale(int, const char*, const wchar_t*) at c:\program files\codeblocks\mingw\include\txlib.h (10442):

  10440: $   if (locale)
  10441:         {
=>10442: $       setlocale (LC_ALL,     locale);
  10443: $       setlocale (LC_NUMERIC, "C");              // Return to decimal point (3.14) instead of comma (3,14) in floating numbers
  10444:         }

#35 in void {anonymous}::TX::_txPauseBeforeTermination(HWND) at c:\program files\codeblocks\mingw\include\txlib.h (9190):

   9188: $   bool wine    = !!Win32::wine_get_version;
   9189: 
=> 9190: $   txSetLocale();
   9191: $   int attr = txSetConsoleAttr (FOREGROUND_LIGHTGRAY);
   9192: 

#36 in void {anonymous}::TX::_txCleanup() at c:\program files\codeblocks\mingw\include\txlib.h (9077):

   9075: $       if (console && isParentWaitable >= 0)
   9076:             {
=> 9077: $           _txPauseBeforeTermination (canvas);
   9078: $           paused = true;
   9079:             }

#37 in void {anonymous}::TX::_txOnCExit() at c:\program files\codeblocks\mingw\include\txlib.h (8903):

   8901:     OutputDebugString ("\n");
   8902: 
=> 8903: $5  _txCleanup();
   8904: 
   8905:     _TX_CALLv (Win32::_cexit, ());

--------------------------------------------------
Developed with:

The Dumb Artist Library (TX Library)
TXLib [Ver: 00173a, Rev: 172, Date: 2023-08-12 11:12:24 +0400]
Copyright (C) Ded (Ilya Dedinsky, http://txlib.ru) <mail@txlib.ru>
See license on: http://txlib.ru

TXLib file:	c:\program files\codeblocks\mingw\include\txlib.h
Compiled:	Sep 23 2023 16:50:28, GNU g++ 4.8.1, std=201103L, MinGW Runtime 3.20, 32-bit, DEBUG
Started:	Sep 23 2023 16:50:31

Run file:	C:\pupach_MFTI\pupach_atom\stack\stack.exe
Directory:	C:\pupach_MFTI\pupach_atom\stack

--------------------------------------------------

--------------------------------------------------
TXLib соболезнует...

Программа: C:\pupach_MFTI\pupach_atom\stack\stack.exe,

ВНЕЗАПНО: Исключение С++, вызванное оператором throw.

#22: Исключение EXCEPTION_CPP_MSC (0xE06D7363) при выполнении кода по адресу 0x75838412 в функции RaiseException() в модуле C:\Windows\System32\KERNELBASE.dll. Дополнительно, превышен лимит исключений _TX_EXCEPTIONS_LIMIT (16). Также превышен лимит фатальных исключений _TX_FATAL_EXCEPTIONS_LIMIT (16). Спасибо _txVectoredExceptionHandler(), что сообщил. Люблю его <3

Ой, всё (EXCEPTION_NONCONTINUABLE).

С помощью функции _set_se_translator() вы можете сами обработать эту ошибку.

#4: TXLib [Ver: 00173a, Rev: 172, Date: 2023-08-12 11:12:24 +0400], Instance: 0x005042FC (32-bit), Flags: Cmdre0, Thread: 0x2468 (Main), GetLastError(): 8 (Not enough memory resources are available to process this command), errno: 12 (Visual C++ CRT: Not enough memory to complete call to strerror.). 

--------------------------------------------------
Стек вызовов:

# 0 0x75838412 in C:\Windows\System32\KERNELBASE.dll: RaiseException()
# 1 0x753FAB98 in C:\Windows\System32\msvcrt.dll: CxxThrowException()
# 6 0x7747E030 in C:\Windows\SYSTEM32\ntdll.dll: RtlUnlockHeap()
# 7 0x770B5E1C in C:\Windows\System32\win32u.dll: NtUserQueryInputContext()
# 8 0x75993E58 in C:\Windows\System32\IMM32.dll: ImmLockClientImc()
# 9 0x759928B5 in C:\Windows\System32\IMM32.dll: ImmDisableIme()
#10 0x759945D3 in C:\Windows\System32\IMM32.dll: ImmUnlockIMC()
#11 0x75992F06 in C:\Windows\System32\IMM32.dll: ImmSetActiveContext()
#12 0x76F26677 in C:\Windows\System32\USER32.dll: IsWindow()
#13 0x76F24651 in C:\Windows\System32\USER32.dll: GetWindowRect()
#14 0x76F241B2 in C:\Windows\System32\USER32.dll: GetWindowRect()
#15 0x76F23E5B in C:\Windows\System32\USER32.dll: GetWindowRect()
#16 0x76F323A3 in C:\Windows\System32\USER32.dll: Ordinal2713()
#17 0x76F230B6 in C:\Windows\System32\USER32.dll: CallWindowProcW()
#18 0x76F22B3A in C:\Windows\System32\USER32.dll: CallWindowProcW()
#19 0x76F2CA9F in C:\Windows\System32\USER32.dll: GetPropW()
#20 0x7749870D in C:\Windows\SYSTEM32\ntdll.dll: KiUserCallbackDispatcher()
#21 0x76F323A3 in C:\Windows\System32\USER32.dll: Ordinal2713()
#22 0x76F1FB28 in C:\Windows\System32\USER32.dll: MapWindowPoints()
#23 0x76F1EA8C in C:\Windows\System32\USER32.dll: MapWindowPoints()
#24 0x76F1E8ED in C:\Windows\System32\USER32.dll: MapWindowPoints()
#25 0x76F323A3 in C:\Windows\System32\USER32.dll: Ordinal2713()
#26 0x76F230B6 in C:\Windows\System32\USER32.dll: CallWindowProcW()
#27 0x76F224D2 in C:\Windows\System32\USER32.dll: MsgWaitForMultipleObjectsEx()
#28 0x76F27B01 in C:\Windows\System32\USER32.dll: EnumThreadWindows()
#29 0x76F587FE in C:\Windows\System32\USER32.dll: EndDialog()
#30 0x76F796D0 in C:\Windows\System32\USER32.dll: SoftModalMessageBox()
#31 0x76F78466 in C:\Windows\System32\USER32.dll: DrawStateW()
#32 0x76F78F67 in C:\Windows\System32\USER32.dll: MessageBoxTimeoutW()
#33 0x76F78FD5 in C:\Windows\System32\USER32.dll: MessageBoxW()
#34 0x0041AF10 in C:\pupach_MFTI\pupach_atom\stack\stack.exe: _ZN12_GLOBAL__N_12TX12txMessageBoxEPKcS2_j()
#35 0x0041ACA7 in C:\pupach_MFTI\pupach_atom\stack\stack.exe: _ZN12_GLOBAL__N_12TX15_txProcessErrorEPKciS2_jS2_Pc()
#36 0x00410DDE in C:\pupach_MFTI\pupach_atom\stack\stack.exe: _ZN12_GLOBAL__N_12TX8_txErrorEPKciS2_jS2_z()
#37 0x00412654 in C:\pupach_MFTI\pupach_atom\stack\stack.exe: _ZN12_GLOBAL__N_12TX17_txOnExceptionSEHEP19_EXCEPTION_POINTERSPKc()
#38 0x00411C44 in C:\pupach_MFTI\pupach_atom\stack\stack.exe: _ZN12_GLOBAL__N_12TX27_txVectoredExceptionHandlerEP19_EXCEPTION_POINTERS@4()
#39 0x7748FFFF in C:\Windows\SYSTEM32\ntdll.dll: LdrSetDllManifestProber()
#40 0x7748C727 in C:\Windows\SYSTEM32\ntdll.dll: RtlUnwind()
#41 0x77498756 in C:\Windows\SYSTEM32\ntdll.dll: KiUserExceptionDispatcher()
#42 0x7746CB02 in C:\Windows\SYSTEM32\ntdll.dll: RtlAllocateHeap()
#43 0x7746BAFE in C:\Windows\SYSTEM32\ntdll.dll: RtlAllocateHeap()
#44 0x75408995 in C:\Windows\System32\msvcrt.dll: realloc()
#45 0x7540806A in C:\Windows\System32\msvcrt.dll: calloc()
#46 0x6626DA84 in C:\Windows\MgwHelp32.dll: SymGetLineFromAddrW64()

--------------------------------------------------
Стек вызовов TX:

# 0 in int {anonymous}::TX::txMessageBox(const char*, const char*, unsigned int) at c:\program files\codeblocks\mingw\include\txlib.h (12715):

  12713: 
  12714: $   HWND wnd = _txCanvas_Window;
=>12715: $   int  ret = MessageBoxW ((wnd && IsWindowVisible (wnd))? wnd : _TX_CALL (Win32::GetConsoleWindow,()),
  12716:                             textW, headerW, flags | MB_SETFOREGROUND | MB_TOPMOST);
  12717: 

# 1 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

# 2 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\program files\codeblocks\mingw\include\txlib.h (11982):

  11980: $       bool                    inTX   = false;
  11981: 
=>11982:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  11983:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  11984: 

# 3 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11478):

  11476: $       unsigned err = GetLastError();
  11477: 
=>11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
  11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

# 4 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

# 5 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\program files\codeblocks\mingw\include\txlib.h (11982):

  11980: $       bool                    inTX   = false;
  11981: 
=>11982:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  11983:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  11984: 

# 6 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11478):

  11476: $       unsigned err = GetLastError();
  11477: 
=>11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
  11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

# 7 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

# 8 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

# 9 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#10 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#11 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#12 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#13 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#14 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#15 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#16 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#17 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#18 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#19 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#20 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#21 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#22 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#23 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#24 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#25 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#26 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#27 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#28 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#29 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#30 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#31 in bool {anonymous}::TX::_txCreateMiniDump(EXCEPTION_POINTERS*) at c:\program files\codeblocks\mingw\include\txlib.h (12420):

  12418: $   Win32::MINIDUMP_TYPE type = (Win32::MINIDUMP_TYPE) (Win32::MiniDumpWithIndirectlyReferencedMemory | Win32::MiniDumpScanMemory);
  12419: 
=>12420: $   bool ok = _TX_CALL (Win32::MiniDumpWriteDump, (GetCurrentProcess(), GetCurrentProcessId(), file, type,
  12421:                                                    ((exc)? &excInfo : NULL), NULL, NULL));
  12422: $   CloseHandle (file);

#32 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\program files\codeblocks\mingw\include\txlib.h (12028):

  12026: 
  12027:     #if !defined (_TX_NO_MINIDUMP)
=>12028: $   _txCreateMiniDump (exc);
  12029:     #endif
  12030: 

#33 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11478):

  11476: $       unsigned err = GetLastError();
  11477: 
=>11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
  11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#34 in int {anonymous}::TX::txSetLocale(int, const char*, const wchar_t*) at c:\program files\codeblocks\mingw\include\txlib.h (10442):

  10440: $   if (locale)
  10441:         {
=>10442: $       setlocale (LC_ALL,     locale);
  10443: $       setlocale (LC_NUMERIC, "C");              // Return to decimal point (3.14) instead of comma (3,14) in floating numbers
  10444:         }

#35 in void {anonymous}::TX::_txPauseBeforeTermination(HWND) at c:\program files\codeblocks\mingw\include\txlib.h (9190):

   9188: $   bool wine    = !!Win32::wine_get_version;
   9189: 
=> 9190: $   txSetLocale();
   9191: $   int attr = txSetConsoleAttr (FOREGROUND_LIGHTGRAY);
   9192: 

#36 in void {anonymous}::TX::_txCleanup() at c:\program files\codeblocks\mingw\include\txlib.h (9077):

   9075: $       if (console && isParentWaitable >= 0)
   9076:             {
=> 9077: $           _txPauseBeforeTermination (canvas);
   9078: $           paused = true;
   9079:             }

#37 in void {anonymous}::TX::_txOnCExit() at c:\program files\codeblocks\mingw\include\txlib.h (8903):

   8901:     OutputDebugString ("\n");
   8902: 
=> 8903: $5  _txCleanup();
   8904: 
   8905:     _TX_CALLv (Win32::_cexit, ());

--------------------------------------------------
Developed with:

The Dumb Artist Library (TX Library)
TXLib [Ver: 00173a, Rev: 172, Date: 2023-08-12 11:12:24 +0400]
Copyright (C) Ded (Ilya Dedinsky, http://txlib.ru) <mail@txlib.ru>
See license on: http://txlib.ru

TXLib file:	c:\program files\codeblocks\mingw\include\txlib.h
Compiled:	Sep 23 2023 16:50:28, GNU g++ 4.8.1, std=201103L, MinGW Runtime 3.20, 32-bit, DEBUG
Started:	Sep 23 2023 16:50:31

Run file:	C:\pupach_MFTI\pupach_atom\stack\stack.exe
Directory:	C:\pupach_MFTI\pupach_atom\stack

--------------------------------------------------

--------------------------------------------------
TXLib предупреждает:

Программа: C:\pupach_MFTI\pupach_atom\stack\stack.exe,

ВНЕЗАПНО: Нарушение доступа к памяти.

#16: Исключение EXCEPTION_ACCESS_VIOLATION (0xC0000005) при выполнении кода по адресу 0x7746F025 в функции RtlGetCurrentServiceSessionId(). Попытка прочесть данные по адресу 0xFFFFFFFF в модуле C:\Windows\SYSTEM32\ntdll.dll. Дополнительно, превышен лимит исключений _TX_EXCEPTIONS_LIMIT (16). Спасибо _txVectoredExceptionHandler(), что сообщил. Люблю его <3

#2: TXLib [Ver: 00173a, Rev: 172, Date: 2023-08-12 11:12:24 +0400], Instance: 0x005042FC (32-bit), Flags: Cmdre0, Thread: 0x342C (Main), GetLastError(): 8 (Not enough memory resources are available to process this command), errno: 12 (Visual C++ CRT: Not enough memory to complete call to strerror.). 

--------------------------------------------------
Стек вызовов:

# 0 0x7746F025 in C:\Windows\SYSTEM32\ntdll.dll: RtlGetCurrentServiceSessionId()
# 1 0x774AFC6D in C:\Windows\SYSTEM32\ntdll.dll: RtlRemovePropertyStore()
# 2 0x7746EBA6 in C:\Windows\SYSTEM32\ntdll.dll: RtlFreeHeap()
# 3 0x75408109 in C:\Windows\System32\msvcrt.dll: free()
# 4 0x75416608 in C:\Windows\System32\msvcrt.dll: __unguarded_readlc_active_add_func()
# 5 0x7541762D in C:\Windows\System32\msvcrt.dll: get_current_locale()
# 6 0x75417777 in C:\Windows\System32\msvcrt.dll: setlocale()
# 7 0x0040E220 in C:\pupach_MFTI\pupach_atom\stack\stack.exe: _ZN12_GLOBAL__N_12TX11txSetLocaleEiPKcPKw()
# 8 0x0041AA67 in C:\pupach_MFTI\pupach_atom\stack\stack.exe: _ZN12_GLOBAL__N_12TX15_txProcessErrorEPKciS2_jS2_Pc()
# 9 0x00410DDE in C:\pupach_MFTI\pupach_atom\stack\stack.exe: _ZN12_GLOBAL__N_12TX8_txErrorEPKciS2_jS2_z()
#10 0x0041252B in C:\pupach_MFTI\pupach_atom\stack\stack.exe: _ZN12_GLOBAL__N_12TX17_txOnExceptionSEHEP19_EXCEPTION_POINTERSPKc()
#11 0x00411C44 in C:\pupach_MFTI\pupach_atom\stack\stack.exe: _ZN12_GLOBAL__N_12TX27_txVectoredExceptionHandlerEP19_EXCEPTION_POINTERS@4()
#12 0x7748FFFF in C:\Windows\SYSTEM32\ntdll.dll: LdrSetDllManifestProber()
#13 0x7748C727 in C:\Windows\SYSTEM32\ntdll.dll: RtlUnwind()
#14 0x77498756 in C:\Windows\SYSTEM32\ntdll.dll: KiUserExceptionDispatcher()
#15 0x753FAB98 in C:\Windows\System32\msvcrt.dll: CxxThrowException()
#16 0x7778611A in C:\Windows\DbgHelp32.dll: MiniDumpReadDumpStream()
#17 0x7772DD3F in C:\Windows\DbgHelp32.dll: RemoveInvalidModuleList()
#18 0x7774C070 in C:\Windows\DbgHelp32.dll: ImagehlpApiVersionEx()
#19 0x7774ACDE in C:\Windows\DbgHelp32.dll: ImagehlpApiVersionEx()
#20 0x7774A985 in C:\Windows\DbgHelp32.dll: ImagehlpApiVersionEx()
#21 0x7774224A in C:\Windows\DbgHelp32.dll: SymEnumerateSymbolsW64()
#22 0x777458BA in C:\Windows\DbgHelp32.dll: SymFromInlineContext()
#23 0x7774590E in C:\Windows\DbgHelp32.dll: SymFromAddr()

--------------------------------------------------
Стек вызовов TX:

# 0 in int {anonymous}::TX::txSetLocale(int, const char*, const wchar_t*) at c:\program files\codeblocks\mingw\include\txlib.h (10442):

  10440: $   if (locale)
  10441:         {
=>10442: $       setlocale (LC_ALL,     locale);
  10443: $       setlocale (LC_NUMERIC, "C");              // Return to decimal point (3.14) instead of comma (3,14) in floating numbers
  10444:         }

# 1 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

# 2 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

# 3 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

# 4 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

# 5 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

# 6 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

# 7 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

# 8 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

# 9 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#10 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#11 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#12 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#13 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#14 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#15 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#16 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#17 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#18 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#19 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#20 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#21 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

--------------------------------------------------
Developed with:

The Dumb Artist Library (TX Library)
TXLib [Ver: 00173a, Rev: 172, Date: 2023-08-12 11:12:24 +0400]
Copyright (C) Ded (Ilya Dedinsky, http://txlib.ru) <mail@txlib.ru>
See license on: http://txlib.ru

TXLib file:	c:\program files\codeblocks\mingw\include\txlib.h
Compiled:	Sep 23 2023 16:51:10, GNU g++ 4.8.1, std=201103L, MinGW Runtime 3.20, 32-bit, DEBUG
Started:	Sep 23 2023 16:51:13

Run file:	C:\pupach_MFTI\pupach_atom\stack\stack.exe
Directory:	C:\pupach_MFTI\pupach_atom\stack

--------------------------------------------------

--------------------------------------------------
TXLib соболезнует...

Программа: C:\pupach_MFTI\pupach_atom\stack\stack.exe,

ВНЕЗАПНО: Нарушение доступа к памяти.

#16: Исключение EXCEPTION_ACCESS_VIOLATION (0xC0000005) при выполнении кода по адресу 0x7746F025 в функции RtlGetCurrentServiceSessionId(). Попытка прочесть данные по адресу 0xFFFFFFFF в модуле C:\Windows\SYSTEM32\ntdll.dll. Дополнительно, превышен лимит исключений _TX_EXCEPTIONS_LIMIT (16). Спасибо _txVectoredExceptionHandler(), что сообщил. Люблю его <3

С помощью функции _set_se_translator() вы можете сами обработать эту ошибку.

#3: TXLib [Ver: 00173a, Rev: 172, Date: 2023-08-12 11:12:24 +0400], Instance: 0x005042FC (32-bit), Flags: Cmdre0, Thread: 0x342C (Main), GetLastError(): 8 (Not enough memory resources are available to process this command), errno: 12 (Visual C++ CRT: Not enough memory to complete call to strerror.). 

--------------------------------------------------
Стек вызовов:

# 0 0x7746F025 in C:\Windows\SYSTEM32\ntdll.dll: RtlGetCurrentServiceSessionId()
# 1 0x774AFC6D in C:\Windows\SYSTEM32\ntdll.dll: RtlRemovePropertyStore()
# 2 0x7746EBA6 in C:\Windows\SYSTEM32\ntdll.dll: RtlFreeHeap()
# 3 0x75408109 in C:\Windows\System32\msvcrt.dll: free()
# 4 0x75416608 in C:\Windows\System32\msvcrt.dll: __unguarded_readlc_active_add_func()
# 5 0x7541762D in C:\Windows\System32\msvcrt.dll: get_current_locale()
# 6 0x75417777 in C:\Windows\System32\msvcrt.dll: setlocale()
# 7 0x0040E220 in C:\pupach_MFTI\pupach_atom\stack\stack.exe: _ZN12_GLOBAL__N_12TX11txSetLocaleEiPKcPKw()
# 8 0x0041AA67 in C:\pupach_MFTI\pupach_atom\stack\stack.exe: _ZN12_GLOBAL__N_12TX15_txProcessErrorEPKciS2_jS2_Pc()
# 9 0x00410DDE in C:\pupach_MFTI\pupach_atom\stack\stack.exe: _ZN12_GLOBAL__N_12TX8_txErrorEPKciS2_jS2_z()
#10 0x0041252B in C:\pupach_MFTI\pupach_atom\stack\stack.exe: _ZN12_GLOBAL__N_12TX17_txOnExceptionSEHEP19_EXCEPTION_POINTERSPKc()
#11 0x00411C44 in C:\pupach_MFTI\pupach_atom\stack\stack.exe: _ZN12_GLOBAL__N_12TX27_txVectoredExceptionHandlerEP19_EXCEPTION_POINTERS@4()
#12 0x7748FFFF in C:\Windows\SYSTEM32\ntdll.dll: LdrSetDllManifestProber()
#13 0x7748C727 in C:\Windows\SYSTEM32\ntdll.dll: RtlUnwind()
#14 0x77498756 in C:\Windows\SYSTEM32\ntdll.dll: KiUserExceptionDispatcher()
#15 0x753FAB98 in C:\Windows\System32\msvcrt.dll: CxxThrowException()
#16 0x7778611A in C:\Windows\DbgHelp32.dll: MiniDumpReadDumpStream()
#17 0x7772DD3F in C:\Windows\DbgHelp32.dll: RemoveInvalidModuleList()
#18 0x7774C070 in C:\Windows\DbgHelp32.dll: ImagehlpApiVersionEx()
#19 0x7774ACDE in C:\Windows\DbgHelp32.dll: ImagehlpApiVersionEx()
#20 0x7774A985 in C:\Windows\DbgHelp32.dll: ImagehlpApiVersionEx()
#21 0x7774224A in C:\Windows\DbgHelp32.dll: SymEnumerateSymbolsW64()
#22 0x777458BA in C:\Windows\DbgHelp32.dll: SymFromInlineContext()
#23 0x7774590E in C:\Windows\DbgHelp32.dll: SymFromAddr()

--------------------------------------------------
Стек вызовов TX:

# 0 in int {anonymous}::TX::txSetLocale(int, const char*, const wchar_t*) at c:\program files\codeblocks\mingw\include\txlib.h (10442):

  10440: $   if (locale)
  10441:         {
=>10442: $       setlocale (LC_ALL,     locale);
  10443: $       setlocale (LC_NUMERIC, "C");              // Return to decimal point (3.14) instead of comma (3,14) in floating numbers
  10444:         }

# 1 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

# 2 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

# 3 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

# 4 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

# 5 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

# 6 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

# 7 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

# 8 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

# 9 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#10 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#11 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#12 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#13 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#14 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#15 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#16 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#17 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#18 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#19 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#20 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#21 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

--------------------------------------------------
Developed with:

The Dumb Artist Library (TX Library)
TXLib [Ver: 00173a, Rev: 172, Date: 2023-08-12 11:12:24 +0400]
Copyright (C) Ded (Ilya Dedinsky, http://txlib.ru) <mail@txlib.ru>
See license on: http://txlib.ru

TXLib file:	c:\program files\codeblocks\mingw\include\txlib.h
Compiled:	Sep 23 2023 16:51:10, GNU g++ 4.8.1, std=201103L, MinGW Runtime 3.20, 32-bit, DEBUG
Started:	Sep 23 2023 16:51:12

Run file:	C:\pupach_MFTI\pupach_atom\stack\stack.exe
Directory:	C:\pupach_MFTI\pupach_atom\stack

--------------------------------------------------

--------------------------------------------------
TXLib предупреждает:

Программа: C:\pupach_MFTI\pupach_atom\stack\stack.exe,

ВНЕЗАПНО: Исключение С++, вызванное оператором throw.

#17: Исключение EXCEPTION_CPP_MSC (0xE06D7363) при выполнении кода по адресу 0x75838412 в функции RaiseException() в модуле C:\Windows\System32\KERNELBASE.dll. Дополнительно, превышен лимит исключений _TX_EXCEPTIONS_LIMIT (16). Спасибо _txVectoredExceptionHandler(), что сообщил. Люблю его <3

Ой, всё (EXCEPTION_NONCONTINUABLE).

#4: TXLib [Ver: 00173a, Rev: 172, Date: 2023-08-12 11:12:24 +0400], Instance: 0x005042FC (32-bit), Flags: Cmdre0, Thread: 0x342C (Main), GetLastError(): 8 (Not enough memory resources are available to process this command), errno: 12 (Visual C++ CRT: Not enough memory to complete call to strerror.). 

--------------------------------------------------
Стек вызовов:

# 0 0x75838412 in C:\Windows\System32\KERNELBASE.dll: RaiseException()
# 1 0x753FAB98 in C:\Windows\System32\msvcrt.dll: CxxThrowException()
# 6 0x7747E030 in C:\Windows\SYSTEM32\ntdll.dll: RtlUnlockHeap()
# 7 0x770B5E1C in C:\Windows\System32\win32u.dll: NtUserQueryInputContext()
# 8 0x75993E58 in C:\Windows\System32\IMM32.dll: ImmLockClientImc()
# 9 0x759928B5 in C:\Windows\System32\IMM32.dll: ImmDisableIme()
#10 0x759945D3 in C:\Windows\System32\IMM32.dll: ImmUnlockIMC()
#11 0x75992F06 in C:\Windows\System32\IMM32.dll: ImmSetActiveContext()
#12 0x76F26677 in C:\Windows\System32\USER32.dll: IsWindow()
#13 0x76F24651 in C:\Windows\System32\USER32.dll: GetWindowRect()
#14 0x76F241B2 in C:\Windows\System32\USER32.dll: GetWindowRect()
#15 0x76F23E5B in C:\Windows\System32\USER32.dll: GetWindowRect()
#16 0x76F323A3 in C:\Windows\System32\USER32.dll: Ordinal2713()
#17 0x76F230B6 in C:\Windows\System32\USER32.dll: CallWindowProcW()
#18 0x76F22B3A in C:\Windows\System32\USER32.dll: CallWindowProcW()
#19 0x76F2CA9F in C:\Windows\System32\USER32.dll: GetPropW()
#20 0x7749870D in C:\Windows\SYSTEM32\ntdll.dll: KiUserCallbackDispatcher()
#21 0x76F323A3 in C:\Windows\System32\USER32.dll: Ordinal2713()
#22 0x76F1FB28 in C:\Windows\System32\USER32.dll: MapWindowPoints()
#23 0x76F1EA8C in C:\Windows\System32\USER32.dll: MapWindowPoints()
#24 0x76F1E8ED in C:\Windows\System32\USER32.dll: MapWindowPoints()
#25 0x76F323A3 in C:\Windows\System32\USER32.dll: Ordinal2713()
#26 0x76F230B6 in C:\Windows\System32\USER32.dll: CallWindowProcW()
#27 0x76F224D2 in C:\Windows\System32\USER32.dll: MsgWaitForMultipleObjectsEx()
#28 0x76F27B01 in C:\Windows\System32\USER32.dll: EnumThreadWindows()
#29 0x76F587FE in C:\Windows\System32\USER32.dll: EndDialog()
#30 0x76F796D0 in C:\Windows\System32\USER32.dll: SoftModalMessageBox()
#31 0x76F78466 in C:\Windows\System32\USER32.dll: DrawStateW()
#32 0x76F78F67 in C:\Windows\System32\USER32.dll: MessageBoxTimeoutW()
#33 0x76F78FD5 in C:\Windows\System32\USER32.dll: MessageBoxW()
#34 0x0041AF10 in C:\pupach_MFTI\pupach_atom\stack\stack.exe: _ZN12_GLOBAL__N_12TX12txMessageBoxEPKcS2_j()
#35 0x0041ACA7 in C:\pupach_MFTI\pupach_atom\stack\stack.exe: _ZN12_GLOBAL__N_12TX15_txProcessErrorEPKciS2_jS2_Pc()
#36 0x00410DDE in C:\pupach_MFTI\pupach_atom\stack\stack.exe: _ZN12_GLOBAL__N_12TX8_txErrorEPKciS2_jS2_z()
#37 0x00412654 in C:\pupach_MFTI\pupach_atom\stack\stack.exe: _ZN12_GLOBAL__N_12TX17_txOnExceptionSEHEP19_EXCEPTION_POINTERSPKc()
#38 0x00411C44 in C:\pupach_MFTI\pupach_atom\stack\stack.exe: _ZN12_GLOBAL__N_12TX27_txVectoredExceptionHandlerEP19_EXCEPTION_POINTERS@4()
#39 0x7748FFFF in C:\Windows\SYSTEM32\ntdll.dll: LdrSetDllManifestProber()
#40 0x7748C727 in C:\Windows\SYSTEM32\ntdll.dll: RtlUnwind()
#41 0x77498756 in C:\Windows\SYSTEM32\ntdll.dll: KiUserExceptionDispatcher()
#42 0x774AFC6D in C:\Windows\SYSTEM32\ntdll.dll: RtlRemovePropertyStore()
#43 0x7746EBA6 in C:\Windows\SYSTEM32\ntdll.dll: RtlFreeHeap()
#44 0x75408109 in C:\Windows\System32\msvcrt.dll: free()
#45 0x75416608 in C:\Windows\System32\msvcrt.dll: __unguarded_readlc_active_add_func()
#46 0x7541762D in C:\Windows\System32\msvcrt.dll: get_current_locale()
#47 0x75417777 in C:\Windows\System32\msvcrt.dll: setlocale()
#48 0x0040E220 in C:\pupach_MFTI\pupach_atom\stack\stack.exe: _ZN12_GLOBAL__N_12TX11txSetLocaleEiPKcPKw()
#49 0x0041AA67 in C:\pupach_MFTI\pupach_atom\stack\stack.exe: _ZN12_GLOBAL__N_12TX15_txProcessErrorEPKciS2_jS2_Pc()
#50 0x00410DDE in C:\pupach_MFTI\pupach_atom\stack\stack.exe: _ZN12_GLOBAL__N_12TX8_txErrorEPKciS2_jS2_z()
#51 0x0041252B in C:\pupach_MFTI\pupach_atom\stack\stack.exe: _ZN12_GLOBAL__N_12TX17_txOnExceptionSEHEP19_EXCEPTION_POINTERSPKc()
#52 0x00411C44 in C:\pupach_MFTI\pupach_atom\stack\stack.exe: _ZN12_GLOBAL__N_12TX27_txVectoredExceptionHandlerEP19_EXCEPTION_POINTERS@4()
#53 0x7748FFFF in C:\Windows\SYSTEM32\ntdll.dll: LdrSetDllManifestProber()
#54 0x7748C727 in C:\Windows\SYSTEM32\ntdll.dll: RtlUnwind()
#55 0x77498756 in C:\Windows\SYSTEM32\ntdll.dll: KiUserExceptionDispatcher()
#56 0x753FAB98 in C:\Windows\System32\msvcrt.dll: CxxThrowException()
#57 0x7778611A in C:\Windows\DbgHelp32.dll: MiniDumpReadDumpStream()
#58 0x7772DD3F in C:\Windows\DbgHelp32.dll: RemoveInvalidModuleList()
#59 0x7774C070 in C:\Windows\DbgHelp32.dll: ImagehlpApiVersionEx()
#60 0x7774ACDE in C:\Windows\DbgHelp32.dll: ImagehlpApiVersionEx()
#61 0x7774A985 in C:\Windows\DbgHelp32.dll: ImagehlpApiVersionEx()

--------------------------------------------------
Стек вызовов TX:

# 0 in int {anonymous}::TX::txMessageBox(const char*, const char*, unsigned int) at c:\program files\codeblocks\mingw\include\txlib.h (12715):

  12713: 
  12714: $   HWND wnd = _txCanvas_Window;
=>12715: $   int  ret = MessageBoxW ((wnd && IsWindowVisible (wnd))? wnd : _TX_CALL (Win32::GetConsoleWindow,()),
  12716:                             textW, headerW, flags | MB_SETFOREGROUND | MB_TOPMOST);
  12717: 

# 1 in const char* {anonymous}::TX::_txProcessError(const char*, int, const char*, unsigned int, const char*, va_list) at c:\program files\codeblocks\mingw\include\txlib.h (12562):

  12560: 
  12561:     if (stkTrace && strstr (stkTrace, ".exe: "))
=>12562:         {$ fprintf (stderr,    "Стек вызовов:\n\n"
  12563:                                "%s\n\n"
  12564:                                "--------------------------------------------------\n",

# 2 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

# 3 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

# 4 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

# 5 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

# 6 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

# 7 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

# 8 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

# 9 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#10 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#11 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#12 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#13 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#14 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#15 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#16 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#17 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#18 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#19 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#20 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#21 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#22 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

--------------------------------------------------
Developed with:

The Dumb Artist Library (TX Library)
TXLib [Ver: 00173a, Rev: 172, Date: 2023-08-12 11:12:24 +0400]
Copyright (C) Ded (Ilya Dedinsky, http://txlib.ru) <mail@txlib.ru>
See license on: http://txlib.ru

TXLib file:	c:\program files\codeblocks\mingw\include\txlib.h
Compiled:	Sep 23 2023 16:51:10, GNU g++ 4.8.1, std=201103L, MinGW Runtime 3.20, 32-bit, DEBUG
Started:	Sep 23 2023 16:51:13

Run file:	C:\pupach_MFTI\pupach_atom\stack\stack.exe
Directory:	C:\pupach_MFTI\pupach_atom\stack

--------------------------------------------------

--------------------------------------------------
TXLib соболезнует...

Программа: C:\pupach_MFTI\pupach_atom\stack\stack.exe,

ВНЕЗАПНО: Исключение С++, вызванное оператором throw.

#17: Исключение EXCEPTION_CPP_MSC (0xE06D7363) при выполнении кода по адресу 0x75838412 в функции RaiseException() в модуле C:\Windows\System32\KERNELBASE.dll. Дополнительно, превышен лимит исключений _TX_EXCEPTIONS_LIMIT (16). Спасибо _txVectoredExceptionHandler(), что сообщил. Люблю его <3

Ой, всё (EXCEPTION_NONCONTINUABLE).

С помощью функции _set_se_translator() вы можете сами обработать эту ошибку.

#5: TXLib [Ver: 00173a, Rev: 172, Date: 2023-08-12 11:12:24 +0400], Instance: 0x005042FC (32-bit), Flags: Cmdre0, Thread: 0x342C (Main), GetLastError(): 8 (Not enough memory resources are available to process this command), errno: 12 (Visual C++ CRT: Not enough memory to complete call to strerror.). 

--------------------------------------------------
Стек вызовов:

# 0 0x75838412 in C:\Windows\System32\KERNELBASE.dll: RaiseException()
# 1 0x753FAB98 in C:\Windows\System32\msvcrt.dll: CxxThrowException()
# 6 0x7747E030 in C:\Windows\SYSTEM32\ntdll.dll: RtlUnlockHeap()
# 7 0x770B5E1C in C:\Windows\System32\win32u.dll: NtUserQueryInputContext()
# 8 0x75993E58 in C:\Windows\System32\IMM32.dll: ImmLockClientImc()
# 9 0x759928B5 in C:\Windows\System32\IMM32.dll: ImmDisableIme()
#10 0x759945D3 in C:\Windows\System32\IMM32.dll: ImmUnlockIMC()
#11 0x75992F06 in C:\Windows\System32\IMM32.dll: ImmSetActiveContext()
#12 0x76F26677 in C:\Windows\System32\USER32.dll: IsWindow()
#13 0x76F24651 in C:\Windows\System32\USER32.dll: GetWindowRect()
#14 0x76F241B2 in C:\Windows\System32\USER32.dll: GetWindowRect()
#15 0x76F23E5B in C:\Windows\System32\USER32.dll: GetWindowRect()
#16 0x76F323A3 in C:\Windows\System32\USER32.dll: Ordinal2713()
#17 0x76F230B6 in C:\Windows\System32\USER32.dll: CallWindowProcW()
#18 0x76F22B3A in C:\Windows\System32\USER32.dll: CallWindowProcW()
#19 0x76F2CA9F in C:\Windows\System32\USER32.dll: GetPropW()
#20 0x7749870D in C:\Windows\SYSTEM32\ntdll.dll: KiUserCallbackDispatcher()
#21 0x76F323A3 in C:\Windows\System32\USER32.dll: Ordinal2713()
#22 0x76F1FB28 in C:\Windows\System32\USER32.dll: MapWindowPoints()
#23 0x76F1EA8C in C:\Windows\System32\USER32.dll: MapWindowPoints()
#24 0x76F1E8ED in C:\Windows\System32\USER32.dll: MapWindowPoints()
#25 0x76F323A3 in C:\Windows\System32\USER32.dll: Ordinal2713()
#26 0x76F230B6 in C:\Windows\System32\USER32.dll: CallWindowProcW()
#27 0x76F224D2 in C:\Windows\System32\USER32.dll: MsgWaitForMultipleObjectsEx()
#28 0x76F27B01 in C:\Windows\System32\USER32.dll: EnumThreadWindows()
#29 0x76F587FE in C:\Windows\System32\USER32.dll: EndDialog()
#30 0x76F796D0 in C:\Windows\System32\USER32.dll: SoftModalMessageBox()
#31 0x76F78466 in C:\Windows\System32\USER32.dll: DrawStateW()
#32 0x76F78F67 in C:\Windows\System32\USER32.dll: MessageBoxTimeoutW()
#33 0x76F78FD5 in C:\Windows\System32\USER32.dll: MessageBoxW()
#34 0x0041AF10 in C:\pupach_MFTI\pupach_atom\stack\stack.exe: _ZN12_GLOBAL__N_12TX12txMessageBoxEPKcS2_j()
#35 0x0041ACA7 in C:\pupach_MFTI\pupach_atom\stack\stack.exe: _ZN12_GLOBAL__N_12TX15_txProcessErrorEPKciS2_jS2_Pc()
#36 0x00410DDE in C:\pupach_MFTI\pupach_atom\stack\stack.exe: _ZN12_GLOBAL__N_12TX8_txErrorEPKciS2_jS2_z()
#37 0x00412654 in C:\pupach_MFTI\pupach_atom\stack\stack.exe: _ZN12_GLOBAL__N_12TX17_txOnExceptionSEHEP19_EXCEPTION_POINTERSPKc()
#38 0x00411C44 in C:\pupach_MFTI\pupach_atom\stack\stack.exe: _ZN12_GLOBAL__N_12TX27_txVectoredExceptionHandlerEP19_EXCEPTION_POINTERS@4()
#39 0x7748FFFF in C:\Windows\SYSTEM32\ntdll.dll: LdrSetDllManifestProber()
#40 0x7748C727 in C:\Windows\SYSTEM32\ntdll.dll: RtlUnwind()
#41 0x77498756 in C:\Windows\SYSTEM32\ntdll.dll: KiUserExceptionDispatcher()
#42 0x774AFC6D in C:\Windows\SYSTEM32\ntdll.dll: RtlRemovePropertyStore()
#43 0x7746EBA6 in C:\Windows\SYSTEM32\ntdll.dll: RtlFreeHeap()
#44 0x75408109 in C:\Windows\System32\msvcrt.dll: free()
#45 0x75416608 in C:\Windows\System32\msvcrt.dll: __unguarded_readlc_active_add_func()
#46 0x7541762D in C:\Windows\System32\msvcrt.dll: get_current_locale()
#47 0x75417777 in C:\Windows\System32\msvcrt.dll: setlocale()
#48 0x0040E220 in C:\pupach_MFTI\pupach_atom\stack\stack.exe: _ZN12_GLOBAL__N_12TX11txSetLocaleEiPKcPKw()
#49 0x0041AA67 in C:\pupach_MFTI\pupach_atom\stack\stack.exe: _ZN12_GLOBAL__N_12TX15_txProcessErrorEPKciS2_jS2_Pc()
#50 0x00410DDE in C:\pupach_MFTI\pupach_atom\stack\stack.exe: _ZN12_GLOBAL__N_12TX8_txErrorEPKciS2_jS2_z()
#51 0x0041252B in C:\pupach_MFTI\pupach_atom\stack\stack.exe: _ZN12_GLOBAL__N_12TX17_txOnExceptionSEHEP19_EXCEPTION_POINTERSPKc()
#52 0x00411C44 in C:\pupach_MFTI\pupach_atom\stack\stack.exe: _ZN12_GLOBAL__N_12TX27_txVectoredExceptionHandlerEP19_EXCEPTION_POINTERS@4()
#53 0x7748FFFF in C:\Windows\SYSTEM32\ntdll.dll: LdrSetDllManifestProber()
#54 0x7748C727 in C:\Windows\SYSTEM32\ntdll.dll: RtlUnwind()
#55 0x77498756 in C:\Windows\SYSTEM32\ntdll.dll: KiUserExceptionDispatcher()
#56 0x753FAB98 in C:\Windows\System32\msvcrt.dll: CxxThrowException()
#57 0x7778611A in C:\Windows\DbgHelp32.dll: MiniDumpReadDumpStream()
#58 0x7772DD3F in C:\Windows\DbgHelp32.dll: RemoveInvalidModuleList()
#59 0x7774C070 in C:\Windows\DbgHelp32.dll: ImagehlpApiVersionEx()
#60 0x7774ACDE in C:\Windows\DbgHelp32.dll: ImagehlpApiVersionEx()
#61 0x7774A985 in C:\Windows\DbgHelp32.dll: ImagehlpApiVersionEx()

--------------------------------------------------
Стек вызовов TX:

# 0 in int {anonymous}::TX::txMessageBox(const char*, const char*, unsigned int) at c:\program files\codeblocks\mingw\include\txlib.h (12715):

  12713: 
  12714: $   HWND wnd = _txCanvas_Window;
=>12715: $   int  ret = MessageBoxW ((wnd && IsWindowVisible (wnd))? wnd : _TX_CALL (Win32::GetConsoleWindow,()),
  12716:                             textW, headerW, flags | MB_SETFOREGROUND | MB_TOPMOST);
  12717: 

# 1 in const char* {anonymous}::TX::_txProcessError(const char*, int, const char*, unsigned int, const char*, va_list) at c:\program files\codeblocks\mingw\include\txlib.h (12562):

  12560: 
  12561:     if (stkTrace && strstr (stkTrace, ".exe: "))
=>12562:         {$ fprintf (stderr,    "Стек вызовов:\n\n"
  12563:                                "%s\n\n"
  12564:                                "--------------------------------------------------\n",

# 2 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

# 3 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

# 4 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

# 5 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

# 6 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

# 7 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

# 8 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

# 9 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#10 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#11 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#12 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#13 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#14 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#15 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#16 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#17 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#18 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#19 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#20 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#21 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#22 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

--------------------------------------------------
Developed with:

The Dumb Artist Library (TX Library)
TXLib [Ver: 00173a, Rev: 172, Date: 2023-08-12 11:12:24 +0400]
Copyright (C) Ded (Ilya Dedinsky, http://txlib.ru) <mail@txlib.ru>
See license on: http://txlib.ru

TXLib file:	c:\program files\codeblocks\mingw\include\txlib.h
Compiled:	Sep 23 2023 16:51:10, GNU g++ 4.8.1, std=201103L, MinGW Runtime 3.20, 32-bit, DEBUG
Started:	Sep 23 2023 16:51:13

Run file:	C:\pupach_MFTI\pupach_atom\stack\stack.exe
Directory:	C:\pupach_MFTI\pupach_atom\stack

--------------------------------------------------

--------------------------------------------------
TXLib предупреждает:

Программа: C:\pupach_MFTI\pupach_atom\stack\stack.exe,

ВНЕЗАПНО: Нарушение доступа к памяти.

#21: Исключение EXCEPTION_ACCESS_VIOLATION (0xC0000005) при выполнении кода по адресу 0x7746D5AA в функции RtlAllocateHeap(). Попытка прочесть данные по адресу 0xFFFFFFFF в модуле C:\Windows\SYSTEM32\ntdll.dll. Дополнительно, превышен лимит исключений _TX_EXCEPTIONS_LIMIT (16). Также превышен лимит фатальных исключений _TX_FATAL_EXCEPTIONS_LIMIT (16). Спасибо _txVectoredExceptionHandler(), что сообщил. Люблю его <3

#1: TXLib [Ver: 00173a, Rev: 172, Date: 2023-08-12 11:12:24 +0400], Instance: 0x005042FC (32-bit), Flags: Cmdre0, Thread: 0x3808 (Main), errno: 12 (Visual C++ CRT: Not enough memory to complete call to strerror.). 

--------------------------------------------------
Стек вызовов:

# 0 0x7746D5AA in C:\Windows\SYSTEM32\ntdll.dll: RtlAllocateHeap()
# 1 0x7746CB02 in C:\Windows\SYSTEM32\ntdll.dll: RtlAllocateHeap()
# 2 0x7746BAFE in C:\Windows\SYSTEM32\ntdll.dll: RtlAllocateHeap()
# 3 0x75408995 in C:\Windows\System32\msvcrt.dll: realloc()
# 4 0x7540806A in C:\Windows\System32\msvcrt.dll: calloc()
# 5 0x6626DA84 in C:\Windows\MgwHelp32.dll: SymGetLineFromAddrW64()

--------------------------------------------------
Стек вызовов TX:

# 0 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

# 1 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\program files\codeblocks\mingw\include\txlib.h (11982):

  11980: $       bool                    inTX   = false;
  11981: 
=>11982:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  11983:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  11984: 

# 2 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11478):

  11476: $       unsigned err = GetLastError();
  11477: 
=>11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
  11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

# 3 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

# 4 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\program files\codeblocks\mingw\include\txlib.h (11982):

  11980: $       bool                    inTX   = false;
  11981: 
=>11982:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  11983:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  11984: 

# 5 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11478):

  11476: $       unsigned err = GetLastError();
  11477: 
=>11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
  11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

# 6 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

# 7 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

# 8 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

# 9 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#10 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#11 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#12 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#13 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#14 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#15 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#16 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#17 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#18 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#19 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#20 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#21 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#22 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#23 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#24 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#25 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#26 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#27 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#28 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#29 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#30 in bool {anonymous}::TX::_txCreateMiniDump(EXCEPTION_POINTERS*) at c:\program files\codeblocks\mingw\include\txlib.h (12420):

  12418: $   Win32::MINIDUMP_TYPE type = (Win32::MINIDUMP_TYPE) (Win32::MiniDumpWithIndirectlyReferencedMemory | Win32::MiniDumpScanMemory);
  12419: 
=>12420: $   bool ok = _TX_CALL (Win32::MiniDumpWriteDump, (GetCurrentProcess(), GetCurrentProcessId(), file, type,
  12421:                                                    ((exc)? &excInfo : NULL), NULL, NULL));
  12422: $   CloseHandle (file);

#31 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\program files\codeblocks\mingw\include\txlib.h (12028):

  12026: 
  12027:     #if !defined (_TX_NO_MINIDUMP)
=>12028: $   _txCreateMiniDump (exc);
  12029:     #endif
  12030: 

#32 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11478):

  11476: $       unsigned err = GetLastError();
  11477: 
=>11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
  11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#33 in int {anonymous}::TX::txSetLocale(int, const char*, const wchar_t*) at c:\program files\codeblocks\mingw\include\txlib.h (10442):

  10440: $   if (locale)
  10441:         {
=>10442: $       setlocale (LC_ALL,     locale);
  10443: $       setlocale (LC_NUMERIC, "C");              // Return to decimal point (3.14) instead of comma (3,14) in floating numbers
  10444:         }

#34 in void {anonymous}::TX::_txPauseBeforeTermination(HWND) at c:\program files\codeblocks\mingw\include\txlib.h (9190):

   9188: $   bool wine    = !!Win32::wine_get_version;
   9189: 
=> 9190: $   txSetLocale();
   9191: $   int attr = txSetConsoleAttr (FOREGROUND_LIGHTGRAY);
   9192: 

#35 in void {anonymous}::TX::_txCleanup() at c:\program files\codeblocks\mingw\include\txlib.h (9077):

   9075: $       if (console && isParentWaitable >= 0)
   9076:             {
=> 9077: $           _txPauseBeforeTermination (canvas);
   9078: $           paused = true;
   9079:             }

#36 in void {anonymous}::TX::_txOnCExit() at c:\program files\codeblocks\mingw\include\txlib.h (8903):

   8901:     OutputDebugString ("\n");
   8902: 
=> 8903: $5  _txCleanup();
   8904: 
   8905:     _TX_CALLv (Win32::_cexit, ());

--------------------------------------------------
Developed with:

The Dumb Artist Library (TX Library)
TXLib [Ver: 00173a, Rev: 172, Date: 2023-08-12 11:12:24 +0400]
Copyright (C) Ded (Ilya Dedinsky, http://txlib.ru) <mail@txlib.ru>
See license on: http://txlib.ru

TXLib file:	c:\program files\codeblocks\mingw\include\txlib.h
Compiled:	Sep 23 2023 16:52:01, GNU g++ 4.8.1, std=201103L, MinGW Runtime 3.20, 32-bit, DEBUG
Started:	Sep 23 2023 16:52:04

Run file:	C:\pupach_MFTI\pupach_atom\stack\stack.exe
Directory:	C:\pupach_MFTI\pupach_atom\stack

--------------------------------------------------

--------------------------------------------------
TXLib соболезнует...

Программа: C:\pupach_MFTI\pupach_atom\stack\stack.exe,

ВНЕЗАПНО: Нарушение доступа к памяти.

#21: Исключение EXCEPTION_ACCESS_VIOLATION (0xC0000005) при выполнении кода по адресу 0x7746D5AA в функции RtlAllocateHeap(). Попытка прочесть данные по адресу 0xFFFFFFFF в модуле C:\Windows\SYSTEM32\ntdll.dll. Дополнительно, превышен лимит исключений _TX_EXCEPTIONS_LIMIT (16). Также превышен лимит фатальных исключений _TX_FATAL_EXCEPTIONS_LIMIT (16). Спасибо _txVectoredExceptionHandler(), что сообщил. Люблю его <3

С помощью функции _set_se_translator() вы можете сами обработать эту ошибку.

#2: TXLib [Ver: 00173a, Rev: 172, Date: 2023-08-12 11:12:24 +0400], Instance: 0x005042FC (32-bit), Flags: Cmdre0, Thread: 0x3808 (Main), errno: 12 (Visual C++ CRT: Not enough memory to complete call to strerror.). 

--------------------------------------------------
Стек вызовов:

# 0 0x7746D5AA in C:\Windows\SYSTEM32\ntdll.dll: RtlAllocateHeap()
# 1 0x7746CB02 in C:\Windows\SYSTEM32\ntdll.dll: RtlAllocateHeap()
# 2 0x7746BAFE in C:\Windows\SYSTEM32\ntdll.dll: RtlAllocateHeap()
# 3 0x75408995 in C:\Windows\System32\msvcrt.dll: realloc()
# 4 0x7540806A in C:\Windows\System32\msvcrt.dll: calloc()
# 5 0x6626DA84 in C:\Windows\MgwHelp32.dll: SymGetLineFromAddrW64()

--------------------------------------------------
Стек вызовов TX:

# 0 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

# 1 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\program files\codeblocks\mingw\include\txlib.h (11982):

  11980: $       bool                    inTX   = false;
  11981: 
=>11982:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  11983:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  11984: 

# 2 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11478):

  11476: $       unsigned err = GetLastError();
  11477: 
=>11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
  11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

# 3 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

# 4 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\program files\codeblocks\mingw\include\txlib.h (11982):

  11980: $       bool                    inTX   = false;
  11981: 
=>11982:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  11983:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  11984: 

# 5 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11478):

  11476: $       unsigned err = GetLastError();
  11477: 
=>11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
  11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

# 6 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

# 7 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

# 8 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

# 9 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#10 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#11 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#12 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#13 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#14 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#15 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#16 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#17 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#18 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#19 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#20 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#21 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#22 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#23 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#24 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#25 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#26 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#27 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#28 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#29 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#30 in bool {anonymous}::TX::_txCreateMiniDump(EXCEPTION_POINTERS*) at c:\program files\codeblocks\mingw\include\txlib.h (12420):

  12418: $   Win32::MINIDUMP_TYPE type = (Win32::MINIDUMP_TYPE) (Win32::MiniDumpWithIndirectlyReferencedMemory | Win32::MiniDumpScanMemory);
  12419: 
=>12420: $   bool ok = _TX_CALL (Win32::MiniDumpWriteDump, (GetCurrentProcess(), GetCurrentProcessId(), file, type,
  12421:                                                    ((exc)? &excInfo : NULL), NULL, NULL));
  12422: $   CloseHandle (file);

#31 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\program files\codeblocks\mingw\include\txlib.h (12028):

  12026: 
  12027:     #if !defined (_TX_NO_MINIDUMP)
=>12028: $   _txCreateMiniDump (exc);
  12029:     #endif
  12030: 

#32 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11478):

  11476: $       unsigned err = GetLastError();
  11477: 
=>11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
  11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#33 in int {anonymous}::TX::txSetLocale(int, const char*, const wchar_t*) at c:\program files\codeblocks\mingw\include\txlib.h (10442):

  10440: $   if (locale)
  10441:         {
=>10442: $       setlocale (LC_ALL,     locale);
  10443: $       setlocale (LC_NUMERIC, "C");              // Return to decimal point (3.14) instead of comma (3,14) in floating numbers
  10444:         }

#34 in void {anonymous}::TX::_txPauseBeforeTermination(HWND) at c:\program files\codeblocks\mingw\include\txlib.h (9190):

   9188: $   bool wine    = !!Win32::wine_get_version;
   9189: 
=> 9190: $   txSetLocale();
   9191: $   int attr = txSetConsoleAttr (FOREGROUND_LIGHTGRAY);
   9192: 

#35 in void {anonymous}::TX::_txCleanup() at c:\program files\codeblocks\mingw\include\txlib.h (9077):

   9075: $       if (console && isParentWaitable >= 0)
   9076:             {
=> 9077: $           _txPauseBeforeTermination (canvas);
   9078: $           paused = true;
   9079:             }

#36 in void {anonymous}::TX::_txOnCExit() at c:\program files\codeblocks\mingw\include\txlib.h (8903):

   8901:     OutputDebugString ("\n");
   8902: 
=> 8903: $5  _txCleanup();
   8904: 
   8905:     _TX_CALLv (Win32::_cexit, ());

--------------------------------------------------
Developed with:

The Dumb Artist Library (TX Library)
TXLib [Ver: 00173a, Rev: 172, Date: 2023-08-12 11:12:24 +0400]
Copyright (C) Ded (Ilya Dedinsky, http://txlib.ru) <mail@txlib.ru>
See license on: http://txlib.ru

TXLib file:	c:\program files\codeblocks\mingw\include\txlib.h
Compiled:	Sep 23 2023 16:52:01, GNU g++ 4.8.1, std=201103L, MinGW Runtime 3.20, 32-bit, DEBUG
Started:	Sep 23 2023 16:52:04

Run file:	C:\pupach_MFTI\pupach_atom\stack\stack.exe
Directory:	C:\pupach_MFTI\pupach_atom\stack

--------------------------------------------------

--------------------------------------------------
TXLib предупреждает:

Программа: C:\pupach_MFTI\pupach_atom\stack\stack.exe,

ВНЕЗАПНО: Исключение С++, вызванное оператором throw.

#22: Исключение EXCEPTION_CPP_MSC (0xE06D7363) при выполнении кода по адресу 0x75838412 в функции RaiseException() в модуле C:\Windows\System32\KERNELBASE.dll. Дополнительно, превышен лимит исключений _TX_EXCEPTIONS_LIMIT (16). Также превышен лимит фатальных исключений _TX_FATAL_EXCEPTIONS_LIMIT (16). Спасибо _txVectoredExceptionHandler(), что сообщил. Люблю его <3

Ой, всё (EXCEPTION_NONCONTINUABLE).

#3: TXLib [Ver: 00173a, Rev: 172, Date: 2023-08-12 11:12:24 +0400], Instance: 0x005042FC (32-bit), Flags: Cmdre0, Thread: 0x3808 (Main), GetLastError(): 8 (Not enough memory resources are available to process this command), errno: 12 (Visual C++ CRT: Not enough memory to complete call to strerror.). 

--------------------------------------------------
Стек вызовов:

# 0 0x75838412 in C:\Windows\System32\KERNELBASE.dll: RaiseException()
# 1 0x753FAB98 in C:\Windows\System32\msvcrt.dll: CxxThrowException()
# 6 0x7747E030 in C:\Windows\SYSTEM32\ntdll.dll: RtlUnlockHeap()
# 7 0x770B5E1C in C:\Windows\System32\win32u.dll: NtUserQueryInputContext()

--------------------------------------------------
Стек вызовов TX:

# 0 in int {anonymous}::TX::txMessageBox(const char*, const char*, unsigned int) at c:\program files\codeblocks\mingw\include\txlib.h (12715):

  12713: 
  12714: $   HWND wnd = _txCanvas_Window;
=>12715: $   int  ret = MessageBoxW ((wnd && IsWindowVisible (wnd))? wnd : _TX_CALL (Win32::GetConsoleWindow,()),
  12716:                             textW, headerW, flags | MB_SETFOREGROUND | MB_TOPMOST);
  12717: 

# 1 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

# 2 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\program files\codeblocks\mingw\include\txlib.h (11982):

  11980: $       bool                    inTX   = false;
  11981: 
=>11982:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  11983:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  11984: 

# 3 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11478):

  11476: $       unsigned err = GetLastError();
  11477: 
=>11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
  11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

# 4 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

# 5 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\program files\codeblocks\mingw\include\txlib.h (11982):

  11980: $       bool                    inTX   = false;
  11981: 
=>11982:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  11983:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  11984: 

# 6 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11478):

  11476: $       unsigned err = GetLastError();
  11477: 
=>11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
  11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

# 7 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

# 8 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

# 9 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#10 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#11 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#12 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#13 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#14 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#15 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#16 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#17 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#18 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#19 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#20 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#21 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#22 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#23 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#24 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#25 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#26 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#27 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#28 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#29 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#30 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#31 in bool {anonymous}::TX::_txCreateMiniDump(EXCEPTION_POINTERS*) at c:\program files\codeblocks\mingw\include\txlib.h (12420):

  12418: $   Win32::MINIDUMP_TYPE type = (Win32::MINIDUMP_TYPE) (Win32::MiniDumpWithIndirectlyReferencedMemory | Win32::MiniDumpScanMemory);
  12419: 
=>12420: $   bool ok = _TX_CALL (Win32::MiniDumpWriteDump, (GetCurrentProcess(), GetCurrentProcessId(), file, type,
  12421:                                                    ((exc)? &excInfo : NULL), NULL, NULL));
  12422: $   CloseHandle (file);

#32 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\program files\codeblocks\mingw\include\txlib.h (12028):

  12026: 
  12027:     #if !defined (_TX_NO_MINIDUMP)
=>12028: $   _txCreateMiniDump (exc);
  12029:     #endif
  12030: 

#33 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11478):

  11476: $       unsigned err = GetLastError();
  11477: 
=>11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
  11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#34 in int {anonymous}::TX::txSetLocale(int, const char*, const wchar_t*) at c:\program files\codeblocks\mingw\include\txlib.h (10442):

  10440: $   if (locale)
  10441:         {
=>10442: $       setlocale (LC_ALL,     locale);
  10443: $       setlocale (LC_NUMERIC, "C");              // Return to decimal point (3.14) instead of comma (3,14) in floating numbers
  10444:         }

#35 in void {anonymous}::TX::_txPauseBeforeTermination(HWND) at c:\program files\codeblocks\mingw\include\txlib.h (9190):

   9188: $   bool wine    = !!Win32::wine_get_version;
   9189: 
=> 9190: $   txSetLocale();
   9191: $   int attr = txSetConsoleAttr (FOREGROUND_LIGHTGRAY);
   9192: 

#36 in void {anonymous}::TX::_txCleanup() at c:\program files\codeblocks\mingw\include\txlib.h (9077):

   9075: $       if (console && isParentWaitable >= 0)
   9076:             {
=> 9077: $           _txPauseBeforeTermination (canvas);
   9078: $           paused = true;
   9079:             }

#37 in void {anonymous}::TX::_txOnCExit() at c:\program files\codeblocks\mingw\include\txlib.h (8903):

   8901:     OutputDebugString ("\n");
   8902: 
=> 8903: $5  _txCleanup();
   8904: 
   8905:     _TX_CALLv (Win32::_cexit, ());

--------------------------------------------------
Developed with:

The Dumb Artist Library (TX Library)
TXLib [Ver: 00173a, Rev: 172, Date: 2023-08-12 11:12:24 +0400]
Copyright (C) Ded (Ilya Dedinsky, http://txlib.ru) <mail@txlib.ru>
See license on: http://txlib.ru

TXLib file:	c:\program files\codeblocks\mingw\include\txlib.h
Compiled:	Sep 23 2023 16:52:01, GNU g++ 4.8.1, std=201103L, MinGW Runtime 3.20, 32-bit, DEBUG
Started:	Sep 23 2023 16:52:04

Run file:	C:\pupach_MFTI\pupach_atom\stack\stack.exe
Directory:	C:\pupach_MFTI\pupach_atom\stack

--------------------------------------------------

--------------------------------------------------
TXLib соболезнует...

Программа: C:\pupach_MFTI\pupach_atom\stack\stack.exe,

ВНЕЗАПНО: Исключение С++, вызванное оператором throw.

#22: Исключение EXCEPTION_CPP_MSC (0xE06D7363) при выполнении кода по адресу 0x75838412 в функции RaiseException() в модуле C:\Windows\System32\KERNELBASE.dll. Дополнительно, превышен лимит исключений _TX_EXCEPTIONS_LIMIT (16). Также превышен лимит фатальных исключений _TX_FATAL_EXCEPTIONS_LIMIT (16). Спасибо _txVectoredExceptionHandler(), что сообщил. Люблю его <3

Ой, всё (EXCEPTION_NONCONTINUABLE).

С помощью функции _set_se_translator() вы можете сами обработать эту ошибку.

#4: TXLib [Ver: 00173a, Rev: 172, Date: 2023-08-12 11:12:24 +0400], Instance: 0x005042FC (32-bit), Flags: Cmdre0, Thread: 0x3808 (Main), GetLastError(): 8 (Not enough memory resources are available to process this command), errno: 12 (Visual C++ CRT: Not enough memory to complete call to strerror.). 

--------------------------------------------------
Стек вызовов:

# 0 0x75838412 in C:\Windows\System32\KERNELBASE.dll: RaiseException()
# 1 0x753FAB98 in C:\Windows\System32\msvcrt.dll: CxxThrowException()
# 6 0x7747E030 in C:\Windows\SYSTEM32\ntdll.dll: RtlUnlockHeap()
# 7 0x770B5E1C in C:\Windows\System32\win32u.dll: NtUserQueryInputContext()

--------------------------------------------------
Стек вызовов TX:

# 0 in int {anonymous}::TX::txMessageBox(const char*, const char*, unsigned int) at c:\program files\codeblocks\mingw\include\txlib.h (12715):

  12713: 
  12714: $   HWND wnd = _txCanvas_Window;
=>12715: $   int  ret = MessageBoxW ((wnd && IsWindowVisible (wnd))? wnd : _TX_CALL (Win32::GetConsoleWindow,()),
  12716:                             textW, headerW, flags | MB_SETFOREGROUND | MB_TOPMOST);
  12717: 

# 1 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

# 2 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\program files\codeblocks\mingw\include\txlib.h (11982):

  11980: $       bool                    inTX   = false;
  11981: 
=>11982:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  11983:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  11984: 

# 3 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11478):

  11476: $       unsigned err = GetLastError();
  11477: 
=>11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
  11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

# 4 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

# 5 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\program files\codeblocks\mingw\include\txlib.h (11982):

  11980: $       bool                    inTX   = false;
  11981: 
=>11982:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  11983:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  11984: 

# 6 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11478):

  11476: $       unsigned err = GetLastError();
  11477: 
=>11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
  11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

# 7 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

# 8 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

# 9 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#10 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#11 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#12 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#13 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#14 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#15 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#16 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#17 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#18 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#19 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#20 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#21 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#22 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#23 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#24 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#25 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#26 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#27 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#28 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#29 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#30 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#31 in bool {anonymous}::TX::_txCreateMiniDump(EXCEPTION_POINTERS*) at c:\program files\codeblocks\mingw\include\txlib.h (12420):

  12418: $   Win32::MINIDUMP_TYPE type = (Win32::MINIDUMP_TYPE) (Win32::MiniDumpWithIndirectlyReferencedMemory | Win32::MiniDumpScanMemory);
  12419: 
=>12420: $   bool ok = _TX_CALL (Win32::MiniDumpWriteDump, (GetCurrentProcess(), GetCurrentProcessId(), file, type,
  12421:                                                    ((exc)? &excInfo : NULL), NULL, NULL));
  12422: $   CloseHandle (file);

#32 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\program files\codeblocks\mingw\include\txlib.h (12028):

  12026: 
  12027:     #if !defined (_TX_NO_MINIDUMP)
=>12028: $   _txCreateMiniDump (exc);
  12029:     #endif
  12030: 

#33 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11478):

  11476: $       unsigned err = GetLastError();
  11477: 
=>11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
  11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#34 in int {anonymous}::TX::txSetLocale(int, const char*, const wchar_t*) at c:\program files\codeblocks\mingw\include\txlib.h (10442):

  10440: $   if (locale)
  10441:         {
=>10442: $       setlocale (LC_ALL,     locale);
  10443: $       setlocale (LC_NUMERIC, "C");              // Return to decimal point (3.14) instead of comma (3,14) in floating numbers
  10444:         }

#35 in void {anonymous}::TX::_txPauseBeforeTermination(HWND) at c:\program files\codeblocks\mingw\include\txlib.h (9190):

   9188: $   bool wine    = !!Win32::wine_get_version;
   9189: 
=> 9190: $   txSetLocale();
   9191: $   int attr = txSetConsoleAttr (FOREGROUND_LIGHTGRAY);
   9192: 

#36 in void {anonymous}::TX::_txCleanup() at c:\program files\codeblocks\mingw\include\txlib.h (9077):

   9075: $       if (console && isParentWaitable >= 0)
   9076:             {
=> 9077: $           _txPauseBeforeTermination (canvas);
   9078: $           paused = true;
   9079:             }

#37 in void {anonymous}::TX::_txOnCExit() at c:\program files\codeblocks\mingw\include\txlib.h (8903):

   8901:     OutputDebugString ("\n");
   8902: 
=> 8903: $5  _txCleanup();
   8904: 
   8905:     _TX_CALLv (Win32::_cexit, ());

--------------------------------------------------
Developed with:

The Dumb Artist Library (TX Library)
TXLib [Ver: 00173a, Rev: 172, Date: 2023-08-12 11:12:24 +0400]
Copyright (C) Ded (Ilya Dedinsky, http://txlib.ru) <mail@txlib.ru>
See license on: http://txlib.ru

TXLib file:	c:\program files\codeblocks\mingw\include\txlib.h
Compiled:	Sep 23 2023 16:52:01, GNU g++ 4.8.1, std=201103L, MinGW Runtime 3.20, 32-bit, DEBUG
Started:	Sep 23 2023 16:52:04

Run file:	C:\pupach_MFTI\pupach_atom\stack\stack.exe
Directory:	C:\pupach_MFTI\pupach_atom\stack

--------------------------------------------------

--------------------------------------------------
TXLib предупреждает:

Программа: C:\pupach_MFTI\pupach_atom\stack\stack.exe,

ВНЕЗАПНО: Нарушение доступа к памяти.

#16: Исключение EXCEPTION_ACCESS_VIOLATION (0xC0000005) при выполнении кода по адресу 0x7746F025 в функции RtlGetCurrentServiceSessionId(). Попытка прочесть данные по адресу 0xFFFFFFFF в модуле C:\Windows\SYSTEM32\ntdll.dll. Дополнительно, превышен лимит исключений _TX_EXCEPTIONS_LIMIT (16). Спасибо _txVectoredExceptionHandler(), что сообщил. Люблю его <3

#2: TXLib [Ver: 00173a, Rev: 172, Date: 2023-08-12 11:12:24 +0400], Instance: 0x005052FC (32-bit), Flags: Cmdre0, Thread: 0x6064 (Main), GetLastError(): 8 (Not enough memory resources are available to process this command), errno: 12 (Visual C++ CRT: Not enough memory to complete call to strerror.). 

--------------------------------------------------
Стек вызовов:

# 0 0x7746F025 in C:\Windows\SYSTEM32\ntdll.dll: RtlGetCurrentServiceSessionId()
# 1 0x774AFC6D in C:\Windows\SYSTEM32\ntdll.dll: RtlRemovePropertyStore()
# 2 0x7746EBA6 in C:\Windows\SYSTEM32\ntdll.dll: RtlFreeHeap()
# 3 0x75408109 in C:\Windows\System32\msvcrt.dll: free()
# 4 0x75416608 in C:\Windows\System32\msvcrt.dll: __unguarded_readlc_active_add_func()
# 5 0x7541762D in C:\Windows\System32\msvcrt.dll: get_current_locale()
# 6 0x75417777 in C:\Windows\System32\msvcrt.dll: setlocale()
# 7 0x0040E220 in C:\pupach_MFTI\pupach_atom\stack\stack.exe: _ZN12_GLOBAL__N_12TX11txSetLocaleEiPKcPKw()
# 8 0x0041AA67 in C:\pupach_MFTI\pupach_atom\stack\stack.exe: _ZN12_GLOBAL__N_12TX15_txProcessErrorEPKciS2_jS2_Pc()
# 9 0x00410DDE in C:\pupach_MFTI\pupach_atom\stack\stack.exe: _ZN12_GLOBAL__N_12TX8_txErrorEPKciS2_jS2_z()
#10 0x0041252B in C:\pupach_MFTI\pupach_atom\stack\stack.exe: _ZN12_GLOBAL__N_12TX17_txOnExceptionSEHEP19_EXCEPTION_POINTERSPKc()
#11 0x00411C44 in C:\pupach_MFTI\pupach_atom\stack\stack.exe: _ZN12_GLOBAL__N_12TX27_txVectoredExceptionHandlerEP19_EXCEPTION_POINTERS@4()
#12 0x7748FFFF in C:\Windows\SYSTEM32\ntdll.dll: LdrSetDllManifestProber()
#13 0x7748C727 in C:\Windows\SYSTEM32\ntdll.dll: RtlUnwind()
#14 0x77498756 in C:\Windows\SYSTEM32\ntdll.dll: KiUserExceptionDispatcher()
#15 0x753FAB98 in C:\Windows\System32\msvcrt.dll: CxxThrowException()
#16 0x7778611A in C:\Windows\DbgHelp32.dll: MiniDumpReadDumpStream()
#17 0x7772DD3F in C:\Windows\DbgHelp32.dll: RemoveInvalidModuleList()
#18 0x7774C070 in C:\Windows\DbgHelp32.dll: ImagehlpApiVersionEx()
#19 0x7774ACDE in C:\Windows\DbgHelp32.dll: ImagehlpApiVersionEx()
#20 0x7774A985 in C:\Windows\DbgHelp32.dll: ImagehlpApiVersionEx()
#21 0x7774224A in C:\Windows\DbgHelp32.dll: SymEnumerateSymbolsW64()
#22 0x777458BA in C:\Windows\DbgHelp32.dll: SymFromInlineContext()
#23 0x7774590E in C:\Windows\DbgHelp32.dll: SymFromAddr()

--------------------------------------------------
Стек вызовов TX:

# 0 in int {anonymous}::TX::txSetLocale(int, const char*, const wchar_t*) at c:\program files\codeblocks\mingw\include\txlib.h (10442):

  10440: $   if (locale)
  10441:         {
=>10442: $       setlocale (LC_ALL,     locale);
  10443: $       setlocale (LC_NUMERIC, "C");              // Return to decimal point (3.14) instead of comma (3,14) in floating numbers
  10444:         }

# 1 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

# 2 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

# 3 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

# 4 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

# 5 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

# 6 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

# 7 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

# 8 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

# 9 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#10 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#11 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#12 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#13 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#14 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#15 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#16 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#17 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#18 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#19 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#20 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#21 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

--------------------------------------------------
Developed with:

The Dumb Artist Library (TX Library)
TXLib [Ver: 00173a, Rev: 172, Date: 2023-08-12 11:12:24 +0400]
Copyright (C) Ded (Ilya Dedinsky, http://txlib.ru) <mail@txlib.ru>
See license on: http://txlib.ru

TXLib file:	c:\program files\codeblocks\mingw\include\txlib.h
Compiled:	Sep 23 2023 16:53:14, GNU g++ 4.8.1, std=201103L, MinGW Runtime 3.20, 32-bit, DEBUG
Started:	Sep 23 2023 16:53:17

Run file:	C:\pupach_MFTI\pupach_atom\stack\stack.exe
Directory:	C:\pupach_MFTI\pupach_atom\stack

--------------------------------------------------

--------------------------------------------------
TXLib соболезнует...

Программа: C:\pupach_MFTI\pupach_atom\stack\stack.exe,

ВНЕЗАПНО: Нарушение доступа к памяти.

#16: Исключение EXCEPTION_ACCESS_VIOLATION (0xC0000005) при выполнении кода по адресу 0x7746F025 в функции RtlGetCurrentServiceSessionId(). Попытка прочесть данные по адресу 0xFFFFFFFF в модуле C:\Windows\SYSTEM32\ntdll.dll. Дополнительно, превышен лимит исключений _TX_EXCEPTIONS_LIMIT (16). Спасибо _txVectoredExceptionHandler(), что сообщил. Люблю его <3

С помощью функции _set_se_translator() вы можете сами обработать эту ошибку.

#3: TXLib [Ver: 00173a, Rev: 172, Date: 2023-08-12 11:12:24 +0400], Instance: 0x005052FC (32-bit), Flags: Cmdre0, Thread: 0x6064 (Main), GetLastError(): 8 (Not enough memory resources are available to process this command), errno: 12 (Visual C++ CRT: Not enough memory to complete call to strerror.). 

--------------------------------------------------
Стек вызовов:

# 0 0x7746F025 in C:\Windows\SYSTEM32\ntdll.dll: RtlGetCurrentServiceSessionId()
# 1 0x774AFC6D in C:\Windows\SYSTEM32\ntdll.dll: RtlRemovePropertyStore()
# 2 0x7746EBA6 in C:\Windows\SYSTEM32\ntdll.dll: RtlFreeHeap()
# 3 0x75408109 in C:\Windows\System32\msvcrt.dll: free()
# 4 0x75416608 in C:\Windows\System32\msvcrt.dll: __unguarded_readlc_active_add_func()
# 5 0x7541762D in C:\Windows\System32\msvcrt.dll: get_current_locale()
# 6 0x75417777 in C:\Windows\System32\msvcrt.dll: setlocale()
# 7 0x0040E220 in C:\pupach_MFTI\pupach_atom\stack\stack.exe: _ZN12_GLOBAL__N_12TX11txSetLocaleEiPKcPKw()
# 8 0x0041AA67 in C:\pupach_MFTI\pupach_atom\stack\stack.exe: _ZN12_GLOBAL__N_12TX15_txProcessErrorEPKciS2_jS2_Pc()
# 9 0x00410DDE in C:\pupach_MFTI\pupach_atom\stack\stack.exe: _ZN12_GLOBAL__N_12TX8_txErrorEPKciS2_jS2_z()
#10 0x0041252B in C:\pupach_MFTI\pupach_atom\stack\stack.exe: _ZN12_GLOBAL__N_12TX17_txOnExceptionSEHEP19_EXCEPTION_POINTERSPKc()
#11 0x00411C44 in C:\pupach_MFTI\pupach_atom\stack\stack.exe: _ZN12_GLOBAL__N_12TX27_txVectoredExceptionHandlerEP19_EXCEPTION_POINTERS@4()
#12 0x7748FFFF in C:\Windows\SYSTEM32\ntdll.dll: LdrSetDllManifestProber()
#13 0x7748C727 in C:\Windows\SYSTEM32\ntdll.dll: RtlUnwind()
#14 0x77498756 in C:\Windows\SYSTEM32\ntdll.dll: KiUserExceptionDispatcher()
#15 0x753FAB98 in C:\Windows\System32\msvcrt.dll: CxxThrowException()
#16 0x7778611A in C:\Windows\DbgHelp32.dll: MiniDumpReadDumpStream()
#17 0x7772DD3F in C:\Windows\DbgHelp32.dll: RemoveInvalidModuleList()
#18 0x7774C070 in C:\Windows\DbgHelp32.dll: ImagehlpApiVersionEx()
#19 0x7774ACDE in C:\Windows\DbgHelp32.dll: ImagehlpApiVersionEx()
#20 0x7774A985 in C:\Windows\DbgHelp32.dll: ImagehlpApiVersionEx()
#21 0x7774224A in C:\Windows\DbgHelp32.dll: SymEnumerateSymbolsW64()
#22 0x777458BA in C:\Windows\DbgHelp32.dll: SymFromInlineContext()
#23 0x7774590E in C:\Windows\DbgHelp32.dll: SymFromAddr()

--------------------------------------------------
Стек вызовов TX:

# 0 in int {anonymous}::TX::txSetLocale(int, const char*, const wchar_t*) at c:\program files\codeblocks\mingw\include\txlib.h (10442):

  10440: $   if (locale)
  10441:         {
=>10442: $       setlocale (LC_ALL,     locale);
  10443: $       setlocale (LC_NUMERIC, "C");              // Return to decimal point (3.14) instead of comma (3,14) in floating numbers
  10444:         }

# 1 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

# 2 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

# 3 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

# 4 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

# 5 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

# 6 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

# 7 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

# 8 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

# 9 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#10 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#11 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#12 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#13 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#14 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#15 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#16 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#17 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#18 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#19 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#20 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#21 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

--------------------------------------------------
Developed with:

The Dumb Artist Library (TX Library)
TXLib [Ver: 00173a, Rev: 172, Date: 2023-08-12 11:12:24 +0400]
Copyright (C) Ded (Ilya Dedinsky, http://txlib.ru) <mail@txlib.ru>
See license on: http://txlib.ru

TXLib file:	c:\program files\codeblocks\mingw\include\txlib.h
Compiled:	Sep 23 2023 16:53:14, GNU g++ 4.8.1, std=201103L, MinGW Runtime 3.20, 32-bit, DEBUG
Started:	Sep 23 2023 16:53:17

Run file:	C:\pupach_MFTI\pupach_atom\stack\stack.exe
Directory:	C:\pupach_MFTI\pupach_atom\stack

--------------------------------------------------

--------------------------------------------------
TXLib предупреждает:

Программа: C:\pupach_MFTI\pupach_atom\stack\stack.exe,

ВНЕЗАПНО: Исключение С++, вызванное оператором throw.

#17: Исключение EXCEPTION_CPP_MSC (0xE06D7363) при выполнении кода по адресу 0x75838412 в функции RaiseException() в модуле C:\Windows\System32\KERNELBASE.dll. Дополнительно, превышен лимит исключений _TX_EXCEPTIONS_LIMIT (16). Спасибо _txVectoredExceptionHandler(), что сообщил. Люблю его <3

Ой, всё (EXCEPTION_NONCONTINUABLE).

#4: TXLib [Ver: 00173a, Rev: 172, Date: 2023-08-12 11:12:24 +0400], Instance: 0x005052FC (32-bit), Flags: Cmdre0, Thread: 0x6064 (Main), GetLastError(): 8 (Not enough memory resources are available to process this command), errno: 12 (Visual C++ CRT: Not enough memory to complete call to strerror.). 

--------------------------------------------------
Стек вызовов:

# 0 0x75838412 in C:\Windows\System32\KERNELBASE.dll: RaiseException()
# 1 0x753FAB98 in C:\Windows\System32\msvcrt.dll: CxxThrowException()
# 6 0x7747E030 in C:\Windows\SYSTEM32\ntdll.dll: RtlUnlockHeap()
# 7 0x770B5E1C in C:\Windows\System32\win32u.dll: NtUserQueryInputContext()

--------------------------------------------------
Стек вызовов TX:

# 0 in int {anonymous}::TX::txMessageBox(const char*, const char*, unsigned int) at c:\program files\codeblocks\mingw\include\txlib.h (12715):

  12713: 
  12714: $   HWND wnd = _txCanvas_Window;
=>12715: $   int  ret = MessageBoxW ((wnd && IsWindowVisible (wnd))? wnd : _TX_CALL (Win32::GetConsoleWindow,()),
  12716:                             textW, headerW, flags | MB_SETFOREGROUND | MB_TOPMOST);
  12717: 

# 1 in const char* {anonymous}::TX::_txProcessError(const char*, int, const char*, unsigned int, const char*, va_list) at c:\program files\codeblocks\mingw\include\txlib.h (12562):

  12560: 
  12561:     if (stkTrace && strstr (stkTrace, ".exe: "))
=>12562:         {$ fprintf (stderr,    "Стек вызовов:\n\n"
  12563:                                "%s\n\n"
  12564:                                "--------------------------------------------------\n",

# 2 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

# 3 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

# 4 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

# 5 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

# 6 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

# 7 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

# 8 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

# 9 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#10 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#11 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#12 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#13 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#14 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#15 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#16 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#17 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#18 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#19 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#20 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#21 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#22 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

--------------------------------------------------
Developed with:

The Dumb Artist Library (TX Library)
TXLib [Ver: 00173a, Rev: 172, Date: 2023-08-12 11:12:24 +0400]
Copyright (C) Ded (Ilya Dedinsky, http://txlib.ru) <mail@txlib.ru>
See license on: http://txlib.ru

TXLib file:	c:\program files\codeblocks\mingw\include\txlib.h
Compiled:	Sep 23 2023 16:53:14, GNU g++ 4.8.1, std=201103L, MinGW Runtime 3.20, 32-bit, DEBUG
Started:	Sep 23 2023 16:53:17

Run file:	C:\pupach_MFTI\pupach_atom\stack\stack.exe
Directory:	C:\pupach_MFTI\pupach_atom\stack

--------------------------------------------------

--------------------------------------------------
TXLib соболезнует...

Программа: C:\pupach_MFTI\pupach_atom\stack\stack.exe,

ВНЕЗАПНО: Исключение С++, вызванное оператором throw.

#17: Исключение EXCEPTION_CPP_MSC (0xE06D7363) при выполнении кода по адресу 0x75838412 в функции RaiseException() в модуле C:\Windows\System32\KERNELBASE.dll. Дополнительно, превышен лимит исключений _TX_EXCEPTIONS_LIMIT (16). Спасибо _txVectoredExceptionHandler(), что сообщил. Люблю его <3

Ой, всё (EXCEPTION_NONCONTINUABLE).

С помощью функции _set_se_translator() вы можете сами обработать эту ошибку.

#5: TXLib [Ver: 00173a, Rev: 172, Date: 2023-08-12 11:12:24 +0400], Instance: 0x005052FC (32-bit), Flags: Cmdre0, Thread: 0x6064 (Main), GetLastError(): 8 (Not enough memory resources are available to process this command), errno: 12 (Visual C++ CRT: Not enough memory to complete call to strerror.). 

--------------------------------------------------
Стек вызовов:

# 0 0x75838412 in C:\Windows\System32\KERNELBASE.dll: RaiseException()
# 1 0x753FAB98 in C:\Windows\System32\msvcrt.dll: CxxThrowException()
# 6 0x7747E030 in C:\Windows\SYSTEM32\ntdll.dll: RtlUnlockHeap()
# 7 0x770B5E1C in C:\Windows\System32\win32u.dll: NtUserQueryInputContext()

--------------------------------------------------
Стек вызовов TX:

# 0 in int {anonymous}::TX::txMessageBox(const char*, const char*, unsigned int) at c:\program files\codeblocks\mingw\include\txlib.h (12715):

  12713: 
  12714: $   HWND wnd = _txCanvas_Window;
=>12715: $   int  ret = MessageBoxW ((wnd && IsWindowVisible (wnd))? wnd : _TX_CALL (Win32::GetConsoleWindow,()),
  12716:                             textW, headerW, flags | MB_SETFOREGROUND | MB_TOPMOST);
  12717: 

# 1 in const char* {anonymous}::TX::_txProcessError(const char*, int, const char*, unsigned int, const char*, va_list) at c:\program files\codeblocks\mingw\include\txlib.h (12562):

  12560: 
  12561:     if (stkTrace && strstr (stkTrace, ".exe: "))
=>12562:         {$ fprintf (stderr,    "Стек вызовов:\n\n"
  12563:                                "%s\n\n"
  12564:                                "--------------------------------------------------\n",

# 2 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

# 3 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

# 4 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

# 5 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

# 6 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

# 7 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

# 8 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

# 9 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#10 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#11 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#12 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#13 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#14 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#15 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#16 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#17 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#18 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#19 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#20 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#21 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#22 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

--------------------------------------------------
Developed with:

The Dumb Artist Library (TX Library)
TXLib [Ver: 00173a, Rev: 172, Date: 2023-08-12 11:12:24 +0400]
Copyright (C) Ded (Ilya Dedinsky, http://txlib.ru) <mail@txlib.ru>
See license on: http://txlib.ru

TXLib file:	c:\program files\codeblocks\mingw\include\txlib.h
Compiled:	Sep 23 2023 16:53:14, GNU g++ 4.8.1, std=201103L, MinGW Runtime 3.20, 32-bit, DEBUG
Started:	Sep 23 2023 16:53:17

Run file:	C:\pupach_MFTI\pupach_atom\stack\stack.exe
Directory:	C:\pupach_MFTI\pupach_atom\stack

--------------------------------------------------

--------------------------------------------------
TXLib предупреждает:

Программа: C:\pupach_MFTI\pupach_atom\stack\stack.exe,

ВНЕЗАПНО: Нарушение доступа к памяти.

#16: Исключение EXCEPTION_ACCESS_VIOLATION (0xC0000005) при выполнении кода по адресу 0x7746F025 в функции RtlGetCurrentServiceSessionId(). Попытка прочесть данные по адресу 0xFFFFFFFF в модуле C:\Windows\SYSTEM32\ntdll.dll. Дополнительно, превышен лимит исключений _TX_EXCEPTIONS_LIMIT (16). Спасибо _txVectoredExceptionHandler(), что сообщил. Люблю его <3

#2: TXLib [Ver: 00173a, Rev: 172, Date: 2023-08-12 11:12:24 +0400], Instance: 0x005052FC (32-bit), Flags: Cmdre0, Thread: 0x1E0 (Main), GetLastError(): 8 (Not enough memory resources are available to process this command), errno: 12 (Visual C++ CRT: Not enough memory to complete call to strerror.). 

--------------------------------------------------
Стек вызовов:

# 0 0x7746F025 in C:\Windows\SYSTEM32\ntdll.dll: RtlGetCurrentServiceSessionId()
# 1 0x774AFC6D in C:\Windows\SYSTEM32\ntdll.dll: RtlRemovePropertyStore()
# 2 0x7746EBA6 in C:\Windows\SYSTEM32\ntdll.dll: RtlFreeHeap()
# 3 0x75408109 in C:\Windows\System32\msvcrt.dll: free()
# 4 0x75416608 in C:\Windows\System32\msvcrt.dll: __unguarded_readlc_active_add_func()
# 5 0x7541762D in C:\Windows\System32\msvcrt.dll: get_current_locale()
# 6 0x75417777 in C:\Windows\System32\msvcrt.dll: setlocale()
# 7 0x0040E220 in C:\pupach_MFTI\pupach_atom\stack\stack.exe: _ZN12_GLOBAL__N_12TX11txSetLocaleEiPKcPKw()
# 8 0x0041AA67 in C:\pupach_MFTI\pupach_atom\stack\stack.exe: _ZN12_GLOBAL__N_12TX15_txProcessErrorEPKciS2_jS2_Pc()
# 9 0x00410DDE in C:\pupach_MFTI\pupach_atom\stack\stack.exe: _ZN12_GLOBAL__N_12TX8_txErrorEPKciS2_jS2_z()
#10 0x0041252B in C:\pupach_MFTI\pupach_atom\stack\stack.exe: _ZN12_GLOBAL__N_12TX17_txOnExceptionSEHEP19_EXCEPTION_POINTERSPKc()
#11 0x00411C44 in C:\pupach_MFTI\pupach_atom\stack\stack.exe: _ZN12_GLOBAL__N_12TX27_txVectoredExceptionHandlerEP19_EXCEPTION_POINTERS@4()
#12 0x7748FFFF in C:\Windows\SYSTEM32\ntdll.dll: LdrSetDllManifestProber()
#13 0x7748C727 in C:\Windows\SYSTEM32\ntdll.dll: RtlUnwind()
#14 0x77498756 in C:\Windows\SYSTEM32\ntdll.dll: KiUserExceptionDispatcher()
#15 0x753FAB98 in C:\Windows\System32\msvcrt.dll: CxxThrowException()
#16 0x7778611A in C:\Windows\DbgHelp32.dll: MiniDumpReadDumpStream()
#17 0x7772DD3F in C:\Windows\DbgHelp32.dll: RemoveInvalidModuleList()
#18 0x7774C070 in C:\Windows\DbgHelp32.dll: ImagehlpApiVersionEx()
#19 0x7774ACDE in C:\Windows\DbgHelp32.dll: ImagehlpApiVersionEx()
#20 0x7774A985 in C:\Windows\DbgHelp32.dll: ImagehlpApiVersionEx()
#21 0x7774224A in C:\Windows\DbgHelp32.dll: SymEnumerateSymbolsW64()
#22 0x777458BA in C:\Windows\DbgHelp32.dll: SymFromInlineContext()
#23 0x7774590E in C:\Windows\DbgHelp32.dll: SymFromAddr()

--------------------------------------------------
Стек вызовов TX:

# 0 in int {anonymous}::TX::txSetLocale(int, const char*, const wchar_t*) at c:\program files\codeblocks\mingw\include\txlib.h (10442):

  10440: $   if (locale)
  10441:         {
=>10442: $       setlocale (LC_ALL,     locale);
  10443: $       setlocale (LC_NUMERIC, "C");              // Return to decimal point (3.14) instead of comma (3,14) in floating numbers
  10444:         }

# 1 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

# 2 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

# 3 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

# 4 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

# 5 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

# 6 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

# 7 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

# 8 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

# 9 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#10 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#11 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#12 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#13 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#14 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#15 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#16 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#17 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#18 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#19 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#20 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#21 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

--------------------------------------------------
Developed with:

The Dumb Artist Library (TX Library)
TXLib [Ver: 00173a, Rev: 172, Date: 2023-08-12 11:12:24 +0400]
Copyright (C) Ded (Ilya Dedinsky, http://txlib.ru) <mail@txlib.ru>
See license on: http://txlib.ru

TXLib file:	c:\program files\codeblocks\mingw\include\txlib.h
Compiled:	Sep 23 2023 16:53:58, GNU g++ 4.8.1, std=201103L, MinGW Runtime 3.20, 32-bit, DEBUG
Started:	Sep 23 2023 16:54:01

Run file:	C:\pupach_MFTI\pupach_atom\stack\stack.exe
Directory:	C:\pupach_MFTI\pupach_atom\stack

--------------------------------------------------

--------------------------------------------------
TXLib соболезнует...

Программа: C:\pupach_MFTI\pupach_atom\stack\stack.exe,

ВНЕЗАПНО: Нарушение доступа к памяти.

#16: Исключение EXCEPTION_ACCESS_VIOLATION (0xC0000005) при выполнении кода по адресу 0x7746F025 в функции RtlGetCurrentServiceSessionId(). Попытка прочесть данные по адресу 0xFFFFFFFF в модуле C:\Windows\SYSTEM32\ntdll.dll. Дополнительно, превышен лимит исключений _TX_EXCEPTIONS_LIMIT (16). Спасибо _txVectoredExceptionHandler(), что сообщил. Люблю его <3

С помощью функции _set_se_translator() вы можете сами обработать эту ошибку.

#3: TXLib [Ver: 00173a, Rev: 172, Date: 2023-08-12 11:12:24 +0400], Instance: 0x005052FC (32-bit), Flags: Cmdre0, Thread: 0x1E0 (Main), GetLastError(): 8 (Not enough memory resources are available to process this command), errno: 12 (Visual C++ CRT: Not enough memory to complete call to strerror.). 

--------------------------------------------------
Стек вызовов:

# 0 0x7746F025 in C:\Windows\SYSTEM32\ntdll.dll: RtlGetCurrentServiceSessionId()
# 1 0x774AFC6D in C:\Windows\SYSTEM32\ntdll.dll: RtlRemovePropertyStore()
# 2 0x7746EBA6 in C:\Windows\SYSTEM32\ntdll.dll: RtlFreeHeap()
# 3 0x75408109 in C:\Windows\System32\msvcrt.dll: free()
# 4 0x75416608 in C:\Windows\System32\msvcrt.dll: __unguarded_readlc_active_add_func()
# 5 0x7541762D in C:\Windows\System32\msvcrt.dll: get_current_locale()
# 6 0x75417777 in C:\Windows\System32\msvcrt.dll: setlocale()
# 7 0x0040E220 in C:\pupach_MFTI\pupach_atom\stack\stack.exe: _ZN12_GLOBAL__N_12TX11txSetLocaleEiPKcPKw()
# 8 0x0041AA67 in C:\pupach_MFTI\pupach_atom\stack\stack.exe: _ZN12_GLOBAL__N_12TX15_txProcessErrorEPKciS2_jS2_Pc()
# 9 0x00410DDE in C:\pupach_MFTI\pupach_atom\stack\stack.exe: _ZN12_GLOBAL__N_12TX8_txErrorEPKciS2_jS2_z()
#10 0x0041252B in C:\pupach_MFTI\pupach_atom\stack\stack.exe: _ZN12_GLOBAL__N_12TX17_txOnExceptionSEHEP19_EXCEPTION_POINTERSPKc()
#11 0x00411C44 in C:\pupach_MFTI\pupach_atom\stack\stack.exe: _ZN12_GLOBAL__N_12TX27_txVectoredExceptionHandlerEP19_EXCEPTION_POINTERS@4()
#12 0x7748FFFF in C:\Windows\SYSTEM32\ntdll.dll: LdrSetDllManifestProber()
#13 0x7748C727 in C:\Windows\SYSTEM32\ntdll.dll: RtlUnwind()
#14 0x77498756 in C:\Windows\SYSTEM32\ntdll.dll: KiUserExceptionDispatcher()
#15 0x753FAB98 in C:\Windows\System32\msvcrt.dll: CxxThrowException()
#16 0x7778611A in C:\Windows\DbgHelp32.dll: MiniDumpReadDumpStream()
#17 0x7772DD3F in C:\Windows\DbgHelp32.dll: RemoveInvalidModuleList()
#18 0x7774C070 in C:\Windows\DbgHelp32.dll: ImagehlpApiVersionEx()
#19 0x7774ACDE in C:\Windows\DbgHelp32.dll: ImagehlpApiVersionEx()
#20 0x7774A985 in C:\Windows\DbgHelp32.dll: ImagehlpApiVersionEx()
#21 0x7774224A in C:\Windows\DbgHelp32.dll: SymEnumerateSymbolsW64()
#22 0x777458BA in C:\Windows\DbgHelp32.dll: SymFromInlineContext()
#23 0x7774590E in C:\Windows\DbgHelp32.dll: SymFromAddr()

--------------------------------------------------
Стек вызовов TX:

# 0 in int {anonymous}::TX::txSetLocale(int, const char*, const wchar_t*) at c:\program files\codeblocks\mingw\include\txlib.h (10442):

  10440: $   if (locale)
  10441:         {
=>10442: $       setlocale (LC_ALL,     locale);
  10443: $       setlocale (LC_NUMERIC, "C");              // Return to decimal point (3.14) instead of comma (3,14) in floating numbers
  10444:         }

# 1 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

# 2 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

# 3 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

# 4 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

# 5 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

# 6 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

# 7 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

# 8 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

# 9 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#10 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#11 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#12 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#13 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#14 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#15 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#16 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#17 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#18 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#19 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#20 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#21 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

--------------------------------------------------
Developed with:

The Dumb Artist Library (TX Library)
TXLib [Ver: 00173a, Rev: 172, Date: 2023-08-12 11:12:24 +0400]
Copyright (C) Ded (Ilya Dedinsky, http://txlib.ru) <mail@txlib.ru>
See license on: http://txlib.ru

TXLib file:	c:\program files\codeblocks\mingw\include\txlib.h
Compiled:	Sep 23 2023 16:53:58, GNU g++ 4.8.1, std=201103L, MinGW Runtime 3.20, 32-bit, DEBUG
Started:	Sep 23 2023 16:54:01

Run file:	C:\pupach_MFTI\pupach_atom\stack\stack.exe
Directory:	C:\pupach_MFTI\pupach_atom\stack

--------------------------------------------------

--------------------------------------------------
TXLib предупреждает:

Программа: C:\pupach_MFTI\pupach_atom\stack\stack.exe,

ВНЕЗАПНО: Исключение С++, вызванное оператором throw.

#17: Исключение EXCEPTION_CPP_MSC (0xE06D7363) при выполнении кода по адресу 0x75838412 в функции RaiseException() в модуле C:\Windows\System32\KERNELBASE.dll. Дополнительно, превышен лимит исключений _TX_EXCEPTIONS_LIMIT (16). Спасибо _txVectoredExceptionHandler(), что сообщил. Люблю его <3

Ой, всё (EXCEPTION_NONCONTINUABLE).

#4: TXLib [Ver: 00173a, Rev: 172, Date: 2023-08-12 11:12:24 +0400], Instance: 0x005052FC (32-bit), Flags: Cmdre0, Thread: 0x1E0 (Main), GetLastError(): 8 (Not enough memory resources are available to process this command), errno: 12 (Visual C++ CRT: Not enough memory to complete call to strerror.). 

--------------------------------------------------
Стек вызовов:

# 0 0x75838412 in C:\Windows\System32\KERNELBASE.dll: RaiseException()
# 1 0x753FAB98 in C:\Windows\System32\msvcrt.dll: CxxThrowException()
# 6 0x7747E030 in C:\Windows\SYSTEM32\ntdll.dll: RtlUnlockHeap()
# 7 0x770B5E1C in C:\Windows\System32\win32u.dll: NtUserQueryInputContext()

--------------------------------------------------
Стек вызовов TX:

# 0 in int {anonymous}::TX::txMessageBox(const char*, const char*, unsigned int) at c:\program files\codeblocks\mingw\include\txlib.h (12715):

  12713: 
  12714: $   HWND wnd = _txCanvas_Window;
=>12715: $   int  ret = MessageBoxW ((wnd && IsWindowVisible (wnd))? wnd : _TX_CALL (Win32::GetConsoleWindow,()),
  12716:                             textW, headerW, flags | MB_SETFOREGROUND | MB_TOPMOST);
  12717: 

# 1 in const char* {anonymous}::TX::_txProcessError(const char*, int, const char*, unsigned int, const char*, va_list) at c:\program files\codeblocks\mingw\include\txlib.h (12562):

  12560: 
  12561:     if (stkTrace && strstr (stkTrace, ".exe: "))
=>12562:         {$ fprintf (stderr,    "Стек вызовов:\n\n"
  12563:                                "%s\n\n"
  12564:                                "--------------------------------------------------\n",

# 2 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

# 3 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

# 4 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

# 5 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

# 6 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

# 7 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

# 8 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

# 9 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#10 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#11 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#12 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#13 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#14 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#15 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#16 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#17 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#18 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#19 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#20 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#21 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#22 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

--------------------------------------------------
Developed with:

The Dumb Artist Library (TX Library)
TXLib [Ver: 00173a, Rev: 172, Date: 2023-08-12 11:12:24 +0400]
Copyright (C) Ded (Ilya Dedinsky, http://txlib.ru) <mail@txlib.ru>
See license on: http://txlib.ru

TXLib file:	c:\program files\codeblocks\mingw\include\txlib.h
Compiled:	Sep 23 2023 16:53:58, GNU g++ 4.8.1, std=201103L, MinGW Runtime 3.20, 32-bit, DEBUG
Started:	Sep 23 2023 16:54:01

Run file:	C:\pupach_MFTI\pupach_atom\stack\stack.exe
Directory:	C:\pupach_MFTI\pupach_atom\stack

--------------------------------------------------

--------------------------------------------------
TXLib соболезнует...

Программа: C:\pupach_MFTI\pupach_atom\stack\stack.exe,

ВНЕЗАПНО: Исключение С++, вызванное оператором throw.

#17: Исключение EXCEPTION_CPP_MSC (0xE06D7363) при выполнении кода по адресу 0x75838412 в функции RaiseException() в модуле C:\Windows\System32\KERNELBASE.dll. Дополнительно, превышен лимит исключений _TX_EXCEPTIONS_LIMIT (16). Спасибо _txVectoredExceptionHandler(), что сообщил. Люблю его <3

Ой, всё (EXCEPTION_NONCONTINUABLE).

С помощью функции _set_se_translator() вы можете сами обработать эту ошибку.

#5: TXLib [Ver: 00173a, Rev: 172, Date: 2023-08-12 11:12:24 +0400], Instance: 0x005052FC (32-bit), Flags: Cmdre0, Thread: 0x1E0 (Main), GetLastError(): 8 (Not enough memory resources are available to process this command), errno: 12 (Visual C++ CRT: Not enough memory to complete call to strerror.). 

--------------------------------------------------
Стек вызовов:

# 0 0x75838412 in C:\Windows\System32\KERNELBASE.dll: RaiseException()
# 1 0x753FAB98 in C:\Windows\System32\msvcrt.dll: CxxThrowException()
# 6 0x7747E030 in C:\Windows\SYSTEM32\ntdll.dll: RtlUnlockHeap()
# 7 0x770B5E1C in C:\Windows\System32\win32u.dll: NtUserQueryInputContext()

--------------------------------------------------
Стек вызовов TX:

# 0 in int {anonymous}::TX::txMessageBox(const char*, const char*, unsigned int) at c:\program files\codeblocks\mingw\include\txlib.h (12715):

  12713: 
  12714: $   HWND wnd = _txCanvas_Window;
=>12715: $   int  ret = MessageBoxW ((wnd && IsWindowVisible (wnd))? wnd : _TX_CALL (Win32::GetConsoleWindow,()),
  12716:                             textW, headerW, flags | MB_SETFOREGROUND | MB_TOPMOST);
  12717: 

# 1 in const char* {anonymous}::TX::_txProcessError(const char*, int, const char*, unsigned int, const char*, va_list) at c:\program files\codeblocks\mingw\include\txlib.h (12562):

  12560: 
  12561:     if (stkTrace && strstr (stkTrace, ".exe: "))
=>12562:         {$ fprintf (stderr,    "Стек вызовов:\n\n"
  12563:                                "%s\n\n"
  12564:                                "--------------------------------------------------\n",

# 2 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

# 3 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

# 4 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

# 5 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

# 6 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

# 7 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

# 8 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

# 9 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#10 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#11 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#12 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#13 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#14 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#15 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#16 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#17 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#18 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#19 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#20 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#21 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#22 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

--------------------------------------------------
Developed with:

The Dumb Artist Library (TX Library)
TXLib [Ver: 00173a, Rev: 172, Date: 2023-08-12 11:12:24 +0400]
Copyright (C) Ded (Ilya Dedinsky, http://txlib.ru) <mail@txlib.ru>
See license on: http://txlib.ru

TXLib file:	c:\program files\codeblocks\mingw\include\txlib.h
Compiled:	Sep 23 2023 16:53:58, GNU g++ 4.8.1, std=201103L, MinGW Runtime 3.20, 32-bit, DEBUG
Started:	Sep 23 2023 16:54:00

Run file:	C:\pupach_MFTI\pupach_atom\stack\stack.exe
Directory:	C:\pupach_MFTI\pupach_atom\stack

--------------------------------------------------

--------------------------------------------------
TXLib предупреждает:

Программа: C:\pupach_MFTI\pupach_atom\stack\stack.exe,

ВНЕЗАПНО: Нарушение доступа к памяти.

#21: Исключение EXCEPTION_ACCESS_VIOLATION (0xC0000005) при выполнении кода по адресу 0x7746D5AA в функции RtlAllocateHeap(). Попытка прочесть данные по адресу 0xFFFFFFFF в модуле C:\Windows\SYSTEM32\ntdll.dll. Дополнительно, превышен лимит исключений _TX_EXCEPTIONS_LIMIT (16). Также превышен лимит фатальных исключений _TX_FATAL_EXCEPTIONS_LIMIT (16). Спасибо _txVectoredExceptionHandler(), что сообщил. Люблю его <3

#1: TXLib [Ver: 00173a, Rev: 172, Date: 2023-08-12 11:12:24 +0400], Instance: 0x005052FC (32-bit), Flags: Cmdre0, Thread: 0x19B4 (Main), errno: 12 (Visual C++ CRT: Not enough memory to complete call to strerror.). 

--------------------------------------------------
Стек вызовов:

# 0 0x7746D5AA in C:\Windows\SYSTEM32\ntdll.dll: RtlAllocateHeap()
# 1 0x7746CB02 in C:\Windows\SYSTEM32\ntdll.dll: RtlAllocateHeap()
# 2 0x7746BAFE in C:\Windows\SYSTEM32\ntdll.dll: RtlAllocateHeap()
# 3 0x75408995 in C:\Windows\System32\msvcrt.dll: realloc()
# 4 0x7540806A in C:\Windows\System32\msvcrt.dll: calloc()
# 5 0x6626DA84 in C:\Windows\MgwHelp32.dll: SymGetLineFromAddrW64()

--------------------------------------------------
Стек вызовов TX:

# 0 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

# 1 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\program files\codeblocks\mingw\include\txlib.h (11982):

  11980: $       bool                    inTX   = false;
  11981: 
=>11982:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  11983:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  11984: 

# 2 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11478):

  11476: $       unsigned err = GetLastError();
  11477: 
=>11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
  11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

# 3 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

# 4 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\program files\codeblocks\mingw\include\txlib.h (11982):

  11980: $       bool                    inTX   = false;
  11981: 
=>11982:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  11983:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  11984: 

# 5 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11478):

  11476: $       unsigned err = GetLastError();
  11477: 
=>11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
  11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

# 6 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

# 7 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

# 8 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

# 9 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#10 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#11 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#12 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#13 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#14 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#15 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#16 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#17 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#18 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#19 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#20 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#21 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#22 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#23 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#24 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#25 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#26 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#27 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#28 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#29 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#30 in bool {anonymous}::TX::_txCreateMiniDump(EXCEPTION_POINTERS*) at c:\program files\codeblocks\mingw\include\txlib.h (12420):

  12418: $   Win32::MINIDUMP_TYPE type = (Win32::MINIDUMP_TYPE) (Win32::MiniDumpWithIndirectlyReferencedMemory | Win32::MiniDumpScanMemory);
  12419: 
=>12420: $   bool ok = _TX_CALL (Win32::MiniDumpWriteDump, (GetCurrentProcess(), GetCurrentProcessId(), file, type,
  12421:                                                    ((exc)? &excInfo : NULL), NULL, NULL));
  12422: $   CloseHandle (file);

#31 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\program files\codeblocks\mingw\include\txlib.h (12028):

  12026: 
  12027:     #if !defined (_TX_NO_MINIDUMP)
=>12028: $   _txCreateMiniDump (exc);
  12029:     #endif
  12030: 

#32 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11478):

  11476: $       unsigned err = GetLastError();
  11477: 
=>11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
  11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#33 in int {anonymous}::TX::txSetLocale(int, const char*, const wchar_t*) at c:\program files\codeblocks\mingw\include\txlib.h (10442):

  10440: $   if (locale)
  10441:         {
=>10442: $       setlocale (LC_ALL,     locale);
  10443: $       setlocale (LC_NUMERIC, "C");              // Return to decimal point (3.14) instead of comma (3,14) in floating numbers
  10444:         }

#34 in void {anonymous}::TX::_txPauseBeforeTermination(HWND) at c:\program files\codeblocks\mingw\include\txlib.h (9190):

   9188: $   bool wine    = !!Win32::wine_get_version;
   9189: 
=> 9190: $   txSetLocale();
   9191: $   int attr = txSetConsoleAttr (FOREGROUND_LIGHTGRAY);
   9192: 

#35 in void {anonymous}::TX::_txCleanup() at c:\program files\codeblocks\mingw\include\txlib.h (9077):

   9075: $       if (console && isParentWaitable >= 0)
   9076:             {
=> 9077: $           _txPauseBeforeTermination (canvas);
   9078: $           paused = true;
   9079:             }

#36 in void {anonymous}::TX::_txOnExit(int) at c:\program files\codeblocks\mingw\include\txlib.h (8918):

   8916:         }
   8917: 
=> 8918: $5  _txCleanup();
   8919: 
   8920:     if (retcode != 0)

--------------------------------------------------
Developed with:

The Dumb Artist Library (TX Library)
TXLib [Ver: 00173a, Rev: 172, Date: 2023-08-12 11:12:24 +0400]
Copyright (C) Ded (Ilya Dedinsky, http://txlib.ru) <mail@txlib.ru>
See license on: http://txlib.ru

TXLib file:	c:\program files\codeblocks\mingw\include\txlib.h
Compiled:	Sep 23 2023 16:54:49, GNU g++ 4.8.1, std=201103L, MinGW Runtime 3.20, 32-bit, DEBUG
Started:	Sep 23 2023 16:54:51

Run file:	C:\pupach_MFTI\pupach_atom\stack\stack.exe
Directory:	C:\pupach_MFTI\pupach_atom\stack

--------------------------------------------------

--------------------------------------------------
TXLib соболезнует...

Программа: C:\pupach_MFTI\pupach_atom\stack\stack.exe,

ВНЕЗАПНО: Нарушение доступа к памяти.

#21: Исключение EXCEPTION_ACCESS_VIOLATION (0xC0000005) при выполнении кода по адресу 0x7746D5AA в функции RtlAllocateHeap(). Попытка прочесть данные по адресу 0xFFFFFFFF в модуле C:\Windows\SYSTEM32\ntdll.dll. Дополнительно, превышен лимит исключений _TX_EXCEPTIONS_LIMIT (16). Также превышен лимит фатальных исключений _TX_FATAL_EXCEPTIONS_LIMIT (16). Спасибо _txVectoredExceptionHandler(), что сообщил. Люблю его <3

С помощью функции _set_se_translator() вы можете сами обработать эту ошибку.

#2: TXLib [Ver: 00173a, Rev: 172, Date: 2023-08-12 11:12:24 +0400], Instance: 0x005052FC (32-bit), Flags: Cmdre0, Thread: 0x19B4 (Main), errno: 12 (Visual C++ CRT: Not enough memory to complete call to strerror.). 

--------------------------------------------------
Стек вызовов:

# 0 0x7746D5AA in C:\Windows\SYSTEM32\ntdll.dll: RtlAllocateHeap()
# 1 0x7746CB02 in C:\Windows\SYSTEM32\ntdll.dll: RtlAllocateHeap()
# 2 0x7746BAFE in C:\Windows\SYSTEM32\ntdll.dll: RtlAllocateHeap()
# 3 0x75408995 in C:\Windows\System32\msvcrt.dll: realloc()
# 4 0x7540806A in C:\Windows\System32\msvcrt.dll: calloc()
# 5 0x6626DA84 in C:\Windows\MgwHelp32.dll: SymGetLineFromAddrW64()

--------------------------------------------------
Стек вызовов TX:

# 0 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

# 1 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\program files\codeblocks\mingw\include\txlib.h (11982):

  11980: $       bool                    inTX   = false;
  11981: 
=>11982:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  11983:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  11984: 

# 2 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11478):

  11476: $       unsigned err = GetLastError();
  11477: 
=>11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
  11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

# 3 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

# 4 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\program files\codeblocks\mingw\include\txlib.h (11982):

  11980: $       bool                    inTX   = false;
  11981: 
=>11982:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  11983:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  11984: 

# 5 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11478):

  11476: $       unsigned err = GetLastError();
  11477: 
=>11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
  11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

# 6 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

# 7 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

# 8 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

# 9 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#10 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#11 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#12 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#13 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#14 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#15 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#16 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#17 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#18 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#19 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#20 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#21 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#22 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#23 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#24 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#25 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#26 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#27 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#28 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#29 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#30 in bool {anonymous}::TX::_txCreateMiniDump(EXCEPTION_POINTERS*) at c:\program files\codeblocks\mingw\include\txlib.h (12420):

  12418: $   Win32::MINIDUMP_TYPE type = (Win32::MINIDUMP_TYPE) (Win32::MiniDumpWithIndirectlyReferencedMemory | Win32::MiniDumpScanMemory);
  12419: 
=>12420: $   bool ok = _TX_CALL (Win32::MiniDumpWriteDump, (GetCurrentProcess(), GetCurrentProcessId(), file, type,
  12421:                                                    ((exc)? &excInfo : NULL), NULL, NULL));
  12422: $   CloseHandle (file);

#31 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\program files\codeblocks\mingw\include\txlib.h (12028):

  12026: 
  12027:     #if !defined (_TX_NO_MINIDUMP)
=>12028: $   _txCreateMiniDump (exc);
  12029:     #endif
  12030: 

#32 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11478):

  11476: $       unsigned err = GetLastError();
  11477: 
=>11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
  11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#33 in int {anonymous}::TX::txSetLocale(int, const char*, const wchar_t*) at c:\program files\codeblocks\mingw\include\txlib.h (10442):

  10440: $   if (locale)
  10441:         {
=>10442: $       setlocale (LC_ALL,     locale);
  10443: $       setlocale (LC_NUMERIC, "C");              // Return to decimal point (3.14) instead of comma (3,14) in floating numbers
  10444:         }

#34 in void {anonymous}::TX::_txPauseBeforeTermination(HWND) at c:\program files\codeblocks\mingw\include\txlib.h (9190):

   9188: $   bool wine    = !!Win32::wine_get_version;
   9189: 
=> 9190: $   txSetLocale();
   9191: $   int attr = txSetConsoleAttr (FOREGROUND_LIGHTGRAY);
   9192: 

#35 in void {anonymous}::TX::_txCleanup() at c:\program files\codeblocks\mingw\include\txlib.h (9077):

   9075: $       if (console && isParentWaitable >= 0)
   9076:             {
=> 9077: $           _txPauseBeforeTermination (canvas);
   9078: $           paused = true;
   9079:             }

#36 in void {anonymous}::TX::_txOnExit(int) at c:\program files\codeblocks\mingw\include\txlib.h (8918):

   8916:         }
   8917: 
=> 8918: $5  _txCleanup();
   8919: 
   8920:     if (retcode != 0)

--------------------------------------------------
Developed with:

The Dumb Artist Library (TX Library)
TXLib [Ver: 00173a, Rev: 172, Date: 2023-08-12 11:12:24 +0400]
Copyright (C) Ded (Ilya Dedinsky, http://txlib.ru) <mail@txlib.ru>
See license on: http://txlib.ru

TXLib file:	c:\program files\codeblocks\mingw\include\txlib.h
Compiled:	Sep 23 2023 16:54:49, GNU g++ 4.8.1, std=201103L, MinGW Runtime 3.20, 32-bit, DEBUG
Started:	Sep 23 2023 16:54:52

Run file:	C:\pupach_MFTI\pupach_atom\stack\stack.exe
Directory:	C:\pupach_MFTI\pupach_atom\stack

--------------------------------------------------

--------------------------------------------------
TXLib предупреждает:

Программа: C:\pupach_MFTI\pupach_atom\stack\stack.exe,

ВНЕЗАПНО: Исключение С++, вызванное оператором throw.

#22: Исключение EXCEPTION_CPP_MSC (0xE06D7363) при выполнении кода по адресу 0x75838412 в функции RaiseException() в модуле C:\Windows\System32\KERNELBASE.dll. Дополнительно, превышен лимит исключений _TX_EXCEPTIONS_LIMIT (16). Также превышен лимит фатальных исключений _TX_FATAL_EXCEPTIONS_LIMIT (16). Спасибо _txVectoredExceptionHandler(), что сообщил. Люблю его <3

Ой, всё (EXCEPTION_NONCONTINUABLE).

#3: TXLib [Ver: 00173a, Rev: 172, Date: 2023-08-12 11:12:24 +0400], Instance: 0x005052FC (32-bit), Flags: Cmdre0, Thread: 0x19B4 (Main), GetLastError(): 8 (Not enough memory resources are available to process this command), errno: 12 (Visual C++ CRT: Not enough memory to complete call to strerror.). 

--------------------------------------------------
Стек вызовов:

# 0 0x75838412 in C:\Windows\System32\KERNELBASE.dll: RaiseException()
# 1 0x753FAB98 in C:\Windows\System32\msvcrt.dll: CxxThrowException()
# 6 0x7747E030 in C:\Windows\SYSTEM32\ntdll.dll: RtlUnlockHeap()
# 7 0x770B5E1C in C:\Windows\System32\win32u.dll: NtUserQueryInputContext()

--------------------------------------------------
Стек вызовов TX:

# 0 in int {anonymous}::TX::txMessageBox(const char*, const char*, unsigned int) at c:\program files\codeblocks\mingw\include\txlib.h (12715):

  12713: 
  12714: $   HWND wnd = _txCanvas_Window;
=>12715: $   int  ret = MessageBoxW ((wnd && IsWindowVisible (wnd))? wnd : _TX_CALL (Win32::GetConsoleWindow,()),
  12716:                             textW, headerW, flags | MB_SETFOREGROUND | MB_TOPMOST);
  12717: 

# 1 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

# 2 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\program files\codeblocks\mingw\include\txlib.h (11982):

  11980: $       bool                    inTX   = false;
  11981: 
=>11982:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  11983:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  11984: 

# 3 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11478):

  11476: $       unsigned err = GetLastError();
  11477: 
=>11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
  11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

# 4 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

# 5 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\program files\codeblocks\mingw\include\txlib.h (11982):

  11980: $       bool                    inTX   = false;
  11981: 
=>11982:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  11983:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  11984: 

# 6 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11478):

  11476: $       unsigned err = GetLastError();
  11477: 
=>11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
  11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

# 7 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

# 8 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

# 9 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#10 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#11 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#12 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#13 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#14 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#15 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#16 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#17 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#18 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#19 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#20 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#21 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#22 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#23 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#24 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#25 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#26 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#27 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#28 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#29 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#30 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#31 in bool {anonymous}::TX::_txCreateMiniDump(EXCEPTION_POINTERS*) at c:\program files\codeblocks\mingw\include\txlib.h (12420):

  12418: $   Win32::MINIDUMP_TYPE type = (Win32::MINIDUMP_TYPE) (Win32::MiniDumpWithIndirectlyReferencedMemory | Win32::MiniDumpScanMemory);
  12419: 
=>12420: $   bool ok = _TX_CALL (Win32::MiniDumpWriteDump, (GetCurrentProcess(), GetCurrentProcessId(), file, type,
  12421:                                                    ((exc)? &excInfo : NULL), NULL, NULL));
  12422: $   CloseHandle (file);

#32 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\program files\codeblocks\mingw\include\txlib.h (12028):

  12026: 
  12027:     #if !defined (_TX_NO_MINIDUMP)
=>12028: $   _txCreateMiniDump (exc);
  12029:     #endif
  12030: 

#33 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11478):

  11476: $       unsigned err = GetLastError();
  11477: 
=>11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
  11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#34 in int {anonymous}::TX::txSetLocale(int, const char*, const wchar_t*) at c:\program files\codeblocks\mingw\include\txlib.h (10442):

  10440: $   if (locale)
  10441:         {
=>10442: $       setlocale (LC_ALL,     locale);
  10443: $       setlocale (LC_NUMERIC, "C");              // Return to decimal point (3.14) instead of comma (3,14) in floating numbers
  10444:         }

#35 in void {anonymous}::TX::_txPauseBeforeTermination(HWND) at c:\program files\codeblocks\mingw\include\txlib.h (9190):

   9188: $   bool wine    = !!Win32::wine_get_version;
   9189: 
=> 9190: $   txSetLocale();
   9191: $   int attr = txSetConsoleAttr (FOREGROUND_LIGHTGRAY);
   9192: 

#36 in void {anonymous}::TX::_txCleanup() at c:\program files\codeblocks\mingw\include\txlib.h (9077):

   9075: $       if (console && isParentWaitable >= 0)
   9076:             {
=> 9077: $           _txPauseBeforeTermination (canvas);
   9078: $           paused = true;
   9079:             }

#37 in void {anonymous}::TX::_txOnExit(int) at c:\program files\codeblocks\mingw\include\txlib.h (8918):

   8916:         }
   8917: 
=> 8918: $5  _txCleanup();
   8919: 
   8920:     if (retcode != 0)

--------------------------------------------------
Developed with:

The Dumb Artist Library (TX Library)
TXLib [Ver: 00173a, Rev: 172, Date: 2023-08-12 11:12:24 +0400]
Copyright (C) Ded (Ilya Dedinsky, http://txlib.ru) <mail@txlib.ru>
See license on: http://txlib.ru

TXLib file:	c:\program files\codeblocks\mingw\include\txlib.h
Compiled:	Sep 23 2023 16:54:49, GNU g++ 4.8.1, std=201103L, MinGW Runtime 3.20, 32-bit, DEBUG
Started:	Sep 23 2023 16:54:51

Run file:	C:\pupach_MFTI\pupach_atom\stack\stack.exe
Directory:	C:\pupach_MFTI\pupach_atom\stack

--------------------------------------------------

--------------------------------------------------
TXLib соболезнует...

Программа: C:\pupach_MFTI\pupach_atom\stack\stack.exe,

ВНЕЗАПНО: Исключение С++, вызванное оператором throw.

#22: Исключение EXCEPTION_CPP_MSC (0xE06D7363) при выполнении кода по адресу 0x75838412 в функции RaiseException() в модуле C:\Windows\System32\KERNELBASE.dll. Дополнительно, превышен лимит исключений _TX_EXCEPTIONS_LIMIT (16). Также превышен лимит фатальных исключений _TX_FATAL_EXCEPTIONS_LIMIT (16). Спасибо _txVectoredExceptionHandler(), что сообщил. Люблю его <3

Ой, всё (EXCEPTION_NONCONTINUABLE).

С помощью функции _set_se_translator() вы можете сами обработать эту ошибку.

#4: TXLib [Ver: 00173a, Rev: 172, Date: 2023-08-12 11:12:24 +0400], Instance: 0x005052FC (32-bit), Flags: Cmdre0, Thread: 0x19B4 (Main), GetLastError(): 8 (Not enough memory resources are available to process this command), errno: 12 (Visual C++ CRT: Not enough memory to complete call to strerror.). 

--------------------------------------------------
Стек вызовов:

# 0 0x75838412 in C:\Windows\System32\KERNELBASE.dll: RaiseException()
# 1 0x753FAB98 in C:\Windows\System32\msvcrt.dll: CxxThrowException()
# 6 0x7747E030 in C:\Windows\SYSTEM32\ntdll.dll: RtlUnlockHeap()
# 7 0x770B5E1C in C:\Windows\System32\win32u.dll: NtUserQueryInputContext()

--------------------------------------------------
Стек вызовов TX:

# 0 in int {anonymous}::TX::txMessageBox(const char*, const char*, unsigned int) at c:\program files\codeblocks\mingw\include\txlib.h (12715):

  12713: 
  12714: $   HWND wnd = _txCanvas_Window;
=>12715: $   int  ret = MessageBoxW ((wnd && IsWindowVisible (wnd))? wnd : _TX_CALL (Win32::GetConsoleWindow,()),
  12716:                             textW, headerW, flags | MB_SETFOREGROUND | MB_TOPMOST);
  12717: 

# 1 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

# 2 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\program files\codeblocks\mingw\include\txlib.h (11982):

  11980: $       bool                    inTX   = false;
  11981: 
=>11982:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  11983:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  11984: 

# 3 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11478):

  11476: $       unsigned err = GetLastError();
  11477: 
=>11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
  11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

# 4 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

# 5 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\program files\codeblocks\mingw\include\txlib.h (11982):

  11980: $       bool                    inTX   = false;
  11981: 
=>11982:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  11983:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  11984: 

# 6 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11478):

  11476: $       unsigned err = GetLastError();
  11477: 
=>11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
  11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

# 7 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

# 8 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

# 9 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#10 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#11 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#12 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#13 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#14 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#15 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#16 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#17 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#18 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#19 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#20 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#21 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#22 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#23 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#24 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#25 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#26 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#27 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#28 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#29 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#30 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#31 in bool {anonymous}::TX::_txCreateMiniDump(EXCEPTION_POINTERS*) at c:\program files\codeblocks\mingw\include\txlib.h (12420):

  12418: $   Win32::MINIDUMP_TYPE type = (Win32::MINIDUMP_TYPE) (Win32::MiniDumpWithIndirectlyReferencedMemory | Win32::MiniDumpScanMemory);
  12419: 
=>12420: $   bool ok = _TX_CALL (Win32::MiniDumpWriteDump, (GetCurrentProcess(), GetCurrentProcessId(), file, type,
  12421:                                                    ((exc)? &excInfo : NULL), NULL, NULL));
  12422: $   CloseHandle (file);

#32 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\program files\codeblocks\mingw\include\txlib.h (12028):

  12026: 
  12027:     #if !defined (_TX_NO_MINIDUMP)
=>12028: $   _txCreateMiniDump (exc);
  12029:     #endif
  12030: 

#33 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11478):

  11476: $       unsigned err = GetLastError();
  11477: 
=>11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
  11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#34 in int {anonymous}::TX::txSetLocale(int, const char*, const wchar_t*) at c:\program files\codeblocks\mingw\include\txlib.h (10442):

  10440: $   if (locale)
  10441:         {
=>10442: $       setlocale (LC_ALL,     locale);
  10443: $       setlocale (LC_NUMERIC, "C");              // Return to decimal point (3.14) instead of comma (3,14) in floating numbers
  10444:         }

#35 in void {anonymous}::TX::_txPauseBeforeTermination(HWND) at c:\program files\codeblocks\mingw\include\txlib.h (9190):

   9188: $   bool wine    = !!Win32::wine_get_version;
   9189: 
=> 9190: $   txSetLocale();
   9191: $   int attr = txSetConsoleAttr (FOREGROUND_LIGHTGRAY);
   9192: 

#36 in void {anonymous}::TX::_txCleanup() at c:\program files\codeblocks\mingw\include\txlib.h (9077):

   9075: $       if (console && isParentWaitable >= 0)
   9076:             {
=> 9077: $           _txPauseBeforeTermination (canvas);
   9078: $           paused = true;
   9079:             }

#37 in void {anonymous}::TX::_txOnExit(int) at c:\program files\codeblocks\mingw\include\txlib.h (8918):

   8916:         }
   8917: 
=> 8918: $5  _txCleanup();
   8919: 
   8920:     if (retcode != 0)

--------------------------------------------------
Developed with:

The Dumb Artist Library (TX Library)
TXLib [Ver: 00173a, Rev: 172, Date: 2023-08-12 11:12:24 +0400]
Copyright (C) Ded (Ilya Dedinsky, http://txlib.ru) <mail@txlib.ru>
See license on: http://txlib.ru

TXLib file:	c:\program files\codeblocks\mingw\include\txlib.h
Compiled:	Sep 23 2023 16:54:49, GNU g++ 4.8.1, std=201103L, MinGW Runtime 3.20, 32-bit, DEBUG
Started:	Sep 23 2023 16:54:52

Run file:	C:\pupach_MFTI\pupach_atom\stack\stack.exe
Directory:	C:\pupach_MFTI\pupach_atom\stack

--------------------------------------------------

--------------------------------------------------
TXLib предупреждает:

Программа: C:\pupach_MFTI\pupach_atom\stack\stack.exe,

ВНЕЗАПНО: Нарушение доступа к памяти.

#16: Исключение EXCEPTION_ACCESS_VIOLATION (0xC0000005) при выполнении кода по адресу 0x7746F025 в функции RtlGetCurrentServiceSessionId(). Попытка прочесть данные по адресу 0xFFFFFFFF в модуле C:\Windows\SYSTEM32\ntdll.dll. Дополнительно, превышен лимит исключений _TX_EXCEPTIONS_LIMIT (16). Спасибо _txVectoredExceptionHandler(), что сообщил. Люблю его <3

#2: TXLib [Ver: 00173a, Rev: 172, Date: 2023-08-12 11:12:24 +0400], Instance: 0x005042FC (32-bit), Flags: Cmdre0, Thread: 0x7228 (Main), GetLastError(): 8 (Not enough memory resources are available to process this command), errno: 12 (Visual C++ CRT: Not enough memory to complete call to strerror.). 

--------------------------------------------------
Стек вызовов:

# 0 0x7746F025 in C:\Windows\SYSTEM32\ntdll.dll: RtlGetCurrentServiceSessionId()
# 1 0x774AFC6D in C:\Windows\SYSTEM32\ntdll.dll: RtlRemovePropertyStore()
# 2 0x7746EBA6 in C:\Windows\SYSTEM32\ntdll.dll: RtlFreeHeap()
# 3 0x75408109 in C:\Windows\System32\msvcrt.dll: free()
# 4 0x75416608 in C:\Windows\System32\msvcrt.dll: __unguarded_readlc_active_add_func()
# 5 0x7541762D in C:\Windows\System32\msvcrt.dll: get_current_locale()
# 6 0x75417777 in C:\Windows\System32\msvcrt.dll: setlocale()
# 7 0x0040E220 in C:\pupach_MFTI\pupach_atom\stack\stack.exe: _ZN12_GLOBAL__N_12TX11txSetLocaleEiPKcPKw()
# 8 0x0041AA67 in C:\pupach_MFTI\pupach_atom\stack\stack.exe: _ZN12_GLOBAL__N_12TX15_txProcessErrorEPKciS2_jS2_Pc()
# 9 0x00410DDE in C:\pupach_MFTI\pupach_atom\stack\stack.exe: _ZN12_GLOBAL__N_12TX8_txErrorEPKciS2_jS2_z()
#10 0x0041252B in C:\pupach_MFTI\pupach_atom\stack\stack.exe: _ZN12_GLOBAL__N_12TX17_txOnExceptionSEHEP19_EXCEPTION_POINTERSPKc()
#11 0x00411C44 in C:\pupach_MFTI\pupach_atom\stack\stack.exe: _ZN12_GLOBAL__N_12TX27_txVectoredExceptionHandlerEP19_EXCEPTION_POINTERS@4()
#12 0x7748FFFF in C:\Windows\SYSTEM32\ntdll.dll: LdrSetDllManifestProber()
#13 0x7748C727 in C:\Windows\SYSTEM32\ntdll.dll: RtlUnwind()
#14 0x77498756 in C:\Windows\SYSTEM32\ntdll.dll: KiUserExceptionDispatcher()
#15 0x753FAB98 in C:\Windows\System32\msvcrt.dll: CxxThrowException()
#16 0x7778611A in C:\Windows\DbgHelp32.dll: MiniDumpReadDumpStream()
#17 0x7772DD3F in C:\Windows\DbgHelp32.dll: RemoveInvalidModuleList()
#18 0x7774C070 in C:\Windows\DbgHelp32.dll: ImagehlpApiVersionEx()
#19 0x7774ACDE in C:\Windows\DbgHelp32.dll: ImagehlpApiVersionEx()
#20 0x7774A985 in C:\Windows\DbgHelp32.dll: ImagehlpApiVersionEx()
#21 0x7774224A in C:\Windows\DbgHelp32.dll: SymEnumerateSymbolsW64()
#22 0x777458BA in C:\Windows\DbgHelp32.dll: SymFromInlineContext()
#23 0x7774590E in C:\Windows\DbgHelp32.dll: SymFromAddr()

--------------------------------------------------
Стек вызовов TX:

# 0 in int {anonymous}::TX::txSetLocale(int, const char*, const wchar_t*) at c:\program files\codeblocks\mingw\include\txlib.h (10442):

  10440: $   if (locale)
  10441:         {
=>10442: $       setlocale (LC_ALL,     locale);
  10443: $       setlocale (LC_NUMERIC, "C");              // Return to decimal point (3.14) instead of comma (3,14) in floating numbers
  10444:         }

# 1 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

# 2 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

# 3 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

# 4 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

# 5 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

# 6 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

# 7 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

# 8 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

# 9 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#10 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#11 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#12 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#13 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#14 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#15 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#16 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#17 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#18 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#19 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#20 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#21 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

--------------------------------------------------
Developed with:

The Dumb Artist Library (TX Library)
TXLib [Ver: 00173a, Rev: 172, Date: 2023-08-12 11:12:24 +0400]
Copyright (C) Ded (Ilya Dedinsky, http://txlib.ru) <mail@txlib.ru>
See license on: http://txlib.ru

TXLib file:	c:\program files\codeblocks\mingw\include\txlib.h
Compiled:	Sep 23 2023 16:56:15, GNU g++ 4.8.1, std=201103L, MinGW Runtime 3.20, 32-bit, DEBUG
Started:	Sep 23 2023 16:56:18

Run file:	C:\pupach_MFTI\pupach_atom\stack\stack.exe
Directory:	C:\pupach_MFTI\pupach_atom\stack

--------------------------------------------------

--------------------------------------------------
TXLib соболезнует...

Программа: C:\pupach_MFTI\pupach_atom\stack\stack.exe,

ВНЕЗАПНО: Нарушение доступа к памяти.

#16: Исключение EXCEPTION_ACCESS_VIOLATION (0xC0000005) при выполнении кода по адресу 0x7746F025 в функции RtlGetCurrentServiceSessionId(). Попытка прочесть данные по адресу 0xFFFFFFFF в модуле C:\Windows\SYSTEM32\ntdll.dll. Дополнительно, превышен лимит исключений _TX_EXCEPTIONS_LIMIT (16). Спасибо _txVectoredExceptionHandler(), что сообщил. Люблю его <3

С помощью функции _set_se_translator() вы можете сами обработать эту ошибку.

#3: TXLib [Ver: 00173a, Rev: 172, Date: 2023-08-12 11:12:24 +0400], Instance: 0x005042FC (32-bit), Flags: Cmdre0, Thread: 0x7228 (Main), GetLastError(): 8 (Not enough memory resources are available to process this command), errno: 12 (Visual C++ CRT: Not enough memory to complete call to strerror.). 

--------------------------------------------------
Стек вызовов:

# 0 0x7746F025 in C:\Windows\SYSTEM32\ntdll.dll: RtlGetCurrentServiceSessionId()
# 1 0x774AFC6D in C:\Windows\SYSTEM32\ntdll.dll: RtlRemovePropertyStore()
# 2 0x7746EBA6 in C:\Windows\SYSTEM32\ntdll.dll: RtlFreeHeap()
# 3 0x75408109 in C:\Windows\System32\msvcrt.dll: free()
# 4 0x75416608 in C:\Windows\System32\msvcrt.dll: __unguarded_readlc_active_add_func()
# 5 0x7541762D in C:\Windows\System32\msvcrt.dll: get_current_locale()
# 6 0x75417777 in C:\Windows\System32\msvcrt.dll: setlocale()
# 7 0x0040E220 in C:\pupach_MFTI\pupach_atom\stack\stack.exe: _ZN12_GLOBAL__N_12TX11txSetLocaleEiPKcPKw()
# 8 0x0041AA67 in C:\pupach_MFTI\pupach_atom\stack\stack.exe: _ZN12_GLOBAL__N_12TX15_txProcessErrorEPKciS2_jS2_Pc()
# 9 0x00410DDE in C:\pupach_MFTI\pupach_atom\stack\stack.exe: _ZN12_GLOBAL__N_12TX8_txErrorEPKciS2_jS2_z()
#10 0x0041252B in C:\pupach_MFTI\pupach_atom\stack\stack.exe: _ZN12_GLOBAL__N_12TX17_txOnExceptionSEHEP19_EXCEPTION_POINTERSPKc()
#11 0x00411C44 in C:\pupach_MFTI\pupach_atom\stack\stack.exe: _ZN12_GLOBAL__N_12TX27_txVectoredExceptionHandlerEP19_EXCEPTION_POINTERS@4()
#12 0x7748FFFF in C:\Windows\SYSTEM32\ntdll.dll: LdrSetDllManifestProber()
#13 0x7748C727 in C:\Windows\SYSTEM32\ntdll.dll: RtlUnwind()
#14 0x77498756 in C:\Windows\SYSTEM32\ntdll.dll: KiUserExceptionDispatcher()
#15 0x753FAB98 in C:\Windows\System32\msvcrt.dll: CxxThrowException()
#16 0x7778611A in C:\Windows\DbgHelp32.dll: MiniDumpReadDumpStream()
#17 0x7772DD3F in C:\Windows\DbgHelp32.dll: RemoveInvalidModuleList()
#18 0x7774C070 in C:\Windows\DbgHelp32.dll: ImagehlpApiVersionEx()
#19 0x7774ACDE in C:\Windows\DbgHelp32.dll: ImagehlpApiVersionEx()
#20 0x7774A985 in C:\Windows\DbgHelp32.dll: ImagehlpApiVersionEx()
#21 0x7774224A in C:\Windows\DbgHelp32.dll: SymEnumerateSymbolsW64()
#22 0x777458BA in C:\Windows\DbgHelp32.dll: SymFromInlineContext()
#23 0x7774590E in C:\Windows\DbgHelp32.dll: SymFromAddr()

--------------------------------------------------
Стек вызовов TX:

# 0 in int {anonymous}::TX::txSetLocale(int, const char*, const wchar_t*) at c:\program files\codeblocks\mingw\include\txlib.h (10442):

  10440: $   if (locale)
  10441:         {
=>10442: $       setlocale (LC_ALL,     locale);
  10443: $       setlocale (LC_NUMERIC, "C");              // Return to decimal point (3.14) instead of comma (3,14) in floating numbers
  10444:         }

# 1 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

# 2 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

# 3 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

# 4 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

# 5 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

# 6 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

# 7 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

# 8 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

# 9 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#10 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#11 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#12 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#13 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#14 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#15 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#16 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#17 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#18 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#19 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#20 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#21 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

--------------------------------------------------
Developed with:

The Dumb Artist Library (TX Library)
TXLib [Ver: 00173a, Rev: 172, Date: 2023-08-12 11:12:24 +0400]
Copyright (C) Ded (Ilya Dedinsky, http://txlib.ru) <mail@txlib.ru>
See license on: http://txlib.ru

TXLib file:	c:\program files\codeblocks\mingw\include\txlib.h
Compiled:	Sep 23 2023 16:56:15, GNU g++ 4.8.1, std=201103L, MinGW Runtime 3.20, 32-bit, DEBUG
Started:	Sep 23 2023 16:56:18

Run file:	C:\pupach_MFTI\pupach_atom\stack\stack.exe
Directory:	C:\pupach_MFTI\pupach_atom\stack

--------------------------------------------------

--------------------------------------------------
TXLib предупреждает:

Программа: C:\pupach_MFTI\pupach_atom\stack\stack.exe,

ВНЕЗАПНО: Исключение С++, вызванное оператором throw.

#17: Исключение EXCEPTION_CPP_MSC (0xE06D7363) при выполнении кода по адресу 0x75838412 в функции RaiseException() в модуле C:\Windows\System32\KERNELBASE.dll. Дополнительно, превышен лимит исключений _TX_EXCEPTIONS_LIMIT (16). Спасибо _txVectoredExceptionHandler(), что сообщил. Люблю его <3

Ой, всё (EXCEPTION_NONCONTINUABLE).

#4: TXLib [Ver: 00173a, Rev: 172, Date: 2023-08-12 11:12:24 +0400], Instance: 0x005042FC (32-bit), Flags: Cmdre0, Thread: 0x7228 (Main), GetLastError(): 8 (Not enough memory resources are available to process this command), errno: 12 (Visual C++ CRT: Not enough memory to complete call to strerror.). 

--------------------------------------------------
Стек вызовов:

# 0 0x75838412 in C:\Windows\System32\KERNELBASE.dll: RaiseException()
# 1 0x753FAB98 in C:\Windows\System32\msvcrt.dll: CxxThrowException()
# 6 0x7747E030 in C:\Windows\SYSTEM32\ntdll.dll: RtlUnlockHeap()
# 7 0x770B5E1C in C:\Windows\System32\win32u.dll: NtUserQueryInputContext()

--------------------------------------------------
Стек вызовов TX:

# 0 in int {anonymous}::TX::txMessageBox(const char*, const char*, unsigned int) at c:\program files\codeblocks\mingw\include\txlib.h (12715):

  12713: 
  12714: $   HWND wnd = _txCanvas_Window;
=>12715: $   int  ret = MessageBoxW ((wnd && IsWindowVisible (wnd))? wnd : _TX_CALL (Win32::GetConsoleWindow,()),
  12716:                             textW, headerW, flags | MB_SETFOREGROUND | MB_TOPMOST);
  12717: 

# 1 in const char* {anonymous}::TX::_txProcessError(const char*, int, const char*, unsigned int, const char*, va_list) at c:\program files\codeblocks\mingw\include\txlib.h (12562):

  12560: 
  12561:     if (stkTrace && strstr (stkTrace, ".exe: "))
=>12562:         {$ fprintf (stderr,    "Стек вызовов:\n\n"
  12563:                                "%s\n\n"
  12564:                                "--------------------------------------------------\n",

# 2 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

# 3 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

# 4 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

# 5 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

# 6 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

# 7 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

# 8 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

# 9 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#10 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#11 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#12 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#13 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#14 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#15 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#16 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#17 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#18 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#19 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#20 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#21 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#22 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

--------------------------------------------------
Developed with:

The Dumb Artist Library (TX Library)
TXLib [Ver: 00173a, Rev: 172, Date: 2023-08-12 11:12:24 +0400]
Copyright (C) Ded (Ilya Dedinsky, http://txlib.ru) <mail@txlib.ru>
See license on: http://txlib.ru

TXLib file:	c:\program files\codeblocks\mingw\include\txlib.h
Compiled:	Sep 23 2023 16:56:15, GNU g++ 4.8.1, std=201103L, MinGW Runtime 3.20, 32-bit, DEBUG
Started:	Sep 23 2023 16:56:18

Run file:	C:\pupach_MFTI\pupach_atom\stack\stack.exe
Directory:	C:\pupach_MFTI\pupach_atom\stack

--------------------------------------------------

--------------------------------------------------
TXLib соболезнует...

Программа: C:\pupach_MFTI\pupach_atom\stack\stack.exe,

ВНЕЗАПНО: Исключение С++, вызванное оператором throw.

#17: Исключение EXCEPTION_CPP_MSC (0xE06D7363) при выполнении кода по адресу 0x75838412 в функции RaiseException() в модуле C:\Windows\System32\KERNELBASE.dll. Дополнительно, превышен лимит исключений _TX_EXCEPTIONS_LIMIT (16). Спасибо _txVectoredExceptionHandler(), что сообщил. Люблю его <3

Ой, всё (EXCEPTION_NONCONTINUABLE).

С помощью функции _set_se_translator() вы можете сами обработать эту ошибку.

#5: TXLib [Ver: 00173a, Rev: 172, Date: 2023-08-12 11:12:24 +0400], Instance: 0x005042FC (32-bit), Flags: Cmdre0, Thread: 0x7228 (Main), GetLastError(): 8 (Not enough memory resources are available to process this command), errno: 12 (Visual C++ CRT: Not enough memory to complete call to strerror.). 

--------------------------------------------------
Стек вызовов:

# 0 0x75838412 in C:\Windows\System32\KERNELBASE.dll: RaiseException()
# 1 0x753FAB98 in C:\Windows\System32\msvcrt.dll: CxxThrowException()
# 6 0x7747E030 in C:\Windows\SYSTEM32\ntdll.dll: RtlUnlockHeap()
# 7 0x770B5E1C in C:\Windows\System32\win32u.dll: NtUserQueryInputContext()

--------------------------------------------------
Стек вызовов TX:

# 0 in int {anonymous}::TX::txMessageBox(const char*, const char*, unsigned int) at c:\program files\codeblocks\mingw\include\txlib.h (12715):

  12713: 
  12714: $   HWND wnd = _txCanvas_Window;
=>12715: $   int  ret = MessageBoxW ((wnd && IsWindowVisible (wnd))? wnd : _TX_CALL (Win32::GetConsoleWindow,()),
  12716:                             textW, headerW, flags | MB_SETFOREGROUND | MB_TOPMOST);
  12717: 

# 1 in const char* {anonymous}::TX::_txProcessError(const char*, int, const char*, unsigned int, const char*, va_list) at c:\program files\codeblocks\mingw\include\txlib.h (12562):

  12560: 
  12561:     if (stkTrace && strstr (stkTrace, ".exe: "))
=>12562:         {$ fprintf (stderr,    "Стек вызовов:\n\n"
  12563:                                "%s\n\n"
  12564:                                "--------------------------------------------------\n",

# 2 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

# 3 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

# 4 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

# 5 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

# 6 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

# 7 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

# 8 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

# 9 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#10 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#11 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#12 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#13 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#14 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#15 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#16 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#17 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#18 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#19 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#20 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#21 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#22 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

--------------------------------------------------
Developed with:

The Dumb Artist Library (TX Library)
TXLib [Ver: 00173a, Rev: 172, Date: 2023-08-12 11:12:24 +0400]
Copyright (C) Ded (Ilya Dedinsky, http://txlib.ru) <mail@txlib.ru>
See license on: http://txlib.ru

TXLib file:	c:\program files\codeblocks\mingw\include\txlib.h
Compiled:	Sep 23 2023 16:56:15, GNU g++ 4.8.1, std=201103L, MinGW Runtime 3.20, 32-bit, DEBUG
Started:	Sep 23 2023 16:56:18

Run file:	C:\pupach_MFTI\pupach_atom\stack\stack.exe
Directory:	C:\pupach_MFTI\pupach_atom\stack

--------------------------------------------------

--------------------------------------------------
TXLib предупреждает:

Программа: C:\pupach_MFTI\pupach_atom\stack\stack.exe,

ВНЕЗАПНО: Нарушение доступа к памяти.

#21: Исключение EXCEPTION_ACCESS_VIOLATION (0xC0000005) при выполнении кода по адресу 0x7746D5AA в функции RtlAllocateHeap(). Попытка прочесть данные по адресу 0xFFFFFFFF в модуле C:\Windows\SYSTEM32\ntdll.dll. Дополнительно, превышен лимит исключений _TX_EXCEPTIONS_LIMIT (16). Также превышен лимит фатальных исключений _TX_FATAL_EXCEPTIONS_LIMIT (16). Спасибо _txVectoredExceptionHandler(), что сообщил. Люблю его <3

#1: TXLib [Ver: 00173a, Rev: 172, Date: 2023-08-12 11:12:24 +0400], Instance: 0x005052FC (32-bit), Flags: Cmdre0, Thread: 0x30C4 (Main), errno: 12 (Visual C++ CRT: Not enough memory to complete call to strerror.). 

--------------------------------------------------
Стек вызовов:

# 0 0x7746D5AA in C:\Windows\SYSTEM32\ntdll.dll: RtlAllocateHeap()
# 1 0x7746CB02 in C:\Windows\SYSTEM32\ntdll.dll: RtlAllocateHeap()
# 2 0x7746BAFE in C:\Windows\SYSTEM32\ntdll.dll: RtlAllocateHeap()
# 3 0x75408995 in C:\Windows\System32\msvcrt.dll: realloc()
# 4 0x7540806A in C:\Windows\System32\msvcrt.dll: calloc()
# 5 0x6626DA84 in C:\Windows\MgwHelp32.dll: SymGetLineFromAddrW64()

--------------------------------------------------
Стек вызовов TX:

# 0 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

# 1 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\program files\codeblocks\mingw\include\txlib.h (11982):

  11980: $       bool                    inTX   = false;
  11981: 
=>11982:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  11983:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  11984: 

# 2 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11478):

  11476: $       unsigned err = GetLastError();
  11477: 
=>11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
  11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

# 3 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

# 4 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\program files\codeblocks\mingw\include\txlib.h (11982):

  11980: $       bool                    inTX   = false;
  11981: 
=>11982:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  11983:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  11984: 

# 5 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11478):

  11476: $       unsigned err = GetLastError();
  11477: 
=>11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
  11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

# 6 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

# 7 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

# 8 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

# 9 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#10 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#11 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#12 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#13 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#14 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#15 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#16 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#17 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#18 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#19 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#20 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#21 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#22 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#23 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#24 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#25 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#26 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#27 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#28 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#29 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#30 in bool {anonymous}::TX::_txCreateMiniDump(EXCEPTION_POINTERS*) at c:\program files\codeblocks\mingw\include\txlib.h (12420):

  12418: $   Win32::MINIDUMP_TYPE type = (Win32::MINIDUMP_TYPE) (Win32::MiniDumpWithIndirectlyReferencedMemory | Win32::MiniDumpScanMemory);
  12419: 
=>12420: $   bool ok = _TX_CALL (Win32::MiniDumpWriteDump, (GetCurrentProcess(), GetCurrentProcessId(), file, type,
  12421:                                                    ((exc)? &excInfo : NULL), NULL, NULL));
  12422: $   CloseHandle (file);

#31 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\program files\codeblocks\mingw\include\txlib.h (12028):

  12026: 
  12027:     #if !defined (_TX_NO_MINIDUMP)
=>12028: $   _txCreateMiniDump (exc);
  12029:     #endif
  12030: 

#32 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11478):

  11476: $       unsigned err = GetLastError();
  11477: 
=>11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
  11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#33 in int {anonymous}::TX::txSetLocale(int, const char*, const wchar_t*) at c:\program files\codeblocks\mingw\include\txlib.h (10442):

  10440: $   if (locale)
  10441:         {
=>10442: $       setlocale (LC_ALL,     locale);
  10443: $       setlocale (LC_NUMERIC, "C");              // Return to decimal point (3.14) instead of comma (3,14) in floating numbers
  10444:         }

#34 in void {anonymous}::TX::_txPauseBeforeTermination(HWND) at c:\program files\codeblocks\mingw\include\txlib.h (9190):

   9188: $   bool wine    = !!Win32::wine_get_version;
   9189: 
=> 9190: $   txSetLocale();
   9191: $   int attr = txSetConsoleAttr (FOREGROUND_LIGHTGRAY);
   9192: 

#35 in void {anonymous}::TX::_txCleanup() at c:\program files\codeblocks\mingw\include\txlib.h (9077):

   9075: $       if (console && isParentWaitable >= 0)
   9076:             {
=> 9077: $           _txPauseBeforeTermination (canvas);
   9078: $           paused = true;
   9079:             }

#36 in void {anonymous}::TX::_txOnExit(int) at c:\program files\codeblocks\mingw\include\txlib.h (8918):

   8916:         }
   8917: 
=> 8918: $5  _txCleanup();
   8919: 
   8920:     if (retcode != 0)

--------------------------------------------------
Developed with:

The Dumb Artist Library (TX Library)
TXLib [Ver: 00173a, Rev: 172, Date: 2023-08-12 11:12:24 +0400]
Copyright (C) Ded (Ilya Dedinsky, http://txlib.ru) <mail@txlib.ru>
See license on: http://txlib.ru

TXLib file:	c:\program files\codeblocks\mingw\include\txlib.h
Compiled:	Sep 23 2023 17:02:14, GNU g++ 4.8.1, std=201103L, MinGW Runtime 3.20, 32-bit, DEBUG
Started:	Sep 23 2023 17:02:16

Run file:	C:\pupach_MFTI\pupach_atom\stack\stack.exe
Directory:	C:\pupach_MFTI\pupach_atom\stack

--------------------------------------------------

--------------------------------------------------
TXLib соболезнует...

Программа: C:\pupach_MFTI\pupach_atom\stack\stack.exe,

ВНЕЗАПНО: Нарушение доступа к памяти.

#21: Исключение EXCEPTION_ACCESS_VIOLATION (0xC0000005) при выполнении кода по адресу 0x7746D5AA в функции RtlAllocateHeap(). Попытка прочесть данные по адресу 0xFFFFFFFF в модуле C:\Windows\SYSTEM32\ntdll.dll. Дополнительно, превышен лимит исключений _TX_EXCEPTIONS_LIMIT (16). Также превышен лимит фатальных исключений _TX_FATAL_EXCEPTIONS_LIMIT (16). Спасибо _txVectoredExceptionHandler(), что сообщил. Люблю его <3

С помощью функции _set_se_translator() вы можете сами обработать эту ошибку.

#2: TXLib [Ver: 00173a, Rev: 172, Date: 2023-08-12 11:12:24 +0400], Instance: 0x005052FC (32-bit), Flags: Cmdre0, Thread: 0x30C4 (Main), errno: 12 (Visual C++ CRT: Not enough memory to complete call to strerror.). 

--------------------------------------------------
Стек вызовов:

# 0 0x7746D5AA in C:\Windows\SYSTEM32\ntdll.dll: RtlAllocateHeap()
# 1 0x7746CB02 in C:\Windows\SYSTEM32\ntdll.dll: RtlAllocateHeap()
# 2 0x7746BAFE in C:\Windows\SYSTEM32\ntdll.dll: RtlAllocateHeap()
# 3 0x75408995 in C:\Windows\System32\msvcrt.dll: realloc()
# 4 0x7540806A in C:\Windows\System32\msvcrt.dll: calloc()
# 5 0x6626DA84 in C:\Windows\MgwHelp32.dll: SymGetLineFromAddrW64()

--------------------------------------------------
Стек вызовов TX:

# 0 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

# 1 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\program files\codeblocks\mingw\include\txlib.h (11982):

  11980: $       bool                    inTX   = false;
  11981: 
=>11982:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  11983:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  11984: 

# 2 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11478):

  11476: $       unsigned err = GetLastError();
  11477: 
=>11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
  11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

# 3 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

# 4 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\program files\codeblocks\mingw\include\txlib.h (11982):

  11980: $       bool                    inTX   = false;
  11981: 
=>11982:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  11983:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  11984: 

# 5 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11478):

  11476: $       unsigned err = GetLastError();
  11477: 
=>11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
  11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

# 6 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

# 7 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

# 8 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

# 9 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#10 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#11 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#12 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#13 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#14 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#15 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#16 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#17 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#18 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#19 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#20 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#21 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#22 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#23 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#24 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#25 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#26 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#27 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#28 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#29 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#30 in bool {anonymous}::TX::_txCreateMiniDump(EXCEPTION_POINTERS*) at c:\program files\codeblocks\mingw\include\txlib.h (12420):

  12418: $   Win32::MINIDUMP_TYPE type = (Win32::MINIDUMP_TYPE) (Win32::MiniDumpWithIndirectlyReferencedMemory | Win32::MiniDumpScanMemory);
  12419: 
=>12420: $   bool ok = _TX_CALL (Win32::MiniDumpWriteDump, (GetCurrentProcess(), GetCurrentProcessId(), file, type,
  12421:                                                    ((exc)? &excInfo : NULL), NULL, NULL));
  12422: $   CloseHandle (file);

#31 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\program files\codeblocks\mingw\include\txlib.h (12028):

  12026: 
  12027:     #if !defined (_TX_NO_MINIDUMP)
=>12028: $   _txCreateMiniDump (exc);
  12029:     #endif
  12030: 

#32 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11478):

  11476: $       unsigned err = GetLastError();
  11477: 
=>11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
  11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#33 in int {anonymous}::TX::txSetLocale(int, const char*, const wchar_t*) at c:\program files\codeblocks\mingw\include\txlib.h (10442):

  10440: $   if (locale)
  10441:         {
=>10442: $       setlocale (LC_ALL,     locale);
  10443: $       setlocale (LC_NUMERIC, "C");              // Return to decimal point (3.14) instead of comma (3,14) in floating numbers
  10444:         }

#34 in void {anonymous}::TX::_txPauseBeforeTermination(HWND) at c:\program files\codeblocks\mingw\include\txlib.h (9190):

   9188: $   bool wine    = !!Win32::wine_get_version;
   9189: 
=> 9190: $   txSetLocale();
   9191: $   int attr = txSetConsoleAttr (FOREGROUND_LIGHTGRAY);
   9192: 

#35 in void {anonymous}::TX::_txCleanup() at c:\program files\codeblocks\mingw\include\txlib.h (9077):

   9075: $       if (console && isParentWaitable >= 0)
   9076:             {
=> 9077: $           _txPauseBeforeTermination (canvas);
   9078: $           paused = true;
   9079:             }

#36 in void {anonymous}::TX::_txOnExit(int) at c:\program files\codeblocks\mingw\include\txlib.h (8918):

   8916:         }
   8917: 
=> 8918: $5  _txCleanup();
   8919: 
   8920:     if (retcode != 0)

--------------------------------------------------
Developed with:

The Dumb Artist Library (TX Library)
TXLib [Ver: 00173a, Rev: 172, Date: 2023-08-12 11:12:24 +0400]
Copyright (C) Ded (Ilya Dedinsky, http://txlib.ru) <mail@txlib.ru>
See license on: http://txlib.ru

TXLib file:	c:\program files\codeblocks\mingw\include\txlib.h
Compiled:	Sep 23 2023 17:02:14, GNU g++ 4.8.1, std=201103L, MinGW Runtime 3.20, 32-bit, DEBUG
Started:	Sep 23 2023 17:02:16

Run file:	C:\pupach_MFTI\pupach_atom\stack\stack.exe
Directory:	C:\pupach_MFTI\pupach_atom\stack

--------------------------------------------------

--------------------------------------------------
TXLib предупреждает:

Программа: C:\pupach_MFTI\pupach_atom\stack\stack.exe,

ВНЕЗАПНО: Исключение С++, вызванное оператором throw.

#22: Исключение EXCEPTION_CPP_MSC (0xE06D7363) при выполнении кода по адресу 0x75838412 в функции RaiseException() в модуле C:\Windows\System32\KERNELBASE.dll. Дополнительно, превышен лимит исключений _TX_EXCEPTIONS_LIMIT (16). Также превышен лимит фатальных исключений _TX_FATAL_EXCEPTIONS_LIMIT (16). Спасибо _txVectoredExceptionHandler(), что сообщил. Люблю его <3

Ой, всё (EXCEPTION_NONCONTINUABLE).

#3: TXLib [Ver: 00173a, Rev: 172, Date: 2023-08-12 11:12:24 +0400], Instance: 0x005052FC (32-bit), Flags: Cmdre0, Thread: 0x30C4 (Main), GetLastError(): 8 (Not enough memory resources are available to process this command), errno: 12 (Visual C++ CRT: Not enough memory to complete call to strerror.). 

--------------------------------------------------
Стек вызовов:

# 0 0x75838412 in C:\Windows\System32\KERNELBASE.dll: RaiseException()
# 1 0x753FAB98 in C:\Windows\System32\msvcrt.dll: CxxThrowException()
# 6 0x7747E030 in C:\Windows\SYSTEM32\ntdll.dll: RtlUnlockHeap()
# 7 0x770B5E1C in C:\Windows\System32\win32u.dll: NtUserQueryInputContext()

--------------------------------------------------
Стек вызовов TX:

# 0 in int {anonymous}::TX::txMessageBox(const char*, const char*, unsigned int) at c:\program files\codeblocks\mingw\include\txlib.h (12715):

  12713: 
  12714: $   HWND wnd = _txCanvas_Window;
=>12715: $   int  ret = MessageBoxW ((wnd && IsWindowVisible (wnd))? wnd : _TX_CALL (Win32::GetConsoleWindow,()),
  12716:                             textW, headerW, flags | MB_SETFOREGROUND | MB_TOPMOST);
  12717: 

# 1 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

# 2 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\program files\codeblocks\mingw\include\txlib.h (11982):

  11980: $       bool                    inTX   = false;
  11981: 
=>11982:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  11983:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  11984: 

# 3 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11478):

  11476: $       unsigned err = GetLastError();
  11477: 
=>11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
  11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

# 4 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

# 5 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\program files\codeblocks\mingw\include\txlib.h (11982):

  11980: $       bool                    inTX   = false;
  11981: 
=>11982:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  11983:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  11984: 

# 6 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11478):

  11476: $       unsigned err = GetLastError();
  11477: 
=>11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
  11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

# 7 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

# 8 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

# 9 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#10 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#11 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#12 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#13 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#14 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#15 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#16 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#17 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#18 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#19 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#20 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#21 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#22 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#23 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#24 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#25 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#26 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#27 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#28 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#29 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#30 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#31 in bool {anonymous}::TX::_txCreateMiniDump(EXCEPTION_POINTERS*) at c:\program files\codeblocks\mingw\include\txlib.h (12420):

  12418: $   Win32::MINIDUMP_TYPE type = (Win32::MINIDUMP_TYPE) (Win32::MiniDumpWithIndirectlyReferencedMemory | Win32::MiniDumpScanMemory);
  12419: 
=>12420: $   bool ok = _TX_CALL (Win32::MiniDumpWriteDump, (GetCurrentProcess(), GetCurrentProcessId(), file, type,
  12421:                                                    ((exc)? &excInfo : NULL), NULL, NULL));
  12422: $   CloseHandle (file);

#32 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\program files\codeblocks\mingw\include\txlib.h (12028):

  12026: 
  12027:     #if !defined (_TX_NO_MINIDUMP)
=>12028: $   _txCreateMiniDump (exc);
  12029:     #endif
  12030: 

#33 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11478):

  11476: $       unsigned err = GetLastError();
  11477: 
=>11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
  11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#34 in int {anonymous}::TX::txSetLocale(int, const char*, const wchar_t*) at c:\program files\codeblocks\mingw\include\txlib.h (10442):

  10440: $   if (locale)
  10441:         {
=>10442: $       setlocale (LC_ALL,     locale);
  10443: $       setlocale (LC_NUMERIC, "C");              // Return to decimal point (3.14) instead of comma (3,14) in floating numbers
  10444:         }

#35 in void {anonymous}::TX::_txPauseBeforeTermination(HWND) at c:\program files\codeblocks\mingw\include\txlib.h (9190):

   9188: $   bool wine    = !!Win32::wine_get_version;
   9189: 
=> 9190: $   txSetLocale();
   9191: $   int attr = txSetConsoleAttr (FOREGROUND_LIGHTGRAY);
   9192: 

#36 in void {anonymous}::TX::_txCleanup() at c:\program files\codeblocks\mingw\include\txlib.h (9077):

   9075: $       if (console && isParentWaitable >= 0)
   9076:             {
=> 9077: $           _txPauseBeforeTermination (canvas);
   9078: $           paused = true;
   9079:             }

#37 in void {anonymous}::TX::_txOnExit(int) at c:\program files\codeblocks\mingw\include\txlib.h (8918):

   8916:         }
   8917: 
=> 8918: $5  _txCleanup();
   8919: 
   8920:     if (retcode != 0)

--------------------------------------------------
Developed with:

The Dumb Artist Library (TX Library)
TXLib [Ver: 00173a, Rev: 172, Date: 2023-08-12 11:12:24 +0400]
Copyright (C) Ded (Ilya Dedinsky, http://txlib.ru) <mail@txlib.ru>
See license on: http://txlib.ru

TXLib file:	c:\program files\codeblocks\mingw\include\txlib.h
Compiled:	Sep 23 2023 17:02:14, GNU g++ 4.8.1, std=201103L, MinGW Runtime 3.20, 32-bit, DEBUG
Started:	Sep 23 2023 17:02:16

Run file:	C:\pupach_MFTI\pupach_atom\stack\stack.exe
Directory:	C:\pupach_MFTI\pupach_atom\stack

--------------------------------------------------

--------------------------------------------------
TXLib соболезнует...

Программа: C:\pupach_MFTI\pupach_atom\stack\stack.exe,

ВНЕЗАПНО: Исключение С++, вызванное оператором throw.

#22: Исключение EXCEPTION_CPP_MSC (0xE06D7363) при выполнении кода по адресу 0x75838412 в функции RaiseException() в модуле C:\Windows\System32\KERNELBASE.dll. Дополнительно, превышен лимит исключений _TX_EXCEPTIONS_LIMIT (16). Также превышен лимит фатальных исключений _TX_FATAL_EXCEPTIONS_LIMIT (16). Спасибо _txVectoredExceptionHandler(), что сообщил. Люблю его <3

Ой, всё (EXCEPTION_NONCONTINUABLE).

С помощью функции _set_se_translator() вы можете сами обработать эту ошибку.

#4: TXLib [Ver: 00173a, Rev: 172, Date: 2023-08-12 11:12:24 +0400], Instance: 0x005052FC (32-bit), Flags: Cmdre0, Thread: 0x30C4 (Main), GetLastError(): 8 (Not enough memory resources are available to process this command), errno: 12 (Visual C++ CRT: Not enough memory to complete call to strerror.). 

--------------------------------------------------
Стек вызовов:

# 0 0x75838412 in C:\Windows\System32\KERNELBASE.dll: RaiseException()
# 1 0x753FAB98 in C:\Windows\System32\msvcrt.dll: CxxThrowException()
# 6 0x7747E030 in C:\Windows\SYSTEM32\ntdll.dll: RtlUnlockHeap()
# 7 0x770B5E1C in C:\Windows\System32\win32u.dll: NtUserQueryInputContext()

--------------------------------------------------
Стек вызовов TX:

# 0 in int {anonymous}::TX::txMessageBox(const char*, const char*, unsigned int) at c:\program files\codeblocks\mingw\include\txlib.h (12715):

  12713: 
  12714: $   HWND wnd = _txCanvas_Window;
=>12715: $   int  ret = MessageBoxW ((wnd && IsWindowVisible (wnd))? wnd : _TX_CALL (Win32::GetConsoleWindow,()),
  12716:                             textW, headerW, flags | MB_SETFOREGROUND | MB_TOPMOST);
  12717: 

# 1 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

# 2 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\program files\codeblocks\mingw\include\txlib.h (11982):

  11980: $       bool                    inTX   = false;
  11981: 
=>11982:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  11983:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  11984: 

# 3 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11478):

  11476: $       unsigned err = GetLastError();
  11477: 
=>11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
  11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

# 4 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

# 5 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\program files\codeblocks\mingw\include\txlib.h (11982):

  11980: $       bool                    inTX   = false;
  11981: 
=>11982:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  11983:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  11984: 

# 6 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11478):

  11476: $       unsigned err = GetLastError();
  11477: 
=>11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
  11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

# 7 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

# 8 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

# 9 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#10 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#11 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#12 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#13 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#14 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#15 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#16 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#17 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#18 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#19 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#20 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#21 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#22 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#23 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#24 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#25 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#26 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#27 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#28 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\program files\codeblocks\mingw\include\txlib.h (12232):

  12230: $       unsigned long long ofs = 0;
  12231: 
=>12232: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12233: 
  12234:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#29 in intptr_t {anonymous}::TX::_txDumpExceptionSEH(char*, intptr_t, const EXCEPTION_RECORD*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11609):

  11607: $   Win32::IMAGEHLP_LINE64* line = NULL;
  11608: 
=>11609:     if (addr) {$ _txSymGetFromAddr (addr, &sym, &line); }
  11610: 
  11611: $   if (sym  &&                   *sym->Name)      PRINT_ (" в функции %s()", sym->Name);

#30 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11480):

  11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
=>11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);
  11481: $       _tx_snprintf_s      (_txTraceSE, (intptr_t) sizeof (_txTraceSE) - 1, "%s", stackTrace);
  11482: 

#31 in bool {anonymous}::TX::_txCreateMiniDump(EXCEPTION_POINTERS*) at c:\program files\codeblocks\mingw\include\txlib.h (12420):

  12418: $   Win32::MINIDUMP_TYPE type = (Win32::MINIDUMP_TYPE) (Win32::MiniDumpWithIndirectlyReferencedMemory | Win32::MiniDumpScanMemory);
  12419: 
=>12420: $   bool ok = _TX_CALL (Win32::MiniDumpWriteDump, (GetCurrentProcess(), GetCurrentProcessId(), file, type,
  12421:                                                    ((exc)? &excInfo : NULL), NULL, NULL));
  12422: $   CloseHandle (file);

#32 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\program files\codeblocks\mingw\include\txlib.h (12028):

  12026: 
  12027:     #if !defined (_TX_NO_MINIDUMP)
=>12028: $   _txCreateMiniDump (exc);
  12029:     #endif
  12030: 

#33 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\program files\codeblocks\mingw\include\txlib.h (11478):

  11476: $       unsigned err = GetLastError();
  11477: 
=>11478: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11479: 
  11480: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#34 in int {anonymous}::TX::txSetLocale(int, const char*, const wchar_t*) at c:\program files\codeblocks\mingw\include\txlib.h (10442):

  10440: $   if (locale)
  10441:         {
=>10442: $       setlocale (LC_ALL,     locale);
  10443: $       setlocale (LC_NUMERIC, "C");              // Return to decimal point (3.14) instead of comma (3,14) in floating numbers
  10444:         }

#35 in void {anonymous}::TX::_txPauseBeforeTermination(HWND) at c:\program files\codeblocks\mingw\include\txlib.h (9190):

   9188: $   bool wine    = !!Win32::wine_get_version;
   9189: 
=> 9190: $   txSetLocale();
   9191: $   int attr = txSetConsoleAttr (FOREGROUND_LIGHTGRAY);
   9192: 

#36 in void {anonymous}::TX::_txCleanup() at c:\program files\codeblocks\mingw\include\txlib.h (9077):

   9075: $       if (console && isParentWaitable >= 0)
   9076:             {
=> 9077: $           _txPauseBeforeTermination (canvas);
   9078: $           paused = true;
   9079:             }

#37 in void {anonymous}::TX::_txOnExit(int) at c:\program files\codeblocks\mingw\include\txlib.h (8918):

   8916:         }
   8917: 
=> 8918: $5  _txCleanup();
   8919: 
   8920:     if (retcode != 0)

--------------------------------------------------
Developed with:

The Dumb Artist Library (TX Library)
TXLib [Ver: 00173a, Rev: 172, Date: 2023-08-12 11:12:24 +0400]
Copyright (C) Ded (Ilya Dedinsky, http://txlib.ru) <mail@txlib.ru>
See license on: http://txlib.ru

TXLib file:	c:\program files\codeblocks\mingw\include\txlib.h
Compiled:	Sep 23 2023 17:02:14, GNU g++ 4.8.1, std=201103L, MinGW Runtime 3.20, 32-bit, DEBUG
Started:	Sep 23 2023 17:02:16

Run file:	C:\pupach_MFTI\pupach_atom\stack\stack.exe
Directory:	C:\pupach_MFTI\pupach_atom\stack

--------------------------------------------------

--------------------------------------------------
TXLib предупреждает:

Программа: C:\pupach_MFTI\pupach_atom\stack\stack.exe,

ВНЕЗАПНО: Нарушение доступа к памяти.

#1: Исключение EXCEPTION_ACCESS_VIOLATION (0xC0000005) при выполнении кода по адресу 0x0042C3C5 в функции Stack_Destructor() в файле C:/pupach_MFTI/pupach_atom/stack/stack.cpp на строке 136. Попытка записать данные по адресу NULL в модуле C:\pupach_MFTI\pupach_atom\stack\stack.exe. Спасибо _txVectoredExceptionHandler(), что сообщил. Люблю его <3

#1: TXLib [Ver: 00173a, Rev: 172, Date: 2023-08-12 11:12:24 +0400], Instance: 0x005052FC (32-bit), Flags: Cmdre0, Thread: 0x18C8 (Main). 

--------------------------------------------------
Стек вызовов:

# 0 0x0042C3C5 in C:\pupach_MFTI\pupach_atom\stack\stack.exe: Stack_Destructor() at C:/pupach_MFTI/pupach_atom/stack/stack.cpp (136):

    134:     for(int i = 0; i < (stk->copacity); i++)
    135:     {
=>  136:         *(stk->ptr_data + i) = POISON_VAL;
    137:     }
    138:     stk->ptr_data = (Elen_s *)(stk->ptr_data - (Can_type )(sizeof(char) * stk->size_canar));

# 1 0x0042C63B in C:\pupach_MFTI\pupach_atom\stack\stack.exe: _Stack_Dump() at C:/pupach_MFTI/pupach_atom/stack/stack.cpp (226):

    224: 
    225: 
=>  226:     Stack_Destructor(ptr_stk);
    227: 
    228:     LOG(1, stderr, "Stack_Destructor sucsesfull\n  %p\n", ptr_stk);

# 2 0x0042C035 in C:\pupach_MFTI\pupach_atom\stack\stack.exe: main() at C:/pupach_MFTI/pupach_atom/stack/stack.cpp (14):

     12:     Stack *stk = &stk1;
     13: 
=>   14:     STACK_DUMP(stk);
     15: 
     16:     size_t d = 10;

--------------------------------------------------
Developed with:

The Dumb Artist Library (TX Library)
TXLib [Ver: 00173a, Rev: 172, Date: 2023-08-12 11:12:24 +0400]
Copyright (C) Ded (Ilya Dedinsky, http://txlib.ru) <mail@txlib.ru>
See license on: http://txlib.ru

TXLib file:	c:\program files\codeblocks\mingw\include\txlib.h
Compiled:	Sep 23 2023 18:30:39, GNU g++ 4.8.1, std=201103L, MinGW Runtime 3.20, 32-bit, DEBUG
Started:	Sep 23 2023 18:30:42

Run file:	C:\pupach_MFTI\pupach_atom\stack\stack.exe
Directory:	C:\pupach_MFTI\pupach_atom\stack

--------------------------------------------------

--------------------------------------------------
TXLib соболезнует...

Программа: C:\pupach_MFTI\pupach_atom\stack\stack.exe,

ВНЕЗАПНО: signal (11, 0x00): SIGSEGV: Доступ по неверному указателю. Ставьте ассерты! 

Нарушение доступа к памяти.

#1: Исключение EXCEPTION_ACCESS_VIOLATION (0xC0000005) при выполнении кода по адресу 0x0042C3C5 в функции Stack_Destructor() в файле C:/pupach_MFTI/pupach_atom/stack/stack.cpp на строке 136. Попытка записать данные по адресу NULL в модуле C:\pupach_MFTI\pupach_atom\stack\stack.exe. Спасибо _txVectoredExceptionHandler(), что сообщил. Люблю его <3

С помощью функции signal() вы можете сами обработать эту ошибку.

#2: TXLib [Ver: 00173a, Rev: 172, Date: 2023-08-12 11:12:24 +0400], Instance: 0x005052FC (32-bit), Flags: Cmdre0, Thread: 0x18C8 (Main). 

--------------------------------------------------
Стек вызовов:

# 0 0x0042C3C5 in C:\pupach_MFTI\pupach_atom\stack\stack.exe: Stack_Destructor() at C:/pupach_MFTI/pupach_atom/stack/stack.cpp (136):

    134:     for(int i = 0; i < (stk->copacity); i++)
    135:     {
=>  136:         *(stk->ptr_data + i) = POISON_VAL;
    137:     }
    138:     stk->ptr_data = (Elen_s *)(stk->ptr_data - (Can_type )(sizeof(char) * stk->size_canar));

# 1 0x0042C63B in C:\pupach_MFTI\pupach_atom\stack\stack.exe: _Stack_Dump() at C:/pupach_MFTI/pupach_atom/stack/stack.cpp (226):

    224: 
    225: 
=>  226:     Stack_Destructor(ptr_stk);
    227: 
    228:     LOG(1, stderr, "Stack_Destructor sucsesfull\n  %p\n", ptr_stk);

# 2 0x0042C035 in C:\pupach_MFTI\pupach_atom\stack\stack.exe: main() at C:/pupach_MFTI/pupach_atom/stack/stack.cpp (14):

     12:     Stack *stk = &stk1;
     13: 
=>   14:     STACK_DUMP(stk);
     15: 
     16:     size_t d = 10;

--------------------------------------------------
Developed with:

The Dumb Artist Library (TX Library)
TXLib [Ver: 00173a, Rev: 172, Date: 2023-08-12 11:12:24 +0400]
Copyright (C) Ded (Ilya Dedinsky, http://txlib.ru) <mail@txlib.ru>
See license on: http://txlib.ru

TXLib file:	c:\program files\codeblocks\mingw\include\txlib.h
Compiled:	Sep 23 2023 18:30:39, GNU g++ 4.8.1, std=201103L, MinGW Runtime 3.20, 32-bit, DEBUG
Started:	Sep 23 2023 18:30:42

Run file:	C:\pupach_MFTI\pupach_atom\stack\stack.exe
Directory:	C:\pupach_MFTI\pupach_atom\stack

--------------------------------------------------

--------------------------------------------------
TXLib предупреждает:

Программа: C:\pupach_MFTI\pupach_atom\stack\stack.exe,

ВНЕЗАПНО: Нарушение доступа к памяти.

#1: Исключение EXCEPTION_ACCESS_VIOLATION (0xC0000005) при выполнении кода по адресу 0x0042C3C5 в функции Stack_Destructor() в файле C:/pupach_MFTI/pupach_atom/stack/stack.cpp на строке 136. Попытка записать данные по адресу NULL в модуле C:\pupach_MFTI\pupach_atom\stack\stack.exe. Спасибо _txVectoredExceptionHandler(), что сообщил. Люблю его <3

#1: TXLib [Ver: 00173a, Rev: 172, Date: 2023-08-12 11:12:24 +0400], Instance: 0x005052FC (32-bit), Flags: Cmdre0, Thread: 0x5DC4 (Main), GetLastError(): 183 (Cannot create a file when that file already exists). 

--------------------------------------------------
Стек вызовов:

# 0 0x0042C3C5 in C:\pupach_MFTI\pupach_atom\stack\stack.exe: Stack_Destructor() at C:/pupach_MFTI/pupach_atom/stack/stack.cpp (136):

    134:     for(int i = 0; i < (stk->copacity); i++)
    135:     {
=>  136:         *(stk->ptr_data + i) = POISON_VAL;
    137:     }
    138:     stk->ptr_data = (Elen_s *)(stk->ptr_data - (Can_type )(sizeof(char) * stk->size_canar));

# 1 0x0042C63B in C:\pupach_MFTI\pupach_atom\stack\stack.exe: _Stack_Dump() at C:/pupach_MFTI/pupach_atom/stack/stack.cpp (226):

    224: 
    225: 
=>  226:     Stack_Destructor(ptr_stk);
    227: 
    228:     LOG(1, stderr, "Stack_Destructor sucsesfull\n  %p\n", ptr_stk);

# 2 0x0042C035 in C:\pupach_MFTI\pupach_atom\stack\stack.exe: main() at C:/pupach_MFTI/pupach_atom/stack/stack.cpp (14):

     12:     Stack *stk = &stk1;
     13: 
=>   14:     STACK_DUMP(stk);
     15: 
     16:     size_t d = 10;

--------------------------------------------------
Developed with:

The Dumb Artist Library (TX Library)
TXLib [Ver: 00173a, Rev: 172, Date: 2023-08-12 11:12:24 +0400]
Copyright (C) Ded (Ilya Dedinsky, http://txlib.ru) <mail@txlib.ru>
See license on: http://txlib.ru

TXLib file:	c:\program files\codeblocks\mingw\include\txlib.h
Compiled:	Sep 23 2023 18:31:32, GNU g++ 4.8.1, std=201103L, MinGW Runtime 3.20, 32-bit, DEBUG
Started:	Sep 23 2023 18:31:34

Run file:	C:\pupach_MFTI\pupach_atom\stack\stack.exe
Directory:	C:\pupach_MFTI\pupach_atom\stack

--------------------------------------------------

--------------------------------------------------
TXLib соболезнует...

Программа: C:\pupach_MFTI\pupach_atom\stack\stack.exe,

ВНЕЗАПНО: signal (11, 0x00): SIGSEGV: Доступ по неверному указателю. Ставьте ассерты! 

Нарушение доступа к памяти.

#1: Исключение EXCEPTION_ACCESS_VIOLATION (0xC0000005) при выполнении кода по адресу 0x0042C3C5 в функции Stack_Destructor() в файле C:/pupach_MFTI/pupach_atom/stack/stack.cpp на строке 136. Попытка записать данные по адресу NULL в модуле C:\pupach_MFTI\pupach_atom\stack\stack.exe. Спасибо _txVectoredExceptionHandler(), что сообщил. Люблю его <3

С помощью функции signal() вы можете сами обработать эту ошибку.

#2: TXLib [Ver: 00173a, Rev: 172, Date: 2023-08-12 11:12:24 +0400], Instance: 0x005052FC (32-bit), Flags: Cmdre0, Thread: 0x5DC4 (Main), GetLastError(): 183 (Cannot create a file when that file already exists). 

--------------------------------------------------
Стек вызовов:

# 0 0x0042C3C5 in C:\pupach_MFTI\pupach_atom\stack\stack.exe: Stack_Destructor() at C:/pupach_MFTI/pupach_atom/stack/stack.cpp (136):

    134:     for(int i = 0; i < (stk->copacity); i++)
    135:     {
=>  136:         *(stk->ptr_data + i) = POISON_VAL;
    137:     }
    138:     stk->ptr_data = (Elen_s *)(stk->ptr_data - (Can_type )(sizeof(char) * stk->size_canar));

# 1 0x0042C63B in C:\pupach_MFTI\pupach_atom\stack\stack.exe: _Stack_Dump() at C:/pupach_MFTI/pupach_atom/stack/stack.cpp (226):

    224: 
    225: 
=>  226:     Stack_Destructor(ptr_stk);
    227: 
    228:     LOG(1, stderr, "Stack_Destructor sucsesfull\n  %p\n", ptr_stk);

# 2 0x0042C035 in C:\pupach_MFTI\pupach_atom\stack\stack.exe: main() at C:/pupach_MFTI/pupach_atom/stack/stack.cpp (14):

     12:     Stack *stk = &stk1;
     13: 
=>   14:     STACK_DUMP(stk);
     15: 
     16:     size_t d = 10;

--------------------------------------------------
Developed with:

The Dumb Artist Library (TX Library)
TXLib [Ver: 00173a, Rev: 172, Date: 2023-08-12 11:12:24 +0400]
Copyright (C) Ded (Ilya Dedinsky, http://txlib.ru) <mail@txlib.ru>
See license on: http://txlib.ru

TXLib file:	c:\program files\codeblocks\mingw\include\txlib.h
Compiled:	Sep 23 2023 18:31:32, GNU g++ 4.8.1, std=201103L, MinGW Runtime 3.20, 32-bit, DEBUG
Started:	Sep 23 2023 18:31:34

Run file:	C:\pupach_MFTI\pupach_atom\stack\stack.exe
Directory:	C:\pupach_MFTI\pupach_atom\stack

--------------------------------------------------

--------------------------------------------------
TXLib предупреждает:

Программа: C:\pupach_MFTI\pupach_atom\stack\stack.exe,

ВНЕЗАПНО: Нарушение доступа к памяти.

#1: Исключение EXCEPTION_ACCESS_VIOLATION (0xC0000005) при выполнении кода по адресу 0x0042C3C5 в функции Stack_Destructor() в файле C:/pupach_MFTI/pupach_atom/stack/stack.cpp на строке 136. Попытка записать данные по адресу NULL в модуле C:\pupach_MFTI\pupach_atom\stack\stack.exe. Спасибо _txVectoredExceptionHandler(), что сообщил. Люблю его <3

#1: TXLib [Ver: 00173a, Rev: 172, Date: 2023-08-12 11:12:24 +0400], Instance: 0x005052FC (32-bit), Flags: Cmdre0, Thread: 0x42F0 (Main), GetLastError(): 183 (Cannot create a file when that file already exists). 

--------------------------------------------------
Стек вызовов:

# 0 0x0042C3C5 in C:\pupach_MFTI\pupach_atom\stack\stack.exe: Stack_Destructor() at C:/pupach_MFTI/pupach_atom/stack/stack.cpp (136):

    134:     for(int i = 0; i < (stk->copacity); i++)
    135:     {
=>  136:         *(stk->ptr_data + i) = POISON_VAL;
    137:     }
    138:     stk->ptr_data = (Elen_s *)(stk->ptr_data - (Can_type )(sizeof(char) * stk->size_canar));

# 1 0x0042C646 in C:\pupach_MFTI\pupach_atom\stack\stack.exe: _Stack_Dump() at C:/pupach_MFTI/pupach_atom/stack/stack.cpp (227):

    225:     fflush(stream_out);
    226: 
=>  227:     Stack_Destructor(ptr_stk);
    228: 
    229:     LOG(1, stderr, "Stack_Destructor sucsesfull\n  %p\n", ptr_stk);

# 2 0x0042C035 in C:\pupach_MFTI\pupach_atom\stack\stack.exe: main() at C:/pupach_MFTI/pupach_atom/stack/stack.cpp (14):

     12:     Stack *stk = &stk1;
     13: 
=>   14:     STACK_DUMP(stk);
     15: 
     16:     size_t d = 10;

--------------------------------------------------
Developed with:

The Dumb Artist Library (TX Library)
TXLib [Ver: 00173a, Rev: 172, Date: 2023-08-12 11:12:24 +0400]
Copyright (C) Ded (Ilya Dedinsky, http://txlib.ru) <mail@txlib.ru>
See license on: http://txlib.ru

TXLib file:	c:\program files\codeblocks\mingw\include\txlib.h
Compiled:	Sep 23 2023 18:32:27, GNU g++ 4.8.1, std=201103L, MinGW Runtime 3.20, 32-bit, DEBUG
Started:	Sep 23 2023 18:32:29

Run file:	C:\pupach_MFTI\pupach_atom\stack\stack.exe
Directory:	C:\pupach_MFTI\pupach_atom\stack

--------------------------------------------------

--------------------------------------------------
TXLib соболезнует...

Программа: C:\pupach_MFTI\pupach_atom\stack\stack.exe,

ВНЕЗАПНО: signal (11, 0x00): SIGSEGV: Доступ по неверному указателю. Ставьте ассерты! 

Нарушение доступа к памяти.

#1: Исключение EXCEPTION_ACCESS_VIOLATION (0xC0000005) при выполнении кода по адресу 0x0042C3C5 в функции Stack_Destructor() в файле C:/pupach_MFTI/pupach_atom/stack/stack.cpp на строке 136. Попытка записать данные по адресу NULL в модуле C:\pupach_MFTI\pupach_atom\stack\stack.exe. Спасибо _txVectoredExceptionHandler(), что сообщил. Люблю его <3

С помощью функции signal() вы можете сами обработать эту ошибку.

#2: TXLib [Ver: 00173a, Rev: 172, Date: 2023-08-12 11:12:24 +0400], Instance: 0x005052FC (32-bit), Flags: Cmdre0, Thread: 0x42F0 (Main), GetLastError(): 183 (Cannot create a file when that file already exists). 

--------------------------------------------------
Стек вызовов:

# 0 0x0042C3C5 in C:\pupach_MFTI\pupach_atom\stack\stack.exe: Stack_Destructor() at C:/pupach_MFTI/pupach_atom/stack/stack.cpp (136):

    134:     for(int i = 0; i < (stk->copacity); i++)
    135:     {
=>  136:         *(stk->ptr_data + i) = POISON_VAL;
    137:     }
    138:     stk->ptr_data = (Elen_s *)(stk->ptr_data - (Can_type )(sizeof(char) * stk->size_canar));

# 1 0x0042C646 in C:\pupach_MFTI\pupach_atom\stack\stack.exe: _Stack_Dump() at C:/pupach_MFTI/pupach_atom/stack/stack.cpp (227):

    225:     fflush(stream_out);
    226: 
=>  227:     Stack_Destructor(ptr_stk);
    228: 
    229:     LOG(1, stderr, "Stack_Destructor sucsesfull\n  %p\n", ptr_stk);

# 2 0x0042C035 in C:\pupach_MFTI\pupach_atom\stack\stack.exe: main() at C:/pupach_MFTI/pupach_atom/stack/stack.cpp (14):

     12:     Stack *stk = &stk1;
     13: 
=>   14:     STACK_DUMP(stk);
     15: 
     16:     size_t d = 10;

--------------------------------------------------
Developed with:

The Dumb Artist Library (TX Library)
TXLib [Ver: 00173a, Rev: 172, Date: 2023-08-12 11:12:24 +0400]
Copyright (C) Ded (Ilya Dedinsky, http://txlib.ru) <mail@txlib.ru>
See license on: http://txlib.ru

TXLib file:	c:\program files\codeblocks\mingw\include\txlib.h
Compiled:	Sep 23 2023 18:32:27, GNU g++ 4.8.1, std=201103L, MinGW Runtime 3.20, 32-bit, DEBUG
Started:	Sep 23 2023 18:32:29

Run file:	C:\pupach_MFTI\pupach_atom\stack\stack.exe
Directory:	C:\pupach_MFTI\pupach_atom\stack

--------------------------------------------------
